(function(angular){
'use strict';


angular
  .module('root', [
        'layout',
        'admin',
     'templates',
     'services'
  ]);})(window.angular);
(function(angular){
'use strict';

/**
 *
 * @ngdoc module
 * @name components
 *
 * @requires components.contact
 * @requires components.auth
 *
 * @description
 *
 * This is the components module. It includes all of our components.
 *
 **/

angular
  .module('admin', [
    'admin.dashboard',
    'admin.users',
    'admin.rnd',
    'admin.config',
    'admin.purchasing',
    'admin.shared',
    'admin.accounting',
    'admin.sales'
  ]);
})(window.angular);
(function(angular){
'use strict';

/**
 *
 * @ngdoc module
 * @name components
 *
 * @requires components.contact
 * @requires components.auth
 *
 * @description
 *
 * This is the components module. It includes all of our components.
 *
 **/

angular
  .module('layout', [
    'admin.common'
  ]);
})(window.angular);
(function(angular){
'use strict';


/**
 *
 * @ngdoc module
 * @name app.services
 *
 **/
 angular
  .module('services', [
    'ui.router'
  ]);
})(window.angular);
(function(angular){
'use strict';
angular
  .module('admin.accounting', [
    'ui.router',
    'admin.shared',
    'admin.dashboard',
    'admin.sales',
    'admin.maintenance'
  ]);})(window.angular);
(function(angular){
'use strict';

/**
 *
 * @ngdoc module
 * @name admin.purchasing
 *
 * @requires ui.router
 *
 * @description
 *
 * This is the purchasing module. It includes all of our components for the purchasing feature.
 *
 **/
angular
  .module('admin.purchasing', [
    'ui.router',
    'admin.shared',
    'admin.dashboard'
  ]);})(window.angular);
(function(angular){
'use strict';
angular
  .module('admin.maintenance', [
    'ui.router',
    'admin.shared',
    'admin.dashboard'
  ]);})(window.angular);
(function(angular){
'use strict';
angular
  .module('admin.sales', [
    'ui.router',
    'admin.shared',
    'admin.dashboard',
    'admin.accounting',
    'admin.maintenance'
  ]);})(window.angular);
(function(angular){
'use strict';

/**
 *
 * @ngdoc module
 * @name components.contact
 *
 * @requires ui.router
 *
 * @description
 *
 * This is the contact module. It includes all of our components for the contact feature.
 *
 **/
angular
  .module('admin.rnd', [
    'ui.router'
  ]);})(window.angular);
(function(angular){
'use strict';

/**
 *
 * @ngdoc module
 * @name components.contact
 *
 * @requires ui.router
 *
 * @description
 *
 * This is the contact module. It includes all of our components for the contact feature.
 *
 **/
angular
  .module('admin.users', [
    'ui.router'
  ]);
})(window.angular);
(function(angular){
'use strict';

/**
 *
 * @ngdoc module
 * @name components.contact
 *
 * @requires ui.router
 *
 * @description
 *
 * This is the contact module. It includes all of our components for the contact feature.
 *
 **/
angular
  .module('admin.dashboard', [
    'ui.router',
    'admin.shared',
    'admin.purchasing'
  ]);})(window.angular);
(function(angular){
'use strict';

/**
 *
 * @ngdoc module
 * @name admin.shared
 *
 * @requires ui.router
 *
 * @description
 *
 * This is the shared module. It includes all of our components for the shared feature.
 *
 **/
angular
  .module('admin.shared', [
    'ui.router'
  ]);})(window.angular);
(function(angular){
'use strict';


/**
 *
 * @ngdoc module
 * @name admin.common
 *
 * @requires ui.router
 * @requires angular-loading-bar
 *
 * @description
 *
 * This is the admin.common module. It includes a run method that setups the loading bar.
 *
 **/
 angular
  .module('admin.common', [
    'ui.router',
    'angular-loading-bar',
    'ngCookies',
    'checklist-model',
    'angularUtils.directives.dirPagination'
  ])
   .run(["$transitions", "cfpLoadingBar", function ($transitions, cfpLoadingBar) {
     $transitions.onStart({}, cfpLoadingBar.start);
     $transitions.onSuccess({}, cfpLoadingBar.complete);
   }]);
})(window.angular);
(function(angular){
'use strict';
var root = {
  templateUrl: './root.html'
};

angular
  .module('root')
  .component('root', root)
  .constant('_', window._) //lodash
  .config(["$stateProvider", "$locationProvider", "$httpProvider", function ($stateProvider, $locationProvider, $httpProvider) {
    $stateProvider
      .state('app', {
        redirectTo: 'dashboard',
        url: '',
//        data: {
//          requiredAuth: true
//        },
        component: 'app'
      });

      /* Register error provider that shows message on failed requests or redirects to login page on
        * unauthenticated requests */
      $httpProvider.interceptors.push(["$q", "$rootScope", "$location", function ($q, $rootScope, $location) {
        return {
            'responseError': function (rejection) {
                if (!rejection.status) return $q.reject(rejection);
                var status = rejection.status;
                var config = rejection.config;
                var method = config.method;
                var url = config.url;

                if (status == 401) {
                    $location.path("/login");
                } else {
                    $rootScope.error = method + " on " + url + " failed with status " + status;
                }

                return $q.reject(rejection);
            }
        };
      }]);

      /* Registers auth token interceptor, auth token is either passed by header or by query parameter
             * as soon as there is an authenticated user */
      $httpProvider.interceptors.push(["$q", "$rootScope", "$location", "globalConfig", function ($q, $rootScope, $location, globalConfig) {
        return {
            'request': function (config) {
                var isRestCall = config.url.indexOf('rest') !== -1;
                var isLogin = config.url.indexOf('rest/login') >= 0;
                if (!isLogin && isRestCall && angular.isDefined($rootScope.accessToken)) {
                    var accessToken = $rootScope.accessToken;
                    //console.log("sending accessToken: " + accessToken + ", url: " + config.url);
                    config.url = config.url + "?token=" + accessToken;
                    
                }
                return config || $q.when(config);
            }
        };
    }]
      );


      $locationProvider.html5Mode(true);
  }]).run(["$state", "$rootScope", "$cookieStore", "$location", "UsersService", function($state, $rootScope, $cookieStore, $location, UsersService) {

    $rootScope._ = window._; //lodash

    /* Reset error when a new view is loaded */
    $rootScope.$on('$viewContentLoaded', function () {
      delete $rootScope.error;
    });

    $rootScope.logout = function () {
      delete $rootScope.user;
      delete $rootScope.accessToken;
      $cookieStore.remove('accessToken');
      $location.path("/login");
    };

    /* Try getting valid user from cookie or go to login page */
    var originalPath = $location.path();
    $location.path("/login");
    var accessToken = $cookieStore.get('accessToken');
    if (accessToken !== undefined) {
        $rootScope.accessToken = accessToken;
        console.log("### ACCESS TOKEN FOUND");
        UsersService.me().then(function(response) {
          console.log("### UsersService.me: " + JSON.stringify(response.data));
          $rootScope.user = response.data;
          if(!$rootScope.selectedCompany){
        	  	if(window.localStorage.getItem('company') == null){
        	  		$rootScope.selectedCompany = $rootScope.user.company;
        	  	}else{
        	  		console.log("in root module company local storage" + window.localStorage.getItem('company'));
        	  		$rootScope.selectedCompany = JSON.parse(window.localStorage.getItem('company'));
        	  	}
          }
          localStorage.setItem('currentUser', JSON.stringify($rootScope.user));
          $location.path(originalPath);
        });
    }

  }]);
})(window.angular);
(function(angular){
'use strict';
angular.module("admin.config", [])
.constant("globalConfig", {"environment":"local","version":"dev-1.0.18","baseUrl":"http://localhost:9000"});
})(window.angular);
(function(angular){
'use strict';
AuthService.$inject = ["$http", "globalConfig"];
function AuthService($http, globalConfig) {

	this.authenticate = function(username, password) {
		console.log("AuthService authenticate: " + username);
		return $http.post(globalConfig.baseUrl + '/api/login', {username: username, password: password});
	};

	
}

/**
 * @ngdoc service
 * @name PermissionsService
 * @module services
 *
 */
angular.module('services').service('AuthService', AuthService);
})(window.angular);
(function(angular){
'use strict';
PermissionsService.$inject = ["$http", "globalConfig"];
function PermissionsService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/permissions');
	};

	this.save = function(permission) {
		return $http.post(globalConfig.baseUrl + '/rest/permissions', permission);
	};

	this.update = function(permission) {
		return $http.post(globalConfig.baseUrl + '/rest/permissions/', permission);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/permissions/' + id);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/permissions/delete/', id);
	};
}

/**
 * @ngdoc service
 * @name PermissionsService
 * @module services
 *
 */
angular.module('services').service('PermissionsService', PermissionsService);
})(window.angular);
(function(angular){
'use strict';

var accounting = {
  bindings: {
    accounting: '<'
  },
  templateUrl: './accounting.html',
  controller: 'AccountingController'
};

angular
  .module('admin.accounting')
  .component('accounting', accounting)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('accounting', {
        parent: 'app',
        url: '/admin/accounting',
        component: 'accounting'
      });
  }]);})(window.angular);
(function(angular){
'use strict';


AccountingController.$inject = ["$state", "CompanyService", "$rootScope"];
function AccountingController($state, CompanyService, $rootScope) {
  var ctrl = this;

  ctrl.currentUser = { firstName: "Unknown user", department: { name: 'No ' } };

  ctrl.$onInit = function () {
      var currentUser = localStorage.getItem('currentUser');
      if (currentUser != null) {
          ctrl.currentUser = JSON.parse(currentUser);
      }
  }

  ctrl.checkPermission = function (code) {
    if (ctrl.currentUser.permissions[code]) {
        if (ctrl.currentUser.permissions[code].actions !== '') {
            return true;
        }
    }

    return false;
}

}

angular
  .module('admin.dashboard')
  .controller('AccountingController', AccountingController);})(window.angular);
(function(angular){
'use strict';

CostingService.$inject = ["$http", "globalConfig"];
function CostingService($http, globalConfig) {
  return {
    list: function() {
      return $http.get(globalConfig.baseUrl + '/rest/moCosting');
    },
    listByCompany: function(companyId) {
      return $http.get(globalConfig.baseUrl + '/rest/moCosting/company/' + companyId);
    },
    one: function(id) {
      return $http.get(globalConfig.baseUrl + '/rest/moCosting/' + id);
    },
    save: function(obj) {
      return $http.post(globalConfig.baseUrl + '/rest/moCosting', obj);
    },
    delete: function(id) {
      return $http.delete(globalConfig.baseUrl + '/rest/moCosting/' + id);
    }
  }
}


angular
  .module('admin.dashboard')
  .factory('CostingService', CostingService);})(window.angular);
(function(angular){
'use strict';

JoCostService.$inject = ["$http", "globalConfig"];
function JoCostService($http, globalConfig) {
  return {
    list: function() {
      return $http.get(globalConfig.baseUrl + '/rest/joCosts');
    },
    listByCompany: function(companyId) {
      return $http.get(globalConfig.baseUrl + '/rest/joCosts/company/' + companyId);
    },
    one: function(id) {
      return $http.get(globalConfig.baseUrl + '/rest/joCosts/' + id);
    },
    save: function(obj) {
      return $http.post(globalConfig.baseUrl + '/rest/joCosts', obj);
    },
    delete: function(id) {
      return $http.delete(globalConfig.baseUrl + '/rest/joCosts/' + id);
    }
  }
}


angular
  .module('admin.dashboard')
  .factory('JoCostService', JoCostService);})(window.angular);
(function(angular){
'use strict';

var maintenance = {
  bindings: {
    maintenance: '<'
  },
  templateUrl: './maintenance.html',
  controller: 'MaintenanceController'
};

angular
  .module('admin.maintenance')
  .component('maintenance', maintenance)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('maintenance', {
        parent: 'app',
        url: '/admin/maintenance',
        component: 'maintenance'
      });
  }]);})(window.angular);
(function(angular){
'use strict';


MaintenanceController.$inject = ["$state", "CompanyService", "$rootScope"];
function MaintenanceController($state, CompanyService, $rootScope) {
  var ctrl = this;

  ctrl.currentUser = { firstName: "Unknown user", department: { name: 'No ' } };

  ctrl.$onInit = function () {
      var currentUser = localStorage.getItem('currentUser');
      if (currentUser != null) {
          ctrl.currentUser = JSON.parse(currentUser);
      }
  }

  ctrl.checkPermission = function (code) {
    if (ctrl.currentUser.permissions[code]) {
        if (ctrl.currentUser.permissions[code].actions !== '') {
            return true;
        }
    }

    return false;
}

}

angular
  .module('admin.dashboard')
  .controller('MaintenanceController', MaintenanceController);})(window.angular);
(function(angular){
'use strict';

var sales = {
  bindings: {
    sales: '<'
  },
  templateUrl: './sales.html',
  controller: 'SalesController'
};

angular
  .module('admin.sales')
  .component('sales', sales)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('sales', {
        parent: 'app',
        url: '/admin/sales',
        component: 'sales'
      });
  }]);})(window.angular);
(function(angular){
'use strict';


SalesController.$inject = ["$state", "CompanyService", "$rootScope"];
function SalesController($state, CompanyService, $rootScope) {
  var ctrl = this;

  ctrl.currentUser = { firstName: "Unknown user", department: { name: 'No ' } };

  ctrl.$onInit = function () {
      var currentUser = localStorage.getItem('currentUser');
      if (currentUser != null) {
          ctrl.currentUser = JSON.parse(currentUser);
      }
  }

  ctrl.checkPermission = function (code) {
    if (ctrl.currentUser.permissions[code]) {
        if (ctrl.currentUser.permissions[code].actions !== '') {
            return true;
        }
    }

    return false;
}

}

angular
  .module('admin.dashboard')
  .controller('SalesController', SalesController);})(window.angular);
(function(angular){
'use strict';
RecipesService.$inject = ["$http", "globalConfig"];
function RecipesService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/recipes');
	};

	this.save = function(recipe) {
		return $http.post(globalConfig.baseUrl + '/rest/recipes', recipe);
	};

	this.update = function(recipe) {
		return $http.post(globalConfig.baseUrl + '/rest/recipes/', recipe);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/recipes/' + id);
	};
	
	this.listByStatus = function(status) {
		return $http.get(globalConfig.baseUrl + '/rest/recipes/status/' + status);
	};
	
	this.listByFinishedGood = function(finishedGoodId) {
		return $http.get(globalConfig.baseUrl + '/rest/recipes/finished-good/' + finishedGoodId);
	};
	
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/recipes/delete/',id);
	};
}

/**
 * @ngdoc service
 * @name RecipesService
 * @module components.auth
 *
 */
angular.module('admin.rnd').service('RecipesService', RecipesService);
})(window.angular);
(function(angular){
'use strict';

var rnd = {
    templateUrl: './rnd.html',
    controller: 'RndController'
  };
  
  angular
    .module('admin.rnd')
    .component('rnd', rnd)
    .config(["$stateProvider", function ($stateProvider) {
      $stateProvider
        .state('rnd', {
          parent: 'app',
          url: '/admin/rnd',
          component: 'rnd'
        });
    }]);})(window.angular);
(function(angular){
'use strict';

  RndController.$inject = ["$state", "_"];
function RndController($state, _) {
    var ctrl = this;

  
   
  }
  
  angular
    .module('admin.rnd')
    .controller('RndController', RndController);
  })(window.angular);
(function(angular){
'use strict';
CompanyService.$inject = ["$http", "globalConfig"];
function CompanyService($http, globalConfig) {

  this.list = function () {
    return $http.get(globalConfig.baseUrl + '/rest/companies');
  };

  this.save = function (company) {
    return $http.post(globalConfig.baseUrl + '/rest/companies', company);
  };

  this.update = function (company) {
    return $http.post(globalConfig.baseUrl + '/rest/companies/', company);
  };

  this.get = function (id) {
    return $http.get(globalConfig.baseUrl + '/rest/companies/' + id);
  };
}

/**
 * @ngdoc service
 * @name CompanyService
 * @module components.auth
 *
 */
angular
  .module('admin.users')
  .service('CompanyService', CompanyService);
})(window.angular);
(function(angular){
'use strict';
UsersService.$inject = ["$http", "globalConfig"];
function UsersService($http, globalConfig) {

  this.list = function () {
    return $http.get(globalConfig.baseUrl + '/rest/users');
  };

  this.save = function (user) {
    return $http.post(globalConfig.baseUrl + '/rest/users', user);
  };

  this.update = function (user) {
    return $http.post(globalConfig.baseUrl + '/rest/users/', user);
  };

  this.get = function (id) {
    return $http.get(globalConfig.baseUrl + '/rest/users/' + id);
  };

  this.listByCompany = function(id) {
	return $http.get(globalConfig.baseUrl + '/rest/users/company/' + id);  
  };

  this.me = function() {
      return $http.get(globalConfig.baseUrl + '/rest/me');
  }
  
  this.convertActionsString = function (actions) {
    if (actions && actions !== '') {
      if (!(typeof actions === "string")) {
        console.error('convertActionsString requires actions to be string: ', actions);
        return;
      }
      return actions.split('');
    } else {
      return [];
    }
  }

  this.actionArrayToString = function (actionArray) {
   
    if (actionArray && actionArray !== []) {
      if (!(actionArray instanceof Array)) {
        console.error('actionArrayToString requires actions to be array');
        return;
      }  
      return actionArray.join('');
    } else {
      return '';
    }
  }
}

/**
 * @ngdoc service
 * @name UsersService
 * @module components.auth
 *
 */
angular
  .module('admin.users')
  .service('UsersService', UsersService);
})(window.angular);
(function(angular){
'use strict';

var dashboard = {
  bindings: {
    dashboard: '<'
  },
  templateUrl: './dashboard.html',
  controller: 'DashboardController'
};

angular
  .module('admin.dashboard')
  .component('dashboard', dashboard)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('dashboard', {
        parent: 'app',
        url: '/admin/dashboard',
        component: 'dashboard'
      });
  }]);})(window.angular);
(function(angular){
'use strict';


DashboardController.$inject = ["$state", "CompanyService", "$rootScope"];
function DashboardController($state, CompanyService, $rootScope) {
  var ctrl = this;

  ctrl.currentUser = { firstName: "Unknown user", department: { name: 'No ' } };

  ctrl.$onInit = function () {
      var currentUser = localStorage.getItem('currentUser');
      if (currentUser != null) {
          ctrl.currentUser = JSON.parse(currentUser);
      }
  }

  ctrl.checkPermission = function (code) {
    if (ctrl.currentUser.permissions[code]) {
        if (ctrl.currentUser.permissions[code].actions !== '') {
            return true;
        }
    }

    return false;
}

}

angular
  .module('admin.dashboard')
  .controller('DashboardController', DashboardController);})(window.angular);
(function(angular){
'use strict';
function ConversionHelper() {

    this.convert = function(unit1, unit2, values) {
        if (unit1==="kg" && unit2==="ml") {
            return kgToML(values[0], values[1]);
        } else if (unit1==="gm" && unit2==="ml") {
            return gmToML(values[0], values[1]);
        } else if (unit1==="ml" && unit2==="kg") {
            return mlToKg(values[0], values[1]);
        } else if (unit1==="ml" && unit2==="g") {
            return mlToG(values[0], values[1]);
        } else if (unit1==="g" && unit2==="ltr") {
            return gToLtr(values[0], values[1]);
        } else if (unit1==="ltr" && unit2==="g") {
            return ltrToG(values[0], values[1]);
        } else if (unit1==="ml" && unit2==="mg") {
            return mlToMG(values[0], values[1]);
        }

        return -1;
    }


	this.kgToML = function(unitInKg, specificGravity) {
		return (unitInKg / specificGravity) * 1000;
	};

	this.gmToML = function(quantity, specificGravity) {
		return ((quantity / 1000) / specificGravity) * 1000;
    };
    
    this.mlToKg = function(ml, specificGravity) {
		return ((ml / 1000) * specificGravity);
    };
    
    this.mlToG = function(quantity, specificGravity) {
		return ((quantity / 1000) * specificGravity) * 1000;
    };
    
    this.gToLtr = function(quantity, specificGravity) {
		return ((quantity / 1000) / specificGravity);
    };
    
    this.ltrToG = function(quantity, specificGravity) {
		return ((quantity * specificGravity) * 1000);
    };
    
    this.mlToMG = function(quantity, specificGravity) {
		return ((quantity * specificGravity) * 1000);
	};
}

/**
 * @ngdoc service
 * @name ConversionHelper
 * @module conversion.helper
 *
 */
angular.module('admin.shared').service('ConversionHelper', ConversionHelper);
})(window.angular);
(function(angular){
'use strict';


var appNav = {
  templateUrl: './app-nav.html',
  controller: 'AppNavController'
};

angular
  .module('admin.common')
  .component('appNav', appNav);})(window.angular);
(function(angular){
'use strict';


AppNavController.$inject = ["globalConfig", "$http", "$rootScope"];
function AppNavController(globalConfig, $http, $rootScope) {
    var ctrl = this;

    ctrl.currentUser = { firstName: "Unknown user", department: { name: 'No ' } };

    ctrl.$onInit = function () {
        var currentUser = localStorage.getItem('currentUser');
        if (currentUser != null) {
            ctrl.currentUser = JSON.parse(currentUser);
        }
    }

    

    ctrl.logout = function() {
      $rootScope.logout();
    }
};

/**
 * @ngdoc type
 * @module admin.common
 * @name AppController
 *
 */
angular
  .module('admin.common')
  .controller('AppNavController', AppNavController);})(window.angular);
(function(angular){
'use strict';
var appSidenav = {
  templateUrl: './app-sidenav.html',
  controller: 'AppSideNavController'
};

angular
  .module('admin.common')
  .component('appSidenav', appSidenav);
})(window.angular);
(function(angular){
'use strict';


AppSideNavController.$inject = ["$state", "$rootScope"];
function AppSideNavController($state, $rootScope) {
    var ctrl = this;

    ctrl.isPageWithSubMenu = false;
    ctrl.currentUser = { firstName: "Unknown user", department: { name: 'No ' } };

    ctrl.$onInit = function () {
        var currentUser = localStorage.getItem('currentUser');
        if (currentUser != null) {
            ctrl.currentUser = JSON.parse(currentUser);
        }
    }

    var checkPermission = function (code) {
        if (ctrl.currentUser.permissions[code]) {
            if (ctrl.currentUser.permissions[code].actions !== '') {
                return true;
            }
        }

        return false;
    }

    ctrl.showTabs = function (page) {
        if (checkPermission('superadmin')) {
            return true;
        }

        switch (page) {
            case 'DASHBOARD':
                return true;
                break;
            case 'USERS':
                return checkPermission('admin-dac') || checkPermission('admin-gc');
                break;
            case 'MMD':
                return checkPermission('mmd-p') || checkPermission('mmd-r');
                break;
            case 'RND':
                return checkPermission('rnd-recipe') || checkPermission('rnd-report') || checkPermission('rnd-items');
                break;
            case 'PURCHASING':
                return checkPermission('purchasing-po') || checkPermission('purchasing-r') || checkPermission('purchasing-v');
                break;
            case 'BUILDING1':
                return checkPermission('building1-jo') || checkPermission('building1-r');
                break;
            default:
                return false;
        }
    }


    ctrl.navList = {
        "/admin/dashboard": { withSub: false },
        "/admin/users": { withSub: false },
        "/admin/mmd": { withSub: false },
        "/admin/rnd": { withSub: true },
        "/admin/purchasing": { withSub: false },
        "/admin/costing": { withSub: false },
        "/admin/job_order": { withSub: false },
        "/admin/accounting": {withSub: false},
        "/admin/sales": {withSub: false},
        "/admin/maintenance": {withSub: false}

    }

    ctrl.getPathname = function () {
        return window.location.pathname;
    }

    ctrl.checkSub = function (location) {
        console.log('checkSub: ' + location);
        ctrl.isPageWithSubMenu = ctrl.navList[location].withSub;
    }

};

/**
 * @ngdoc type
 * @module admin.common
 * @name AppController
 *
 */
angular
    .module('admin.common')
    .controller('AppSideNavController', AppSideNavController);})(window.angular);
(function(angular){
'use strict';

var app = {
  templateUrl: './app.html',
  controller: 'AppController'
};

/**
 * @ngdoc directive
 * @name app
 * @module admin.common
 *
 **/
angular
  .module('admin.common')
  .component('app', app);})(window.angular);
(function(angular){
'use strict';


AppController.$inject = ["globalConfig", "$http"];
function AppController(globalConfig, $http) {
    var ctrl = this;
    ctrl.appVersion = globalConfig.version;
    ctrl.superadminServerVersion = "offline";
    $http.get(globalConfig.baseUrl + '/version').then(function(response) {
        console.log("server version response: " + response.data.version);
        ctrl.superadminServerVersion = response.data.version;
    });
};

/**
 * @ngdoc type
 * @module admin.common
 * @name AppController
 *
 */
angular
  .module('admin.common')
  .controller('AppController', AppController);})(window.angular);
(function(angular){
'use strict';
PermissionsService.$inject = ["$http", "globalConfig"];
function PermissionsService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/permissions');
	};

	this.save = function(permission) {
		return $http.post(globalConfig.baseUrl + '/rest/permissions', permission);
	};

	this.update = function(permission) {
		return $http.post(globalConfig.baseUrl + '/rest/permissions/', permission);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/permissions/' + id);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/permissions/delete/', id);
	};
}

/**
 * @ngdoc service
 * @name PermissionsService
 * @module services
 *
 */
angular.module('services').service('PermissionsService', PermissionsService);
})(window.angular);
(function(angular){
'use strict';

CashReceiptVouchersService.$inject = ["$http", "globalConfig"];
function CashReceiptVouchersService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/cash-receipt-vouchers');
	};

	this.save = function(receivingReceipt) {
		return $http.post(globalConfig.baseUrl + '/rest/cash-receipt-vouchers', receivingReceipt);
	};

	this.update = function(receivingReceipt) {
		return $http.post(globalConfig.baseUrl + '/rest/cash-receipt-vouchers/', receivingReceipt);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/cash-receipt-vouchers/' + id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/cash-receipt-vouchers/company/' + companyId);
	};
	
	this.getByCompanyAndDates = function (companyId, startDate, endDate){
		return $http.get(globalConfig.baseUrl + '/rest/cash-receipt-vouchers/company/' + companyId + '/start/' + startDate + '/end/' +endDate);
	};
	
}

/**
 * @ngdoc service
 * @name CashReceiptVouchersService
 * @module components.auth
 *
 */

angular.module('admin.accounting').service('CashReceiptVouchersService', CashReceiptVouchersService);
})(window.angular);
(function(angular){
'use strict';

ChequeDisbursementsService.$inject = ["$http", "globalConfig"];
function ChequeDisbursementsService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/cheque-disbursements');
	};

	this.save = function(receivingReceipt) {
		return $http.post(globalConfig.baseUrl + '/rest/cheque-disbursements', receivingReceipt);
	};

	this.update = function(receivingReceipt) {
		return $http.post(globalConfig.baseUrl + '/rest/cheque-disbursements/', receivingReceipt);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/cheque-disbursements/' + id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/cheque-disbursements/company/' + companyId);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/cheque-disbursements/delete/',id);
	};
	
}

/**
 * @ngdoc service
 * @name ChequeDisbursementsService
 * @module components.auth
 *
 */

angular.module('admin.accounting').service('ChequeDisbursementsService', ChequeDisbursementsService);
})(window.angular);
(function(angular){
'use strict';
DebitMemosService.$inject = ["$http", "globalConfig"];
function DebitMemosService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/debit-memos');
	};

	this.save = function(client) {
		return $http.post(globalConfig.baseUrl + '/rest/debit-memos', client);
	};

	this.update = function(client) {
		return $http.post(globalConfig.baseUrl + '/rest/debit-memos/', client);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/debit-memos/' + id);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/debit-memos/delete/',id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/debit-memos/company/'+ companyId);
	};
	
	this.listByDepot = function(depotId) {
		return $http.get(globalConfig.baseUrl + '/rest/debit-memos/depot/'+ depotId);
	};
	
}

/**
 * @ngdoc service
 * @name DebitMemosService
 * @module components.auth
 *
 */
angular.module('admin.accounting').service('DebitMemosService', DebitMemosService);
})(window.angular);
(function(angular){
'use strict';

JournalVouchersService.$inject = ["$http", "globalConfig"];
function JournalVouchersService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/journal-vouchers');
	};

	this.save = function(receivingReceipt) {
		return $http.post(globalConfig.baseUrl + '/rest/journal-vouchers', receivingReceipt);
	};

	this.update = function(receivingReceipt) {
		return $http.post(globalConfig.baseUrl + '/rest/journal-vouchers/', receivingReceipt);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/journal-vouchers/' + id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/journal-vouchers/company/' + companyId);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/journal-vouchers/delete/',id);
	};
	
	this.approve = function(jvId, userId){
		return $http.post(globalConfig.baseUrl + '/rest/journal-vouchers/approve/' + jvId + '/user/' + userId);
	};
	
	this.listAdjustmentsOfVoucherByCompany = function(voucherId, companyId){
		return $http.get(globalConfig.baseUrl + '/rest/journal-vouchers/company/' + companyId + '/voucher/' + voucherId + '/adjustments');
	};
	
	this.getJvWithoutAdjustmentsByCompanyAndVendorAndStatus = function (companyId, vendorId, status){
		return $http.get(globalConfig.baseUrl + '/rest/journal-vouchers/company/'+companyId+'/vendor/'+vendorId+'/status/'+status+'/journal-vouchers-no-adjustment');
	};
	
	this.getByCompanyAndDates = function (companyId, startDate, endDate){
		return $http.get(globalConfig.baseUrl + '/rest/journal-vouchers/company/' + companyId + '/start/' + startDate + '/end/' +endDate);
	};
	
	this.getJournalReport= function (companyId, startDate, endDate){
		return $http.get(globalConfig.baseUrl + '/rest/journal-vouchers/journal-report/company/' + companyId + '/start/' + startDate + '/end/' +endDate);
	};
	
}

/**
 * @ngdoc service
 * @name JournalVouchersService
 * @module components.auth
 *
 */

angular.module('admin.accounting').service('JournalVouchersService', JournalVouchersService);
})(window.angular);
(function(angular){
'use strict';
CreditMemosService.$inject = ["$http", "globalConfig"];
function CreditMemosService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/credit-memos');
	};

	this.save = function(client) {
		return $http.post(globalConfig.baseUrl + '/rest/credit-memos', client);
	};

	this.update = function(client) {
		return $http.post(globalConfig.baseUrl + '/rest/credit-memos/', client);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/credit-memos/' + id);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/credit-memos/delete/',id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/credit-memos/company/'+ companyId);
	};
	
	this.listByDepot = function(depotId) {
		return $http.get(globalConfig.baseUrl + '/rest/credit-memos/depot/'+ depotId);
	};
	
	this.getCMDMSummaryReport = function ( depotId, startDate, endDate){
		return $http.get(globalConfig.baseUrl + '/rest/memo-slips/report/depot/' + depotId + '/start/' + startDate + '/end/' + endDate);
	};
	
}

/**
 * @ngdoc service
 * @name CreditMemosService
 * @module components.auth
 *
 */
angular.module('admin.accounting').service('CreditMemosService', CreditMemosService);
})(window.angular);
(function(angular){
'use strict';
PdcDisbursementsService.$inject = ["$http", "globalConfig"];
function PdcDisbursementsService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/pdc-disbursements');
	};

	this.save = function(client) {
		return $http.post(globalConfig.baseUrl + '/rest/pdc-disbursements', client);
	};

	this.update = function(client) {
		return $http.post(globalConfig.baseUrl + '/rest/pdc-disbursements/', client);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/pdc-disbursements/' + id);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/pdc-disbursements/delete/',id);
	};
	
	this.listByStatus = function (status){
		return $http.get(globalConfig.baseUrl + '/rest/pdc-disbursements/status/' + status);
	}
	
	this.getByCompanyAndDates = function (companyId, startDate, endDate){
		return $http.get(globalConfig.baseUrl + '/rest/pdc-disbursements/company/' + companyId + '/start/' + startDate + '/end/' +endDate);
	};
}

/**
 * @ngdoc service
 * @name PdcDisbursementsService
 * @module components.auth
 *
 */
angular.module('admin.accounting').service('PdcDisbursementsService', PdcDisbursementsService);
})(window.angular);
(function(angular){
'use strict';

ChequePrintingsService.$inject = ["$http", "globalConfig"];
function ChequePrintingsService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/cheque-printings');
	};

	this.save = function(receivingReceipt) {
		return $http.post(globalConfig.baseUrl + '/rest/cheque-printings', receivingReceipt);
	};

	this.update = function(receivingReceipt) {
		return $http.post(globalConfig.baseUrl + '/rest/cheque-printings/', receivingReceipt);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/cheque-printings/' + id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/cheque-printings/company/' + companyId);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/cheque-printings/delete/',id);
	};
	
	this.approve = function(vpId, userId){
		return $http.post(globalConfig.baseUrl + '/rest/cheque-printings/approve/' + vpId + '/user/' + userId);
	};
	
	this.listByCompanyAndStatus = function(companyId, status) {
		return $http.get(globalConfig.baseUrl + '/rest/cheque-printings/company/' + companyId + '/status/'+ status);
	};
}

/**
 * @ngdoc service
 * @name ChequePrintingsService
 * @module components.auth
 *
 */

angular.module('admin.accounting').service('ChequePrintingsService', ChequePrintingsService);
})(window.angular);
(function(angular){
'use strict';
PdcVouchersService.$inject = ["$http", "globalConfig"];
function PdcVouchersService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/pdc-vouchers');
	};

	this.save = function(client) {
		return $http.post(globalConfig.baseUrl + '/rest/pdc-vouchers', client);
	};

	this.update = function(client) {
		return $http.post(globalConfig.baseUrl + '/rest/pdc-vouchers/', client);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/pdc-vouchers/' + id);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/pdc-vouchers/delete/',id);
	};
	
}

/**
 * @ngdoc service
 * @name PdcVouchersService
 * @module components.auth
 *
 */
angular.module('admin.accounting').service('PdcVouchersService', PdcVouchersService);
})(window.angular);
(function(angular){
'use strict';

PurchaseVouchersService.$inject = ["$http", "globalConfig"];
function PurchaseVouchersService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/purchase-vouchers');
	};

	this.save = function(receivingReceipt) {
		return $http.post(globalConfig.baseUrl + '/rest/purchase-vouchers', receivingReceipt);
	};

	this.update = function(receivingReceipt) {
		return $http.post(globalConfig.baseUrl + '/rest/purchase-vouchers/', receivingReceipt);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/purchase-vouchers/' + id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/purchase-vouchers/company/' + companyId);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/purchase-vouchers/delete/',id);
	};
	
	
	this.isRrNumberValid = function(companyId, rrNumber){
		return $http.get(globalConfig.baseUrl + '/rest/purchase-vouchers/company/' + companyId + '/rr-number/' + rrNumber);
	};
	
	this.approve = function(pvId, userId){
		return $http.post(globalConfig.baseUrl + '/rest/purchase-vouchers/approve/' + pvId + '/user/' + userId);
	};
	
	this.getIdByNumberAndCompany = function (companyId, number){
		return $http.get(globalConfig.baseUrl + '/rest/purchase-vouchers/company/' + companyId + '/number/' + number)
	};
	
	this.getPvWithoutAdjustmentsByCompanyAndVendorAndStatus = function(companyId, vendorId, status){
		return $http.get(globalConfig.baseUrl + '/rest/purchase-vouchers/company/'+companyId+'/vendor/'+vendorId+'/status/'+status+'/purchase-vouchers-no-adjustment');
	};
	
	this.getByCompanyAndDates = function (companyId, startDate, endDate){
		return $http.get(globalConfig.baseUrl + '/rest/purchase-vouchers/company/' + companyId + '/start/' + startDate + '/end/' +endDate);
	};
}

/**
 * @ngdoc service
 * @name PurchaseVouchersService
 * @module components.auth
 *
 */

angular.module('admin.accounting').service('PurchaseVouchersService', PurchaseVouchersService);
})(window.angular);
(function(angular){
'use strict';

var salesJournalVoucher = {
    templateUrl: './sales-journal-vouchers.html',
    controller: 'SalesJournalVoucherController'
  };
  
  angular
    .module('admin.accounting')
    .component('salesJournalVoucher', salesJournalVoucher)
    .config(["$stateProvider", function ($stateProvider) {
      $stateProvider
        .state('sales-journal-vouchers', {
          parent: 'app',
          url: '/admin/accounting/sales-journal-voucher',
          component: 'salesJournalVoucher'
        });
    }]);})(window.angular);
(function(angular){
'use strict';

  SalesJournalVoucherController.$inject = ["$state", "SalesInvoicesService", "UsersService", "OrderSlipsService", "$rootScope", "$location", "_"];
function SalesJournalVoucherController($state, SalesInvoicesService, UsersService, OrderSlipsService, $rootScope, $location, _) {
    var ctrl = this;
    ctrl.salesJournalVouchers = [];
    
    
    ctrl.sortType = 'date';
    ctrl.sortReverse = false;
    ctrl.totalAmount = 0;
    ctrl.totalTaxAmount = 0;
    ctrl.totalAccountsReceivable = 0;
    ctrl.$onInit = function () {
        ctrl.addSalesJournalVoucher = false;
        ctrl.error = null;

        ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
        UsersService.get(ctrl.user.id).then(function(response){
            ctrl.userAssignedDepots = response.data.depots;
        });
        
      
    };
    
    ctrl.search = function () {
        loadSalesJournalVouchers();
    }
    
    function loadSalesJournalVouchers(){
        ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
        ctrl.company = $rootScope.selectedCompany;
        if(ctrl.type === 'DR_SI'){
            SalesInvoicesService.listByDateFromAndDateToAndDepot(ctrl.userAssignedDepot.id, ctrl.dateFrom, ctrl.dateTo).then(function(response){
                console.log("list response: {}", response.data);
                ctrl.salesJournalVouchers = response.data;

                for(let si of ctrl.salesJournalVouchers){
                	si.taxPercentage = si.taxPercentage != null && si.taxPercentage != 0 ? si.taxPercentage : 100;
                    ctrl.totalAmount += si.totalAmount * (1 - (si.taxPercentage / 100));
                    ctrl.totalTaxAmount += si.totalAmount * (si.taxPercentage / 100);
                    ctrl.totalAccountsReceivable += si.totalAmount;
                }
            });
        }else if(ctrl.type === 'OS'){
            OrderSlipsService.listByDateFromAndDateToAndDepot(ctrl.userAssignedDepot.id, ctrl.dateFrom, ctrl.dateTo).then(function(response){
                console.log("list response: {}", response.data);
                ctrl.salesJournalVouchers = response.data;

                for(let si of ctrl.salesJournalVouchers){
                    ctrl.totalAmount += si.totalAmount * (1 - (si.taxPercentage / 100));
                    ctrl.totalTaxAmount += si.totalAmount * (si.taxPercentage / 100);
                    ctrl.totalAccountsReceivable += si.totalAmount;
                }
            });
        }
    }
    
    ctrl.searchPrf = function(event){
        ctrl.prfTable.DataTable.search(event).draw();
    };
    
    ctrl.print = function(){
        $("#sjvTable").print
    };
    
    ctrl.createNewSalesJournalVoucher = function (event) {
          console.log('createNewSalesJournalVoucher');
          $state.go('sales-journal-voucher-new');
          
    };
    
    ctrl.openModal = function(orderSlip){
        ctrl.si = orderSlip;
    };
    
    /*
    ctrl.showAddSalesJournalVoucher = function (show){
        ctrl.addSalesJournalVoucher = show;
    };
    
    
    
    ctrl.saveSalesJournalVoucher = function (event) {
          SalesJournalVouchersService.save(event.purchaserequest).then(function () {
                loadSalesJournalVouchers();
                ctrl.showAddSalesJournalVoucher(false);
                ctrl.purchaserequest = null;
          });
    };
    */
    
   
  }
  
  angular
    .module('admin.accounting')
    .controller('SalesJournalVoucherController', SalesJournalVoucherController);
  })(window.angular);
(function(angular){
'use strict';

var costing = {
  bindings: {
    id: '<'
  },
  templateUrl: './costing.html',
  controller: 'CostingController'
};

angular
  .module('admin.dashboard')
  .component('costing', costing)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('costing-view', {
        parent: 'app',
        url: '/admin/costing-view?id',
        component: 'costing',
        params: {
          id: null
        },
        resolve: {
          id: ["$transition$", function ($transition$) {
            return $transition$.params();
          }]
        }
      });
  }]);})(window.angular);
(function(angular){
'use strict';

CostingController.$inject = ["MoInventoryService", "ProductMovementsService", "CostingService", "$state", "EmployeesService", "_"];
function CostingController(MoInventoryService, ProductMovementsService, CostingService, $state, EmployeesService, _) {
  var ctrl = this;
  ctrl.costing = {moInventory: {}, moCostingEmployees: [], moCostingInventories: [], totalCost: 0};
  
  ctrl.$onInit = function () {
    console.log('CostingSaveController: id: ', ctrl.id.id);
    CostingService.one(ctrl.id.id).then(function(res) {
      ctrl.costing = res.data;
      console.log('costing', ctrl.costing);
    });

    ctrl.findIngredientQuantity = function(itemCode) {
      var ingredientQuantity = 0;
      _.forEach(ctrl.costing.moInventory.recipe.activeIngredientGroup.ingredients, function(ingredient) {
        if (ingredient.item.code === itemCode) {
          ingredientQuantity = ingredient.quantity;
          return;
        } 
      });
  
      return ingredientQuantity;
    }

    // if (!ctrl.costing.moCostingInventories) {
    //   ctrl.costing.moCostingInventories = [];
    // }
    

    // CostingService.list().then(function(res) {
    //   ctrl.costings = res.data;
    // });

    // if (ctrl.id.id) {
    //   CostingService.one(ctrl.id.id).then(function(res) {
    //     ctrl.costing = res.data;
    //   });
    // } else {
    //   ctrl.costing = {};
    // }


    // MoInventoryService.list().then(function(res) {
    //   ctrl.moList = res.data;
    // });

    // ProductMovementsService.list().then(function(res) {
    //   ctrl.pmList = res.data;
    // });

    // EmployeesService.list().then(function(res) {
    //   ctrl.employees = res.data;
    //   console.log('employees', ctrl.employees);
    // });
    
  };

  // ctrl.findIngredientQuantity = function(itemCode) {
  //   var ingredientQuantity = 0;
  //   _.forEach(ctrl.costing.moInventory.recipe.activeIngredientGroup.ingredients, function(ingredient) {
  //     if (ingredient.item.code === itemCode) {
  //       ingredientQuantity = ingredient.quantity;
  //       return;
  //     } 
  //   });

  //   return ingredientQuantity;
  // }

  // ctrl.updateCostingModel = function() {
  //   console.log('updateCostingModel');
  //   if (!ctrl.costing.moCostingInventories) {
  //     ctrl.costing.moCostingInventories = [];
  //   }

  //   _.forEach(ctrl.costing.moInventory.inventoryList, function(inventory) {
  //     ctrl.costing.moCostingInventories.push({
  //       inventory: inventory,
  //       cost: inventory.cost
  //     });
  //   });

  //   ctrl.recomputeTotal();
  // }

  // ctrl.addEmployee = function() {
  //   if (!ctrl.costing.moCostingEmployees) {
  //     ctrl.costing.moCostingEmployees = [];
  //   }

  //   ctrl.costing.moCostingEmployees.push({
  //     employee: ctrl.employeeSelection,
  //     hoursSpent: ctrl.hoursSpent,
  //     cost: ctrl.employeeSelection.hourlyRate * ctrl.hoursSpent
  //   });
  //   ctrl.recomputeTotal();
  // }

  // ctrl.recomputeTotal = function() {
  //   ctrl.costing.totalCost = 0;
  //   _.forEach(ctrl.costing.moCostingEmployees, function(moCostingEmployee) {
  //     console.log('moCostingEmployee', moCostingEmployee);
  //     ctrl.costing.totalCost += moCostingEmployee.cost;
  //   });

  //   _.forEach(ctrl.costing.moInventory.inventoryList, function(inv) {
  //     ctrl.costing.totalCost += inv.cost;
  //   });

  //   console.log('total', ctrl.costing.totalCost);
  // }

  // ctrl.save = function (event) {
  //   ctrl.updateCostingModel();

  //   return CostingService
  //     .save(ctrl.costing)
  //     .then(function () {
  //       $state.go('costings');
  //     });
  // };
}

angular
  .module('admin.dashboard')
  .controller('CostingController', CostingController);})(window.angular);
(function(angular){
'use strict';

VouchersPayablesService.$inject = ["$http", "globalConfig"];
function VouchersPayablesService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/vouchers-payables');
	};

	this.save = function(receivingReceipt) {
		return $http.post(globalConfig.baseUrl + '/rest/vouchers-payables', receivingReceipt);
	};

	this.update = function(receivingReceipt) {
		return $http.post(globalConfig.baseUrl + '/rest/vouchers-payables/', receivingReceipt);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/vouchers-payables/' + id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/vouchers-payables/company/' + companyId);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/vouchers-payables/delete/',id);
	};
	
	
	this.isRrNumberValid = function(companyId, rrNumber){
		return $http.get(globalConfig.baseUrl + '/rest/vouchers-payables/company/' + companyId + '/rr-number/' + rrNumber);
	};
	
	this.approve = function(pvId, userId){
		return $http.post(globalConfig.baseUrl + '/rest/vouchers-payables/approve/' + pvId + '/user/' + userId);
	};
	
	this.getIdByNumberAndCompany = function (companyId, number){
		return $http.get(globalConfig.baseUrl + '/rest/vouchers-payables/company/' + companyId + '/number/' + number)
	};
	
	this.approve = function(vpId, userId){
		return $http.post(globalConfig.baseUrl + '/rest/vouchers-payables/approve/' + vpId + '/user/' + userId);
	};
	
	this.getByCompanyAndVendorAndStatus = function (companyId, vendorId, status){
		return $http.get(globalConfig.baseUrl + '/rest/vouchers-payables/company/' + companyId + '/vendor/' + vendorId +'/status/' + status);
	};
	
	this.getByCompanyAndDates = function (companyId, startDate, endDate){
		return $http.get(globalConfig.baseUrl + '/rest/vouchers-payables/company/' + companyId + '/start/' + startDate + '/end/' +endDate);
	};
}

/**
 * @ngdoc service
 * @name VouchersPayablesService
 * @module components.auth
 *
 */

angular.module('admin.accounting').service('VouchersPayablesService', VouchersPayablesService);
})(window.angular);
(function(angular){
'use strict';
var costingMain = {
  bindings: {
    costings: '<'
  },
  templateUrl: './costing-main.html',
  controller: 'CostingMainController'
};

angular
  .module('admin.dashboard')
  .component('costingMain', costingMain)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('costing-main', {
        parent: 'app',
        url: '/admin/costing?filter',
        component: 'costingMain',
        params: {
          filter: {
            value: 'none'
          }
        },
        resolve: {
          filter: ["$transition$", function ($transition$) {
            return $transition$.params();
          }]
        }
      });
  }]);})(window.angular);
(function(angular){
'use strict';
CostingMainController.$inject = ["CostingService", "$rootScope", "$state"];
function CostingMainController(CostingService, $rootScope, $state) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.company = $rootScope.selectedCompany;
   
  };

}

angular
  .module('admin.dashboard')
  .controller('CostingMainController', CostingMainController);})(window.angular);
(function(angular){
'use strict';
var costings = {
  bindings: {
    costings: '<'
  },
  templateUrl: './costings.html',
  controller: 'CostingsController'
};

angular
  .module('admin.dashboard')
  .component('costings', costings)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('costings', {
        parent: 'app',
        url: '/admin/costings?filter',
        component: 'costings',
        params: {
          filter: {
            value: 'none'
          }
        },
        resolve: {
          filter: ["$transition$", function ($transition$) {
            return $transition$.params();
          }]
        }
      });
  }]);})(window.angular);
(function(angular){
'use strict';
CostingsController.$inject = ["CostingService", "$rootScope", "$state"];
function CostingsController(CostingService, $rootScope, $state) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.company = $rootScope.selectedCompany;
    CostingService.list().then(function(res) {
      ctrl.costings = res.data;
    });
  };
  
  ctrl.view = function(id) {
    $state.go('costing-view', {id: id});
  }

}

angular
  .module('admin.dashboard')
  .controller('CostingsController', CostingsController);})(window.angular);
(function(angular){
'use strict';

var costingSave = {
  bindings: {
    id: '<'
  },
  templateUrl: './costing-save.html',
  controller: 'CostingSaveController'
};

angular
  .module('admin.dashboard')
  .component('costingSave', costingSave)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('costing-save', {
        parent: 'app',
        url: '/admin/costing-save?id',
        component: 'costingSave',
        params: {
          id: null
        },
        resolve: {
          id: ["$transition$", function ($transition$) {
            return $transition$.params();
          }]
        }
      });
  }]);})(window.angular);
(function(angular){
'use strict';

CostingSaveController.$inject = ["MoInventoryService", "JobOrdersService", "ProductMovementsService", "CostingService", "$state", "EmployeesService", "_"];
function CostingSaveController(MoInventoryService, JobOrdersService, ProductMovementsService, CostingService, $state, EmployeesService, _) {
  var ctrl = this;
  ctrl.costing = { moInventory: {}, moCostingEmployees: [], moCostingInventories: [], employeeTotalCost: 0, totalCost: 0 };

  ctrl.listJobOrdersByMoInventory = function () {
    JobOrdersService.listByMoInventory(ctrl.costing.moInventory.id).then(function (res) {
      ctrl.costing.jobOrders = res.data;

      ctrl.recomputeTotal();
    });
  }

  ctrl.$onInit = function () {
    console.log('CostingSaveController: id: ', ctrl.id.id);


    if (!ctrl.costing.moCostingInventories) {
      ctrl.costing.moCostingInventories = [];
    }


    CostingService.list().then(function (res) {
      ctrl.costings = res.data;
    });

    if (ctrl.id.id) {
      CostingService.one(ctrl.id.id).then(function (res) {
        ctrl.costing = res.data;
      });
    } else {
      ctrl.costing = {};
    }


    MoInventoryService.list().then(function (res) {
      ctrl.moList = res.data;
    });

    ProductMovementsService.list().then(function (res) {
      ctrl.pmList = res.data;
    });

    EmployeesService.list().then(function (res) {
      ctrl.employees = res.data;
      console.log('employees', ctrl.employees);
    });

  };

  ctrl.findIngredientQuantity = function (itemCode) {
    var ingredientQuantity = 0;
    _.forEach(ctrl.costing.moInventory.recipe.activeIngredientGroup.ingredients, function (ingredient) {
      if (ingredient.item.code === itemCode) {
        ingredientQuantity = ingredient.quantity;
        return;
      }
    });

    return ingredientQuantity;
  }

  ctrl.updateCostingModel = function () {
    console.log('updateCostingModel');
    if (!ctrl.costing.moCostingInventories) {
      ctrl.costing.moCostingInventories = [];
    }

    _.forEach(ctrl.costing.moInventory.inventoryList, function (inventory) {
      ctrl.costing.moCostingInventories.push({
        inventory: inventory,
        cost: inventory.cost
      });
    });

    ctrl.recomputeTotal();
  }

  ctrl.addEmployee = function () {
    if (!ctrl.costing.moCostingEmployees) {
      ctrl.costing.moCostingEmployees = [];
    }

    ctrl.costing.moCostingEmployees.push({
      employee: ctrl.employeeSelection,
      hoursSpent: ctrl.hoursSpent,
      cost: ctrl.employeeSelection.hourlyRate * ctrl.hoursSpent
    });
    ctrl.recomputeTotal();
  }

  ctrl.recomputeTotal = function () {
    ctrl.costing.totalCost = 0;
    ctrl.costing.employeeTotalCost = 0;
    _.forEach(ctrl.costing.jobOrders, function (jobOrder) {
      ctrl.costing.employeeTotalCost += jobOrder.employee.hourlyRate * jobOrder.numberOfHours;
    });
    ctrl.costing.totalCost += ctrl.costing.employeeTotalCost;
    console.log('listJobOrdersByMoInventory employeeTotalCost: ' + ctrl.costing.employeeTotalCost);
    console.log('listJobOrdersByMoInventory totalCost: ' + ctrl.costing.totalCost);
    console.log('joborders:', ctrl.costing.jobOrders);

    /**
     * WAITING FOR UNIT PRICE TO COMPUTE MO INVENTORY
     */
    // _.forEach(ctrl.costing.moInventory.inventoryList, function(inv) {
    //   ctrl.costing.totalCost += inv.cost;
    // });

    console.log('total', ctrl.costing.totalCost);
  }

  ctrl.save = function (event) {
    ctrl.updateCostingModel();

    return CostingService
      .save(ctrl.costing)
      .then(function () {
        $state.go('costings');
      });
  };
}

angular
  .module('admin.dashboard')
  .controller('CostingSaveController', CostingSaveController);})(window.angular);
(function(angular){
'use strict';

var joCostSave = {
  bindings: {
    id: '<'
  },
  templateUrl: './jo-cost-save.html',
  controller: 'JoCostSaveController'
};

angular
  .module('admin.dashboard')
  .component('joCostSave', joCostSave)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('joCost-save', {
        parent: 'app',
        url: '/admin/joCost-save?id',
        component: 'joCostSave',
        params: {
          id: null
        },
        resolve: {
          id: ["$transition$", function ($transition$) {
            return $transition$.params();
          }]
        }
      });
  }]);})(window.angular);
(function(angular){
'use strict';

JoCostSaveController.$inject = ["JoCostService", "RecipesService", "FinishedGoodsService", "ProcedureAreasService", "$state", "_", "$rootScope"];
function JoCostSaveController(JoCostService, RecipesService, FinishedGoodsService, ProcedureAreasService, $state, _, $rootScope) {
  var ctrl = this;
  ctrl.joCost = { finishedGood: {}, recipe: {}, company: $rootScope.selectedCompany,  jobOrderCostSheetIngredients: [], jobOrderCostSheetProcedureAreas: [], employeeTotalCost: 0, grandTotal: 0 };

  ctrl.$onInit = function () {
    console.log('JoCostSaveController: id: ', ctrl.id.id);

    FinishedGoodsService.list().then(function(response){
      console.log("list response: " + JSON.stringify(response.data));
      ctrl.finishedGoods = response.data;
    });


    if (!ctrl.costing.moCostingInventories) {
      ctrl.costing.moCostingInventories = [];
    }

  };

  ctrl.selectFinishedGood = function() {
    console.log('selectFinishedGood');

    RecipesService.listByFinishedGood(ctrl.joCost.finishedGood.id).then(function(res) {
      if (res.data.length > 0) {
        ctrl.joCost.recipe = res.data[0];
        console.log("recipe received",  ctrl.joCost.recipe);

        _.forEach(ctrl.joCost.recipe.activeIngredientGroup.ingredients, (ingredient) => {
          console.log(ingredient);
          ctrl.joCost.jobOrderCostSheetIngredients.push({
            ingredient: ingredient,
            costPerUnit: 0
          });
        });


        ProcedureAreasService.list().then((res) => {
          var procedureAreas = res.data;
          _.forEach(procedureAreas, (procedureArea) => {
            ctrl.joCost.jobOrderCostSheetProcedureAreas.push({
              procedureArea: procedureArea,
              hours: 0,
              ratePerHour: 0
            });
          });
        });

        if (ctrl.joCost.jobOrderCostSheetIngredients.length == 0) {
          alert('Recipe ingredient not found');
        }
      }
    });
  }

  ctrl.recomputeTotal = function () {
    ctrl.joCost.grandTotal = 0;
    _.forEach(ctrl.joCost.jobOrderCostSheetIngredients, (jocsIngredient) => {
      ctrl.joCost.grandTotal += (jocsIngredient.costPerUnit * jocsIngredient.ingredient.quantity);
    });

    _.forEach(ctrl.joCost.jobOrderCostSheetProcedureAreas, (jocsProcedureArea) => {
      ctrl.joCost.grandTotal += (jocsProcedureArea.hours * jocsProcedureArea.ratePerHour);
    });

    console.log('recomputeTotal()', ctrl.joCost.grandTotal);
  }

  ctrl.save = function (event) {
    ctrl.recomputeTotal();

    return JoCostService
      .save(ctrl.joCost)
      .then(function () {
        $state.go('joCosts');
      });
  };
}

angular
  .module('admin.dashboard')
  .controller('JoCostSaveController', JoCostSaveController);})(window.angular);
(function(angular){
'use strict';
var joCosts = {
  bindings: {
    costings: '<'
  },
  templateUrl: './jo-costs.html',
  controller: 'JoCostsController'
};

angular
  .module('admin.dashboard')
  .component('joCosts', joCosts)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('joCosts', {
        parent: 'app',
        url: '/admin/joCosts?filter',
        component: 'joCosts',
        params: {
          filter: {
            value: 'none'
          }
        },
        resolve: {
          filter: ["$transition$", function ($transition$) {
            return $transition$.params();
          }]
        }
      });
  }]);})(window.angular);
(function(angular){
'use strict';
JoCostsController.$inject = ["JoCostService", "$rootScope", "$state"];
function JoCostsController(JoCostService, $rootScope, $state) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.company = $rootScope.selectedCompany;
    JoCostService.listByCompany(ctrl.company.id).then(function(res) {
      ctrl.joCosts = res.data;
    });
  };
  
  ctrl.view = function(id) {
    $state.go('joCost-view', {id: id});
  }

}

angular
  .module('admin.dashboard')
  .controller('JoCostsController', JoCostsController);})(window.angular);
(function(angular){
'use strict';
PurchaseOrdersService.$inject = ["$http", "globalConfig"];
function PurchaseOrdersService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/purchase-orders');
	};

	this.save = function(purchaseOrder) {
		return $http.post(globalConfig.baseUrl + '/rest/purchase-orders', purchaseOrder);
	};

	this.update = function(purchaseOrder) {
		return $http.post(globalConfig.baseUrl + '/rest/purchase-orders/', purchaseOrder);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/purchase-orders/' + id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/purchase-orders/company/' + companyId);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/purchase-orders/delete/',id);
	};
	
	this.getPurchaseOrderQuantity = function(companyId, itemId){
		return $http.get(globalConfig.baseUrl + '/rest/purchase-orders/company/' + companyId + '/stock/' + itemId);
	};
	
	this.listNotCompletedByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/purchase-orders/company/' + companyId + '/not-completed');
	};
	
	this.getByNumber = function(number){
		return $http.get(globalConfig.baseUrl + '/rest/purchase-orders/number/' + number);
	};
}

/**
 * @ngdoc service
 * @name PurchaseOrdersService
 * @module components.auth
 *
 */
angular.module('admin.purchasing').service('PurchaseOrdersService', PurchaseOrdersService);
})(window.angular);
(function(angular){
'use strict';

var accountCode = {
  templateUrl: './account-codes.html',
  controller: 'AccountCodeController'
};

angular
  .module('admin.maintenance')
  .component('accountCode', accountCode)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('account-codes', {
        parent: 'app',
        url: '/admin/maintenance/account-code',
        component: 'accountCode'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

AccountCodeController.$inject = ["$state", "AccountCodesService", "_"];
function AccountCodeController($state, AccountCodesService, _) {
  var ctrl = this;
  ctrl.accountCodes = [];
  ctrl.searchCode = '';
  ctrl.searchName = '';
  ctrl.sortType = 'id';
  ctrl.sortReverse = false;
  ctrl.accountCode = {};
  
  ctrl.$onInit = function () {
	  ctrl.addAccountCode = false;
	  ctrl.error = null;
	  loadAccountCodes();
  };
  
  function loadAccountCodes(){
	  AccountCodesService.list().then(function(response){
		  console.log("list response: " + JSON.stringify(response.data));
		  ctrl.accountCodes = response.data;
	  });
  }
  
  ctrl.showAddAccountCode = function (show){
	  ctrl.addAccountCode = show;
  };
  
  ctrl.editAccountCode = function (id) {
	  AccountCodesService.get(id).then(function(response){
		  ctrl.accountCode = response.data;
	  });
	  ctrl.addAccountCode = true;
  };
  
  ctrl.saveAccountCode = function () {
	    AccountCodesService.save(ctrl.accountCode).then(function () {
	    	  loadAccountCodes();
	    	  ctrl.showAddAccountCode(false);
	    	  ctrl.accountCode = null;
	    });
  };
  
  ctrl.deleteAccountCode = function (id){
	  AccountCodesService.delete(id).then(function(response){
		  loadAccountCodes();
	  });
  };
}

angular
  .module('admin.maintenance')
  .controller('AccountCodeController', AccountCodeController);
})(window.angular);
(function(angular){
'use strict';
AccountCodesService.$inject = ["$http", "globalConfig"];
function AccountCodesService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/account-codes');
	};

	this.save = function(itemType) {
		return $http.post(globalConfig.baseUrl + '/rest/account-codes', itemType);
	};

	this.update = function(itemType) {
		return $http.post(globalConfig.baseUrl + '/rest/account-codes/', itemType);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/account-codes/' + id);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/account-codes/delete/',id);
	};
}

/**
 * @ngdoc service
 * @name AccountCodesService
 * @module components.auth
 *
 */
angular.module('admin.maintenance').service('AccountCodesService', AccountCodesService);
})(window.angular);
(function(angular){
'use strict';
AccountTitlesService.$inject = ["$http", "globalConfig"];
function AccountTitlesService($http, globalConfig) {

  this.list = function () {
    return $http.get(globalConfig.baseUrl + '/rest/account-titles');
  };

  this.save = function (acknowledgementReceipt) {
    return $http.post(globalConfig.baseUrl + '/rest/account-titles', acknowledgementReceipt);
  };

  this.update = function (acknowledgementReceipt) {
    return $http.post(globalConfig.baseUrl + '/rest/account-titles/', acknowledgementReceipt);
  };

  this.get = function (id) {
    return $http.get(globalConfig.baseUrl + '/rest/account-titles/' + id);
  };
  
  this.delete = function(id) {
	return $http.post(globalConfig.baseUrl + '/rest/account-titles/delete', id);
  };
  
  this.listByLevelAndParentId = function(level, parentId){
	return $http.get(globalConfig.baseUrl + '/rest/account-titles/level/' + level + '/parent/' + parentId);
  }

  this.findByTitle = function(title){
    return $http.get(globalConfig.baseUrl + '/rest/account-titles/title/' + title);
  }

}

/**
 * @ngdoc service
 * @name AccountTitlesService
 * @module components.auth
 *
 */
angular
  .module('admin.maintenance')
  .service('AccountTitlesService', AccountTitlesService);
})(window.angular);
(function(angular){
'use strict';
ClassificationsService.$inject = ["$http", "globalConfig"];
function ClassificationsService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/classifications');
	};

	this.save = function(classification) {
		return $http.post(globalConfig.baseUrl + '/rest/classifications', classification);
	};

	this.update = function(classification) {
		return $http.post(globalConfig.baseUrl + '/rest/classifications/', classification);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/classifications/' + id);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/classifications/delete/',id);
	};
	
	this.listTypes = function(){
		return $http.get(globalConfig.baseUrl + '/rest/classifications/types');
	};
}

/**
 * @ngdoc service
 * @name ClassificationsService
 * @module components.auth
 *
 */
angular.module('admin.maintenance').service('ClassificationsService', ClassificationsService);
})(window.angular);
(function(angular){
'use strict';
BankAccountsService.$inject = ["$http", "globalConfig"];
function BankAccountsService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/bank-accounts');
	};

	this.paginate = function(itemsPerPage, offset) {
		return $http.get(globalConfig.baseUrl + '/rest/bank-accounts/paginate/' + itemsPerPage + '/' + offset);
	};

	this.save = function(client) {
		return $http.post(globalConfig.baseUrl + '/rest/bank-accounts', client);
	};

	this.update = function(client) {
		return $http.post(globalConfig.baseUrl + '/rest/bank-accounts/', client);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/bank-accounts/' + id);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/bank-accounts/delete/',id);
	};
}

/**
 * @ngdoc service
 * @name BankAccountsService
 * @module components.auth
 *
 */
angular.module('admin.maintenance').service('BankAccountsService', BankAccountsService);
})(window.angular);
(function(angular){
'use strict';
ClientsService.$inject = ["$http", "globalConfig"];
function ClientsService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/clients');
	};

	this.save = function(client) {
		return $http.post(globalConfig.baseUrl + '/rest/clients', client);
	};

	this.update = function(client) {
		return $http.post(globalConfig.baseUrl + '/rest/clients/', client);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/clients/' + id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/clients/company/' + companyId);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/clients/delete/',id);
	};
	
	this.getClients = function(companyId, salesRepId){
		return $http.get(globalConfig.baseUrl + '/rest/clients/report/company/' + companyId + '/sales-rep/' + salesRepId);
	};
	this.paginateByCompany = function(companyId, itemsPerPage, offset) {
		return $http.get(globalConfig.baseUrl + '/rest/clients/company/'+companyId+'/paginate/' + itemsPerPage + '/' + offset);
	};
}

/**
 * @ngdoc service
 * @name ClientsService
 * @module components.auth
 *
 */
angular.module('admin.maintenance').service('ClientsService', ClientsService);
})(window.angular);
(function(angular){
'use strict';

var clusterCode = {
  templateUrl: './cluster-codes.html',
  controller: 'ClusterCodeController'
};

angular
  .module('admin.maintenance')
  .component('clusterCode', clusterCode)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('cluster-codes', {
        parent: 'app',
        url: '/admin/maintenance/cluster-code',
        component: 'clusterCode'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

ClusterCodeController.$inject = ["$state", "ClusterCodesService", "_"];
function ClusterCodeController($state, ClusterCodesService, _) {
  var ctrl = this;
  ctrl.clusterCodes = [];
  ctrl.searchCode = '';
  ctrl.searchName = '';
  ctrl.sortType = 'id';
  ctrl.sortReverse = false;
  ctrl.clusterCode = {};
  
  ctrl.$onInit = function () {
	  ctrl.addClusterCode = false;
	  ctrl.error = null;
	  loadClusterCodes();
  };
  
  function loadClusterCodes(){
	  ClusterCodesService.list().then(function(response){
		  console.log("list response: " + JSON.stringify(response.data));
		  ctrl.clusterCodes = response.data;
	  });
  }
  
  ctrl.showAddClusterCode = function (show){
	  ctrl.addClusterCode = show;
  };
  
  ctrl.editClusterCode = function (id) {
	  ClusterCodesService.get(id).then(function(response){
		  ctrl.clusterCode = response.data;
	  });
	  ctrl.addClusterCode = true;
  };
  
  ctrl.saveClusterCode = function () {
	    ClusterCodesService.save(ctrl.clusterCode).then(function () {
	    	  loadClusterCodes();
	    	  ctrl.showAddClusterCode(false);
	    	  ctrl.clusterCode = null;
	    });
  };
  
  ctrl.deleteClusterCode = function (id){
	  ClusterCodesService.delete(id).then(function(response){
		  loadClusterCodes();
	  });
  };
}

angular
  .module('admin.maintenance')
  .controller('ClusterCodeController', ClusterCodeController);
})(window.angular);
(function(angular){
'use strict';
ClusterCodesService.$inject = ["$http", "globalConfig"];
function ClusterCodesService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/cluster-codes');
	};

	this.save = function(itemType) {
		return $http.post(globalConfig.baseUrl + '/rest/cluster-codes', itemType);
	};

	this.update = function(itemType) {
		return $http.post(globalConfig.baseUrl + '/rest/cluster-codes/', itemType);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/cluster-codes/' + id);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/cluster-codes/delete/',id);
	};
}

/**
 * @ngdoc service
 * @name ClusterCodesService
 * @module components.auth
 *
 */
angular.module('admin.maintenance').service('ClusterCodesService', ClusterCodesService);
})(window.angular);
(function(angular){
'use strict';
AreasService.$inject = ["$http", "globalConfig"];
function AreasService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/areas');
	};

	this.save = function(department) {
		return $http.post(globalConfig.baseUrl + '/rest/areas', department);
	};

	this.update = function(department) {
		return $http.post(globalConfig.baseUrl + '/rest/areas/', department);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/areas/' + id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/areas/company/' + companyId);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/areas/delete/',id);
	};
}

/**
 * @ngdoc service
 * @name AreasService
 * @module components.auth
 *
 */
angular.module('admin.maintenance').service('AreasService', AreasService);
})(window.angular);
(function(angular){
'use strict';
DepartmentsService.$inject = ["$http", "globalConfig"];
function DepartmentsService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/departments');
	};

	this.save = function(department) {
		return $http.post(globalConfig.baseUrl + '/rest/departments', department);
	};

	this.update = function(department) {
		return $http.post(globalConfig.baseUrl + '/rest/departments/', department);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/departments/' + id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/departments/company/' + companyId);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/departments/delete/', id);
	};
	
	this.getByName = function(departmentName){
		return $http.get(globalConfig.baseUrl + '/rest/departments/name/' + departmentName);
	};
}

/**
 * @ngdoc service
 * @name DepartmentsService
 * @module components.auth
 *
 */
angular.module('admin.maintenance').service('DepartmentsService', DepartmentsService);
})(window.angular);
(function(angular){
'use strict';
FinishedGoodsService.$inject = ["$http", "globalConfig"];
function FinishedGoodsService($http, globalConfig) {
  this.list = function () {
    return $http.get(globalConfig.baseUrl + '/rest/finished-goods');
  };

  this.paginate = function (itemsPerPage, offset) {
    return $http.get(
      globalConfig.baseUrl +
        '/rest/finished-goods/paginate/' +
        itemsPerPage +
        '/' +
        offset
    );
  };

  this.save = function (client) {
    return $http.post(globalConfig.baseUrl + '/rest/finished-goods', client);
  };

  this.update = function (client) {
    return $http.post(
      globalConfig.baseUrl + '/rest/finished-goods/update',
      client
    );
  };

  this.get = function (id) {
    return $http.get(globalConfig.baseUrl + '/rest/finished-goods/' + id);
  };

  this.delete = function (id) {
    return $http.post(
      globalConfig.baseUrl + '/rest/finished-goods/delete/',
      id
    );
  };
}

/**
 * @ngdoc service
 * @name FinishedGoodsService
 * @module components.auth
 *
 */
angular
  .module('admin.maintenance')
  .service('FinishedGoodsService', FinishedGoodsService);
})(window.angular);
(function(angular){
'use strict';
DepotsService.$inject = ["$http", "globalConfig"];
function DepotsService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/depots');
	};

	this.save = function(itemType) {
		return $http.post(globalConfig.baseUrl + '/rest/depots', itemType);
	};

	this.update = function(itemType) {
		return $http.post(globalConfig.baseUrl + '/rest/depots/', itemType);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/depots/' + id);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/depots/delete/',id);
	};
	
	this.listDepotsOfUser = function(userId){
		return $http.get(globalConfig.baseUrl + '/rest/depots/user/' + userId);
	};
}

/**
 * @ngdoc service
 * @name DepotsService
 * @module components.auth
 *
 */
angular.module('admin.maintenance').service('DepotsService', DepotsService);
})(window.angular);
(function(angular){
'use strict';
CategoryService.$inject = ["$http", "globalConfig"];
function CategoryService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/category');
	};

	this.save = function(category) {
		return $http.post(globalConfig.baseUrl + '/rest/category', category);
	};

	this.update = function(category) {
		return $http.post(globalConfig.baseUrl + '/rest/category/', category);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/category/' + id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/category/company/' + companyId);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/category/delete/',id);
	};
}

/**
 * @ngdoc service
 * @name CategoryService
 * @module components.auth
 *
 */
angular.module('admin.maintenance').service('CategoryService', CategoryService);
})(window.angular);
(function(angular){
'use strict';
GroupService.$inject = ["$http", "globalConfig"];
function GroupService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/group');
	};

	this.save = function(group) {
		return $http.post(globalConfig.baseUrl + '/rest/group', group);
	};

	this.update = function(group) {
		return $http.post(globalConfig.baseUrl + '/rest/group/', group);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/group/' + id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/group/company/' + companyId);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/group/delete/',id);
	};
}

/**
 * @ngdoc service
 * @name GroupService
 * @module components.auth
 *
 */
angular.module('admin.maintenance').service('GroupService', GroupService);
})(window.angular);
(function(angular){
'use strict';

var groupAndCategory = {
  bindings: {

  },
  templateUrl: './groups-and-categories.html',
  controller: 'GroupAndCategoryController'
};

angular
  .module('admin.maintenance')
  .component('groupAndCategory', groupAndCategory)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('group-and-category', {
        parent: 'app',
        url: '/admin/maintenance/group-and-category',
        component: 'groupAndCategory'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

GroupAndCategoryController.$inject = ["$state", "_", "GroupService"];
function GroupAndCategoryController($state, _, GroupService) {
  var ctrl = this;
  ctrl.groups = [];
  ctrl.selectedGroup = null;
  ctrl.group = {};
  ctrl.groupButtonText = "";
  ctrl.category = {};
  ctrl.hideGroup = true;
  ctrl.hideCategory = true;

  ctrl.$onInit = function () {
        loadGroups().then(function(response) {
            console.log(JSON.stringify(response.data));
            ctrl.groups = response.data;
            if (ctrl.groups.length > 0 && ctrl.selectedGroup == null) {
                ctrl.selectedGroup = ctrl.groups[0];
            }
        });
  };

  var loadGroups = function() {
    return GroupService.list();
  }


  ctrl.toggleGroupForm = function() {
    ctrl.groupButtonText = "Add";
    ctrl.hideGroup = !ctrl.hideGroup;
  }

  ctrl.onSelectGroup = function(group) {
    ctrl.selectedGroup = group;
  }

  ctrl.submitGroup = function() {
    if (ctrl.group.name) {
        GroupService.save(ctrl.group).then(function() {
           ctrl.loadGroups().then(function(response) {
                ctrl.groups = response.data;
                ctrl.group = {};
           });
        });
    }
  }

  ctrl.toggleCategoryForm = function() {
    ctrl.categoryButtonText = "Add Category";
    ctrl.hideCategory = !ctrl.hideCategory;
  }

  ctrl.submitCategory = function() {
      if (ctrl.category.name) {
          ctrl.selectedGroup.categories.push(ctrl.category);
          GroupService.save(ctrl.selectedGroup).then(function() {
            ctrl.category = {};
          });
      }
    }

    ctrl.removeCategory = function(index) {
        ctrl.selectedGroup.categories.splice(index, 1);
      GroupService.save(ctrl.selectedGroup).then(function() {
        ctrl.category = {};
      });
    }
}

angular
  .module('admin.maintenance')
  .controller('GroupAndCategoryController', GroupAndCategoryController);
})(window.angular);
(function(angular){
'use strict';

var institutionalCode = {
  templateUrl: './institutional-codes.html',
  controller: 'InstitutionalCodeController'
};

angular
  .module('admin.maintenance')
  .component('institutionalCode', institutionalCode)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('institutional-codes', {
        parent: 'app',
        url: '/admin/maintenance/institutional-code',
        component: 'institutionalCode'
      });
  }]);})(window.angular);
(function(angular){
'use strict';
InstitutionalCodeController.$inject = ["$state", "InstitutionalCodesService", "_"];
function InstitutionalCodeController($state, InstitutionalCodesService, _) {
  var ctrl = this;
  ctrl.institutionalCodes = [];
  ctrl.searchCode = '';
  ctrl.searchName = '';
  ctrl.sortType = 'id';
  ctrl.sortReverse = false;
  ctrl.institutionalCode = {};

  ctrl.$onInit = function () {
    ctrl.addInstitutionalCode = false;
    ctrl.error = null;
    loadInstitutionalCodes();
  };

  function loadInstitutionalCodes() {
    InstitutionalCodesService.list().then(function (response) {
      console.log('list response: ' + JSON.stringify(response.data));
      ctrl.institutionalCodes = response.data;
    });
  }

  ctrl.showAddInstitutionalCode = function (show) {
    ctrl.addInstitutionalCode = show;
  };

  ctrl.editInstitutionalCode = function (id) {
    InstitutionalCodesService.get(id).then(function (response) {
      ctrl.institutionalCode = response.data;
    });
    ctrl.addInstitutionalCode = true;
  };

  ctrl.saveInstitutionalCode = function () {
    InstitutionalCodesService.save(ctrl.institutionalCode).then(function () {
      loadInstitutionalCodes();
      ctrl.showAddInstitutionalCode(false);
      ctrl.institutionalCode = null;
    });
  };

  ctrl.deleteInstitutionalCode = function (id) {
    InstitutionalCodesService.delete(id).then(function (response) {
      loadInstitutionalCodes();
    });
  };
}

angular
  .module('admin.maintenance')
  .controller('InstitutionalCodeController', InstitutionalCodeController);
})(window.angular);
(function(angular){
'use strict';
InstitutionalCodesService.$inject = ["$http", "globalConfig"];
function InstitutionalCodesService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/institutional-codes');
	};

	this.save = function(itemType) {
		return $http.post(globalConfig.baseUrl + '/rest/institutional-codes', itemType);
	};

	this.update = function(itemType) {
		return $http.post(globalConfig.baseUrl + '/rest/institutional-codes/', itemType);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/institutional-codes/' + id);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/institutional-codes/delete/',id);
	};
}

/**
 * @ngdoc service
 * @name InstitutionalCodesService
 * @module components.auth
 *
 */
angular.module('admin.maintenance').service('InstitutionalCodesService', InstitutionalCodesService);
})(window.angular);
(function(angular){
'use strict';
ItemTypesService.$inject = ["$http", "globalConfig"];
function ItemTypesService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/item-types');
	};

	this.save = function(itemType) {
		return $http.post(globalConfig.baseUrl + '/rest/item-types', itemType);
	};

	this.update = function(itemType) {
		return $http.post(globalConfig.baseUrl + '/rest/item-types/', itemType);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/item-types/' + id);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/item-types/delete/',id);
	};
}

/**
 * @ngdoc service
 * @name ItemTypesService
 * @module components.auth
 *
 */
angular.module('admin.maintenance').service('ItemTypesService', ItemTypesService);
})(window.angular);
(function(angular){
'use strict';
ItemsService.$inject = ["$http", "globalConfig"];
function ItemsService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/items');
	};

	this.save = function(client) {
		return $http.post(globalConfig.baseUrl + '/rest/items', client);
	};

	this.update = function(client) {
		return $http.post(globalConfig.baseUrl + '/rest/items/', client);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/items/' + id);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/items/delete/',id);
	};
	
	this.listRmPm = function(){
		return $http.get(globalConfig.baseUrl + '/rest/items/rm-pm');
	};
	
	this.listEngineering = function(){
		return $http.get(globalConfig.baseUrl + '/rest/items/type/ENG');
	};
	
	this.listEngineering = function(){
		return $http.get(globalConfig.baseUrl + '/rest/items/type/ENG');
	};
}

/**
 * @ngdoc service
 * @name ItemsService
 * @module components.auth
 *
 */
angular.module('admin.maintenance').service('ItemsService', ItemsService);
})(window.angular);
(function(angular){
'use strict';
MemoTypesService.$inject = ["$http", "globalConfig"];
function MemoTypesService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/memo-types');
	};

	this.paginate = function(itemsPerPage, offset) {
		return $http.get(globalConfig.baseUrl + '/rest/memo-types/paginate/' + itemsPerPage + '/' + offset);
	};

	this.save = function(client) {
		return $http.post(globalConfig.baseUrl + '/rest/memo-types', client);
	};

	this.update = function(client) {
		return $http.post(globalConfig.baseUrl + '/rest/memo-types/', client);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/memo-types/' + id);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/memo-types/delete/',id);
	};
	
	this.listByType = function(type){
		return $http.get(globalConfig.baseUrl + '/rest/memo-types/type/' +type);
	};
}

/**
 * @ngdoc service
 * @name MemoTypesService
 * @module components.auth
 *
 */
angular.module('admin.maintenance').service('MemoTypesService', MemoTypesService);
})(window.angular);
(function(angular){
'use strict';
ProcedureAreasService.$inject = ["$http", "globalConfig"];
function ProcedureAreasService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/procedure-areas');
	};

	this.save = function(client) {
		return $http.post(globalConfig.baseUrl + '/rest/procedure-areas', client);
	};

	this.update = function(client) {
		return $http.post(globalConfig.baseUrl + '/rest/procedure-areas/', client);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/procedure-areas/' + id);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/procedure-areas/delete/',id);
	};
}

/**
 * @ngdoc service
 * @name ProcedureAreasService
 * @module components.auth
 *
 */
angular.module('admin.maintenance').service('ProcedureAreasService', ProcedureAreasService);
})(window.angular);
(function(angular){
'use strict';
ProceduresService.$inject = ["$http", "globalConfig"];
function ProceduresService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/procedures');
	};

	this.save = function(client) {
		return $http.post(globalConfig.baseUrl + '/rest/procedures', client);
	};

	this.update = function(client) {
		return $http.post(globalConfig.baseUrl + '/rest/procedures/', client);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/procedures/' + id);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/procedures/delete/',id);
	};
	
	this.listByArea = function(id){
		return $http.get(globalConfig.baseUrl + '/rest/procedures/area/' + id);
	};
}

/**
 * @ngdoc service
 * @name ProceduresService
 * @module components.auth
 *
 */
angular.module('admin.maintenance').service('ProceduresService', ProceduresService);
})(window.angular);
(function(angular){
'use strict';

var productCategory = {
  templateUrl: './product-categories.html',
  controller: 'ProductCategoriesController'
};

angular
  .module('admin.maintenance')
  .component('productCategory', productCategory)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('product-categories', {
        parent: 'app',
        url: '/admin/maintenance/product-category',
        component: 'productCategory'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

ProductCategoriesController.$inject = ["$state", "ProductCategoriesService", "ProductDivisionCodesService", "_"];
function ProductCategoriesController($state, ProductCategoriesService, ProductDivisionCodesService, _) {
  var ctrl = this;
  ctrl.productCategories = [];
  ctrl.searchCode = '';
  ctrl.searchName = '';
  ctrl.sortType = 'id';
  ctrl.sortReverse = false;
  ctrl.productCategory = {};
  ctrl.$onInit = function () {
	  ctrl.addProductCategories = false;
	  ctrl.error = null;
	  
	  ProductDivisionCodesService.list().then(function(response){
		  ctrl.divisions = response.data;
	  });
	  
	  loadProductCategories();
  };
  
  function loadProductCategories(){
	  ProductCategoriesService.list().then(function(response){
		  console.log("list response: " + JSON.stringify(response.data));
		  ctrl.productCategories = response.data;
	  });
  }
  
  ctrl.showAddProductCategory = function (show){
	  ctrl.addProductCategory = show;
  };
  
  ctrl.editProductCategories = function (id) {
	  ProductCategoriesService.get(id).then(function(response){
		  ctrl.productCategories = response.data;
	  });
	  ctrl.addProductCategories = true;
  };
  
  ctrl.saveProductCategory = function () {
	    ProductCategoriesService.save(ctrl.productCategory).then(function () {
	    	  loadProductCategories();
	    	  ctrl.showAddProductCategory(false);
	    	  ctrl.productCategories = null;
	    });
  };
  
  ctrl.deleteProductCategories = function (id){
	  ProductCategoriesService.delete(id).then(function(response){
		  loadProductCategories();
	  });
  };
}

angular
  .module('admin.maintenance')
  .controller('ProductCategoriesController', ProductCategoriesController);
})(window.angular);
(function(angular){
'use strict';
ProductCategoriesService.$inject = ["$http", "globalConfig"];
function ProductCategoriesService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/product-categories');
	};

	this.save = function(itemType) {
		return $http.post(globalConfig.baseUrl + '/rest/product-categories', itemType);
	};

	this.update = function(itemType) {
		return $http.post(globalConfig.baseUrl + '/rest/product-categories/', itemType);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/product-categories/' + id);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/product-categories/delete/',id);
	};
}

/**
 * @ngdoc service
 * @name ProductCategoriesService
 * @module components.auth
 *
 */
angular.module('admin.maintenance').service('ProductCategoriesService', ProductCategoriesService);
})(window.angular);
(function(angular){
'use strict';
ProductsService.$inject = ["$http", "globalConfig"];
function ProductsService($http, globalConfig) {

  this.list = function () {
    return $http.get(globalConfig.baseUrl + '/rest/products');
  };

  this.save = function (product) {
    return $http.post(globalConfig.baseUrl + '/rest/products', product);
  };

  this.update = function (product) {
    return $http.post(globalConfig.baseUrl + '/rest/products/', product);
  };

  this.get = function (id) {
    return $http.get(globalConfig.baseUrl + '/rest/products/' + id);
  };

  this.listByCompany = function(id) {
	return $http.get(globalConfig.baseUrl + '/rest/products/company/' + id);  
  };

}

/**
 * @ngdoc service
 * @name ProductsService
 * @module components.auth
 *
 */
angular
  .module('admin.maintenance')
  .service('ProductsService', ProductsService);
})(window.angular);
(function(angular){
'use strict';

var productDivisionCode = {
  templateUrl: './product-division-codes.html',
  controller: 'ProductDivisionCodeController'
};

angular
  .module('admin.maintenance')
  .component('productDivisionCode', productDivisionCode)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('product-division-codes', {
        parent: 'app',
        url: '/admin/maintenance/product-division-code',
        component: 'productDivisionCode'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

ProductDivisionCodeController.$inject = ["$state", "ProductDivisionCodesService", "_"];
function ProductDivisionCodeController($state, ProductDivisionCodesService, _) {
  var ctrl = this;
  ctrl.productDivisionCodes = [];
  ctrl.searchCode = '';
  ctrl.searchName = '';
  ctrl.sortType = 'id';
  ctrl.sortReverse = false;
  ctrl.productDivisionCode = {};
  
  ctrl.$onInit = function () {
	  ctrl.addProductDivisionCode = false;
	  ctrl.error = null;
	  loadProductDivisionCodes();
  };
  
  function loadProductDivisionCodes(){
	  ProductDivisionCodesService.list().then(function(response){
		  console.log("list response: " + JSON.stringify(response.data));
		  ctrl.productDivisionCodes = response.data;
	  });
  }
  
  ctrl.showAddProductDivisionCode = function (show){
	  ctrl.addProductDivisionCode = show;
  };
  
  ctrl.editProductDivisionCode = function (id) {
	  ProductDivisionCodesService.get(id).then(function(response){
		  ctrl.productDivisionCode = response.data;
	  });
	  ctrl.addProductDivisionCode = true;
  };
  
  ctrl.saveProductDivisionCode = function () {
	    ProductDivisionCodesService.save(ctrl.productDivisionCode).then(function () {
	    	  loadProductDivisionCodes();
	    	  ctrl.showAddProductDivisionCode(false);
	    	  ctrl.productDivisionCode = null;
	    });
  };
  
  ctrl.deleteProductDivisionCode = function (id){
	  ProductDivisionCodesService.delete(id).then(function(response){
		  loadProductDivisionCodes();
	  });
  };
}

angular
  .module('admin.maintenance')
  .controller('ProductDivisionCodeController', ProductDivisionCodeController);
})(window.angular);
(function(angular){
'use strict';
ProductDivisionCodesService.$inject = ["$http", "globalConfig"];
function ProductDivisionCodesService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/product-division-codes');
	};

	this.save = function(itemType) {
		return $http.post(globalConfig.baseUrl + '/rest/product-division-codes', itemType);
	};

	this.update = function(itemType) {
		return $http.post(globalConfig.baseUrl + '/rest/product-division-codes/', itemType);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/product-division-codes/' + id);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/product-division-codes/delete/',id);
	};
}

/**
 * @ngdoc service
 * @name ProductDivisionCodesService
 * @module components.auth
 *
 */
angular.module('admin.maintenance').service('ProductDivisionCodesService', ProductDivisionCodesService);
})(window.angular);
(function(angular){
'use strict';

var regionCode = {
  templateUrl: './region-codes.html',
  controller: 'RegionCodeController'
};

angular
  .module('admin.maintenance')
  .component('regionCode', regionCode)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('region-codes', {
        parent: 'app',
        url: '/admin/maintenance/region-code',
        component: 'regionCode'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

RegionCodeController.$inject = ["$state", "RegionCodesService", "_"];
function RegionCodeController($state, RegionCodesService, _) {
  var ctrl = this;
  ctrl.regionCodes = [];
  ctrl.searchCode = '';
  ctrl.searchName = '';
  ctrl.sortType = 'id';
  ctrl.sortReverse = false;
  ctrl.regionCode = {};
  
  ctrl.$onInit = function () {
	  ctrl.addRegionCode = false;
	  ctrl.error = null;
	  loadRegionCodes();
  };
  
  function loadRegionCodes(){
	  RegionCodesService.list().then(function(response){
		  console.log("list response: " + JSON.stringify(response.data));
		  ctrl.regionCodes = response.data;
	  });
  }
  
  ctrl.showAddRegionCode = function (show){
	  ctrl.addRegionCode = show;
  };
  
  ctrl.editRegionCode = function (id) {
	  RegionCodesService.get(id).then(function(response){
		  ctrl.regionCode = response.data;
	  });
	  ctrl.addRegionCode = true;
  };
  
  ctrl.saveRegionCode = function () {
	    RegionCodesService.save(ctrl.regionCode).then(function () {
	    	  loadRegionCodes();
	    	  ctrl.showAddRegionCode(false);
	    	  ctrl.regionCode = null;
	    });
  };
  
  ctrl.deleteRegionCode = function (id){
	  RegionCodesService.delete(id).then(function(response){
		  loadRegionCodes();
	  });
  };
}

angular
  .module('admin.maintenance')
  .controller('RegionCodeController', RegionCodeController);
})(window.angular);
(function(angular){
'use strict';
RegionCodesService.$inject = ["$http", "globalConfig"];
function RegionCodesService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/region-codes');
	};

	this.save = function(itemType) {
		return $http.post(globalConfig.baseUrl + '/rest/region-codes', itemType);
	};

	this.update = function(itemType) {
		return $http.post(globalConfig.baseUrl + '/rest/region-codes/', itemType);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/region-codes/' + id);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/region-codes/delete/',id);
	};
}

/**
 * @ngdoc service
 * @name RegionCodesService
 * @module components.auth
 *
 */
angular.module('admin.maintenance').service('RegionCodesService', RegionCodesService);
})(window.angular);
(function(angular){
'use strict';

var provinceCode = {
  templateUrl: './province-codes.html',
  controller: 'ProvinceCodeController'
};

angular
  .module('admin.maintenance')
  .component('provinceCode', provinceCode)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('province-codes', {
        parent: 'app',
        url: '/admin/maintenance/province-code',
        component: 'provinceCode'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

ProvinceCodeController.$inject = ["$state", "ProvinceCodesService", "_"];
function ProvinceCodeController($state, ProvinceCodesService, _) {
  var ctrl = this;
  ctrl.provinceCodes = [];
  ctrl.searchCode = '';
  ctrl.searchName = '';
  ctrl.sortType = 'id';
  ctrl.sortReverse = false;
  ctrl.provinceCode = {};
  
  ctrl.$onInit = function () {
	  ctrl.addProvinceCode = false;
	  ctrl.error = null;
	  loadProvinceCodes();
  };
  
  function loadProvinceCodes(){
	  ProvinceCodesService.list().then(function(response){
		  console.log("list response: " + JSON.stringify(response.data));
		  ctrl.provinceCodes = response.data;
	  });
  }
  
  ctrl.showAddProvinceCode = function (show){
	  ctrl.addProvinceCode = show;
  };
  
  ctrl.editProvinceCode = function (id) {
	  ProvinceCodesService.get(id).then(function(response){
		  ctrl.provinceCode = response.data;
	  });
	  ctrl.addProvinceCode = true;
  };
  
  ctrl.saveProvinceCode = function () {
	    ProvinceCodesService.save(ctrl.provinceCode).then(function () {
	    	  loadProvinceCodes();
	    	  ctrl.showAddProvinceCode(false);
	    	  ctrl.provinceCode = null;
	    });
  };
  
  ctrl.deleteProvinceCode = function (id){
	  ProvinceCodesService.delete(id).then(function(response){
		  loadProvinceCodes();
	  });
  };
}

angular
  .module('admin.maintenance')
  .controller('ProvinceCodeController', ProvinceCodeController);
})(window.angular);
(function(angular){
'use strict';
ProvinceCodesService.$inject = ["$http", "globalConfig"];
function ProvinceCodesService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/province-codes');
	};

	this.save = function(itemType) {
		return $http.post(globalConfig.baseUrl + '/rest/province-codes', itemType);
	};

	this.update = function(itemType) {
		return $http.post(globalConfig.baseUrl + '/rest/province-codes/', itemType);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/province-codes/' + id);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/province-codes/delete/',id);
	};
}

/**
 * @ngdoc service
 * @name ProvinceCodesService
 * @module components.auth
 *
 */
angular.module('admin.maintenance').service('ProvinceCodesService', ProvinceCodesService);
})(window.angular);
(function(angular){
'use strict';

var salesRep = {
  templateUrl: './sales-reps.html',
  controller: 'SalesRepController'
};

angular
  .module('admin.maintenance')
  .component('salesRep', salesRep)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('sales-reps', {
        parent: 'app',
        url: '/admin/maintenance/sales-rep',
        component: 'salesRep'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

SalesRepController.$inject = ["$state", "SalesRepsService", "RegionCodesService", "CategoryService", "_"];
function SalesRepController($state, SalesRepsService, RegionCodesService, CategoryService,_) {
  var ctrl = this;
  ctrl.salesReps = [];
  ctrl.searchCode = '';
  ctrl.searchName = '';
  ctrl.sortType = 'id';
  ctrl.sortReverse = false;
  ctrl.salesRep = {};
  ctrl.regionCodes = [];
  ctrl.productCategories= [];
  ctrl.$onInit = function () {
	  ctrl.addSalesRep = false;
	  ctrl.error = null;
	  loadSalesReps();
	  RegionCodesService.list().then(function(response){
		  ctrl.regionCodes = response.data;
	  });
	  
	  CategoryService.list().then(function(response){
		  ctrl.productCategories = response.data;
	  });
  };
  
  function loadSalesReps(){
	  SalesRepsService.list().then(function(response){
		  console.log("list response: " + JSON.stringify(response.data));
		  ctrl.salesReps = response.data;
	  });
  }
  
  ctrl.showAddSalesRep = function (show){
	  ctrl.addSalesRep = show;
  };
  
  ctrl.editSalesRep = function (id) {
	  SalesRepsService.get(id).then(function(response){
		  ctrl.salesRep = response.data;
	  });
	  ctrl.addSalesRep = true;
  };
  
  ctrl.saveSalesRep = function () {
	    SalesRepsService.save(ctrl.salesRep).then(function () {
	    	  loadSalesReps();
	    	  ctrl.showAddSalesRep(false);
	    	  ctrl.salesRep = null;
	    });
  };
  
  ctrl.deleteSalesRep = function (id){
	  SalesRepsService.delete(id).then(function(response){
		  loadSalesReps();
	  });
  };
}

angular
  .module('admin.maintenance')
  .controller('SalesRepController', SalesRepController);
})(window.angular);
(function(angular){
'use strict';
SalesRepsService.$inject = ["$http", "globalConfig"];
function SalesRepsService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/sales-reps');
	};

	this.save = function(itemType) {
		return $http.post(globalConfig.baseUrl + '/rest/sales-reps', itemType);
	};

	this.update = function(itemType) {
		return $http.post(globalConfig.baseUrl + '/rest/sales-reps/', itemType);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/sales-reps/' + id);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/sales-reps/delete/',id);
	};
}

/**
 * @ngdoc service
 * @name SalesRepsService
 * @module components.auth
 *
 */
angular.module('admin.maintenance').service('SalesRepsService', SalesRepsService);
})(window.angular);
(function(angular){
'use strict';
VendorsService.$inject = ["$http", "globalConfig"];
function VendorsService($http, globalConfig) {
  this.list = function () {
    return $http.get(globalConfig.baseUrl + '/rest/vendors');
  };

  this.save = function (vendor) {
    return $http.post(globalConfig.baseUrl + '/rest/vendors', vendor);
  };

  this.update = function (vendor) {
    return $http.post(globalConfig.baseUrl + '/rest/vendors/', vendor);
  };

  this.get = function (id) {
    return $http.get(globalConfig.baseUrl + '/rest/vendors/' + id);
  };

  this.listByCompany = function (companyId) {
    return $http.get(
      globalConfig.baseUrl + '/rest/vendors/company/' + companyId
    );
  };

  this.paginate = function (itemsPerPage, offset, companyId) {
    return $http.get(
      globalConfig.baseUrl +
        '/rest/vendors/paginate/' +
        itemsPerPage +
        '/' +
        offset +
        '/' +
        companyId
    );
  };

  this.delete = function (id) {
    return $http.post(globalConfig.baseUrl + '/rest/vendors/delete/', id);
  };
}

/**
 * @ngdoc service
 * @name VendorsService
 * @module components.auth
 *
 */
angular.module('admin.maintenance').service('VendorsService', VendorsService);
})(window.angular);
(function(angular){
'use strict';
UnitsService.$inject = ["$http", "globalConfig"];
function UnitsService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/units');
	};

	this.save = function(unit) {
		return $http.post(globalConfig.baseUrl + '/rest/units', unit);
	};

	this.update = function(unit) {
		return $http.post(globalConfig.baseUrl + '/rest/units/', unit);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/units/' + id);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/units/delete/',id);
	};
}

/**
 * @ngdoc service
 * @name UnitsService
 * @module components.auth
 *
 */
angular.module('admin.maintenance').service('UnitsService', UnitsService);
})(window.angular);
(function(angular){
'use strict';

var zipCode = {
  templateUrl: './zip-codes.html',
  controller: 'ZipCodeController'
};

angular
  .module('admin.maintenance')
  .component('zipCode', zipCode)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('zip-codes', {
        parent: 'app',
        url: '/admin/maintenance/zip-code',
        component: 'zipCode'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

ZipCodeController.$inject = ["$state", "ZipCodesService", "RegionCodesService", "ProvinceCodesService", "_"];
function ZipCodeController($state, ZipCodesService, RegionCodesService, ProvinceCodesService,_) {
  var ctrl = this;
  ctrl.zipCodes = [];
  ctrl.searchCode = '';
  ctrl.searchName = '';
  ctrl.sortType = 'id';
  ctrl.sortReverse = false;
  ctrl.zipCode = {};
  ctrl.regionCodes = [];
  ctrl.provinceCodes= [];
  ctrl.$onInit = function () {
	  ctrl.addZipCode = false;
	  ctrl.error = null;
	  loadZipCodes();
	  RegionCodesService.list().then(function(response){
		  ctrl.regionCodes = response.data;
	  });
	  
	  ProvinceCodesService.list().then(function(response){
		  ctrl.provinceCodes = response.data;
	  });
  };
  
  function loadZipCodes(){
	  ZipCodesService.list().then(function(response){
		  console.log("list response: " + JSON.stringify(response.data));
		  ctrl.zipCodes = response.data;
	  });
  }
  
  ctrl.showAddZipCode = function (show){
	  ctrl.addZipCode = show;
  };
  
  ctrl.editZipCode = function (id) {
	  ZipCodesService.get(id).then(function(response){
		  ctrl.zipCode = response.data;
	  });
	  ctrl.addZipCode = true;
  };
  
  ctrl.saveZipCode = function () {
	    ZipCodesService.save(ctrl.zipCode).then(function () {
	    	  loadZipCodes();
	    	  ctrl.showAddZipCode(false);
	    	  ctrl.zipCode = null;
	    });
  };
  
  ctrl.deleteZipCode = function (id){
	  ZipCodesService.delete(id).then(function(response){
		  loadZipCodes();
	  });
  };
}

angular
  .module('admin.maintenance')
  .controller('ZipCodeController', ZipCodeController);
})(window.angular);
(function(angular){
'use strict';
ZipCodesService.$inject = ["$http", "globalConfig"];
function ZipCodesService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/zip-codes');
	};

	this.save = function(itemType) {
		return $http.post(globalConfig.baseUrl + '/rest/zip-codes', itemType);
	};

	this.update = function(itemType) {
		return $http.post(globalConfig.baseUrl + '/rest/zip-codes/', itemType);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/zip-codes/' + id);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/zip-codes/delete/',id);
	};
}

/**
 * @ngdoc service
 * @name ZipCodesService
 * @module components.auth
 *
 */
angular.module('admin.maintenance').service('ZipCodesService', ZipCodesService);
})(window.angular);
(function(angular){
'use strict';
AcknowledgementReceiptsService.$inject = ["$http", "globalConfig"];
function AcknowledgementReceiptsService($http, globalConfig) {
  this.list = function() {
    return $http.get(globalConfig.baseUrl + '/rest/acknowledgement-receipts');
  };

  this.save = function(acknowledgementReceipt) {
    return $http.post(
      globalConfig.baseUrl + '/rest/acknowledgement-receipts',
      acknowledgementReceipt
    );
  };

  this.update = function(acknowledgementReceipt) {
    return $http.post(
      globalConfig.baseUrl + '/rest/acknowledgement-receipts/',
      acknowledgementReceipt
    );
  };

  this.get = function(id) {
    return $http.get(
      globalConfig.baseUrl + '/rest/acknowledgement-receipts/' + id
    );
  };

  this.listByCompany = function(id) {
    return $http.get(
      globalConfig.baseUrl + '/rest/acknowledgement-receipts/company/' + id
    );
  };

  this.listByDepot = function(id) {
    return $http.get(
      globalConfig.baseUrl + '/rest/acknowledgement-receipts/depot/' + id
    );
  };

  this.listByDepotWithSIAmount = function(id) {
    return $http.get(
      globalConfig.baseUrl +
        '/rest/acknowledgement-receipts/depot/' +
        id +
        '/with-si'
    );
  };
}

/**
 * @ngdoc service
 * @name AcknowledgementReceiptsService
 * @module components.auth
 *
 */
angular
  .module('admin.sales')
  .service('AcknowledgementReceiptsService', AcknowledgementReceiptsService);
})(window.angular);
(function(angular){
'use strict';
OrderReceiptsService.$inject = ["$http", "globalConfig"];
function OrderReceiptsService($http, globalConfig) {

  this.list = function () {
    return $http.get(globalConfig.baseUrl + '/rest/order-receipts');
  };

  this.save = function (orderReceipt) {
    return $http.post(globalConfig.baseUrl + '/rest/order-receipts', orderReceipt);
  };

  this.update = function (orderReceipt) {
    return $http.post(globalConfig.baseUrl + '/rest/order-receipts/', orderReceipt);
  };

  this.get = function (id) {
    return $http.get(globalConfig.baseUrl + '/rest/order-receipts/' + id);
  };
  
  this.listByDepot = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/order-receipts/depot/' + id);  
	  };

}

/**
* @ngdoc service
* @name OrderReceiptsService
* @module components.auth
*
*/
angular
.module('admin.sales')
.service('OrderReceiptsService', OrderReceiptsService);
})(window.angular);
(function(angular){
'use strict';
OrderSlipsService.$inject = ["$http", "globalConfig"];
function OrderSlipsService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/order-slips');
	};

	this.save = function(client) {
		return $http.post(globalConfig.baseUrl + '/rest/order-slips', client);
	};

	this.update = function(client) {
		return $http.post(globalConfig.baseUrl + '/rest/order-slips/', client);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/order-slips/' + id);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/order-slips/delete/',id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/order-slips/company/'+ companyId);
	};
	
	this.listByDepot = function(depotId) {
		return $http.get(globalConfig.baseUrl + '/rest/order-slips/depot/'+ depotId);
	};

	this.listByDateFromAndDateToAndDepot = function(depotId, dateFrom, dateTo){
		return $http.get(globalConfig.baseUrl + '/rest/order-slips/depot/' + depotId + '/dateFrom/' + dateFrom +'/dateTo/' + dateTo);
	};
	
}

/**
 * @ngdoc service
 * @name OrderSlipsService
 * @module components.auth
 *
 */
angular.module('admin.sales').service('OrderSlipsService', OrderSlipsService);
})(window.angular);
(function(angular){
'use strict';
SalesInvoicesService.$inject = ["$http", "globalConfig"];
function SalesInvoicesService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/sales-invoices');
	};

	this.save = function(client) {
		return $http.post(globalConfig.baseUrl + '/rest/sales-invoices', client);
	};

	this.update = function(client) {
		return $http.post(globalConfig.baseUrl + '/rest/sales-invoices/', client);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/sales-invoices/' + id);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/sales-invoices/delete/',id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/sales-invoices/company/'+ companyId);
	};
	
	this.listByDepot = function(depotId) {
		return $http.get(globalConfig.baseUrl + '/rest/sales-invoices/depot/'+ depotId);
	};

	this.listByDateFromAndDateToAndDepot = function(depotId, dateFrom, dateTo){
		return $http.get(globalConfig.baseUrl + '/rest/sales-invoices/depot/' + depotId + '/dateFrom/' + dateFrom +'/dateTo/' + dateTo);
	};
}

/**
 * @ngdoc service
 * @name SalesInvoicesService
 * @module components.auth
 *
 */
angular.module('admin.sales').service('SalesInvoicesService', SalesInvoicesService);
})(window.angular);
(function(angular){
'use strict';
ReturnSlipsService.$inject = ["$http", "globalConfig"];
function ReturnSlipsService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/return-slips');
	};

	this.save = function(purchaseRequest) {
		return $http.post(globalConfig.baseUrl + '/rest/return-slips', purchaseRequest);
	};

	this.update = function(purchaseRequest) {
		return $http.post(globalConfig.baseUrl + '/rest/return-slips/', purchaseRequest);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/return-slips/' + id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/return-slips/company/' + companyId);
	};
	
	this.listByDepot = function(depotId) {
		return $http.get(globalConfig.baseUrl + '/rest/return-slips/depot/' + depotId);
	};
	
	this.getByDepotAndDates = function(depotId, startDate, endDate){
		return $http.get(globalConfig.baseUrl + '/rest/return-slips/depot/' + depotId + '/start/' + startDate + '/end/' +endDate);
	};
	
}

/**
 * @ngdoc service
 * @name ReturnSlipsService
 * @module components.auth
 * 
 */
angular.module('admin.sales').service('ReturnSlipsService', ReturnSlipsService);})(window.angular);
(function(angular){
'use strict';
SalesOrdersService.$inject = ["$http", "globalConfig"];
function SalesOrdersService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/sales-orders');
	};

	this.save = function(purchaseRequest) {
		return $http.post(globalConfig.baseUrl + '/rest/sales-orders', purchaseRequest);
	};

	this.update = function(purchaseRequest) {
		return $http.post(globalConfig.baseUrl + '/rest/sales-orders/', purchaseRequest);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/sales-orders/' + id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/sales-orders/company/' + companyId);
	};
	
	this.listByDepot = function(depotId) {
		return $http.get(globalConfig.baseUrl + '/rest/sales-orders/depot/' + depotId);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/sales-orders/delete/',id);
	};
	
	this.approve = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/sales-orders/approve/' + id);
	};
	
	this.reject = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/sales-orders/reject/' + id);
	};
	
	this.getLatestCancelledReqs = function(soId){
		return $http.get(globalConfig.baseUrl + '/rest/sales-orders/cancelled-reqs/' + soId);
	};
	
	this.cancelRequestedProduct = function(requestedItem){
		return $http.post(globalConfig.baseUrl + '/api/sales-order-products/cancel', requestedItem);
	};
	
	this.listNotCompletedByCompanyAndDepot = function(companyId, depotId,  type) {
		return $http.get(globalConfig.baseUrl + '/rest/sales-orders/company/' + companyId + '/depot/'+depotId+'/type/' + type);
	};
	
	this.listSoProductsBySoNumber = function(soId) {
		return $http.get(globalConfig.baseUrl + '/api/sales-order-products/so/' + soId);
	};
	
	this.getReservedQuantityOfFg = function (fgId, depotId) {
		return $http.get(globalConfig.baseUrl + '/api/sales-order-products/fg/' + fgId + '/depot/'+depotId+'/reserved-quantity');
	};
	
	this.getTotalAmountAndQuantity = function (depotId, dateFrom, dateTo, salesRepId){
		return $http.get(globalConfig.baseUrl + '/rest/sales-orders/general-sales-report/depot/' + depotId + '/start/' + dateFrom + '/end/' + dateTo + '/sales-rep/' + salesRepId);
	};
}

/**
 * @ngdoc service
 * @name SalesOrdersService
 * @module components.auth
 * 
 */
angular.module('admin.sales').service('SalesOrdersService', SalesOrdersService);})(window.angular);
(function(angular){
'use strict';
MoInventoryService.$inject = ["$http", "globalConfig"];
function MoInventoryService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/moInventory');
	};

	this.save = function(data) {
		return $http.post(globalConfig.baseUrl + '/rest/moInventory', data);
	};

	this.saveWithLotNumber = function(data) {
		return $http.post(globalConfig.baseUrl + '/rest/moInventory/lotnumber', data);
	};

	// this.update = function(approvedItem) {
	// 	return $http.post(globalConfig.baseUrl + '/rest/approved-items/', approvedItem);
	// };

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/moInventory/' + id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/moInventory/company/' + companyId);
	};

	this.listByCompanyAndNonlotNumber = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/moInventory/nonlotnumber/company/' + companyId);
	};

	this.listByCompanyAndRemainingBatchSize = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/moInventory/remainingBatchSize/company/' + companyId);
	};

    
    this.listByFinishedGood = function(finishedGoodId) {
		return $http.get(globalConfig.baseUrl + '/rest/moInventory/finishedGood/' + finishedGoodId);
	};
	
	// this.delete = function(id){
	// 	return $http.post(globalConfig.baseUrl + '/rest/approved-items/delete/',id);
	// };
}

/**
 * @ngdoc service
 * @name MoInventoryService
 * @module components.auth
 *
 */
angular.module('admin.rnd').service('MoInventoryService', MoInventoryService);
})(window.angular);
(function(angular){
'use strict';

var mo = {
    templateUrl: './mo.html',
    controller: 'MoController'
  };
  
  angular
    .module('admin.rnd')
    .component('mo', mo)
    .config(["$stateProvider", function ($stateProvider) {
      $stateProvider
        .state('mo', {
          parent: 'app',
          url: '/admin/rnd/mo',
          component: 'mo'
        });
    }]);})(window.angular);
(function(angular){
'use strict';

  MoController.$inject = ["MoInventoryService", "$state", "_"];
function MoController(MoInventoryService, $state, _) {
    var ctrl = this;

    MoInventoryService.list().then(function(res) {
      ctrl.moList = res.data;
    });

    ctrl.manufactureOrder = function(mo) {
      $state.go('mo-manufacture', {id: mo.id});
    }

    ctrl.view = function(moId) {
      $state.go('mo-manufacture', {id: moId});
    }
   
  }
  
  angular
    .module('admin.rnd')
    .controller('MoController', MoController);
  })(window.angular);
(function(angular){
'use strict';
PpInventoryService.$inject = ["$http", "globalConfig"];
function PpInventoryService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/ppInventory');
	};

	this.save = function(data) {
		return $http.post(globalConfig.baseUrl + '/rest/ppInventory', data);
	};

	// this.update = function(approvedItem) {
	// 	return $http.post(globalConfig.baseUrl + '/rest/approved-items/', approvedItem);
	// };

	// this.get = function(id) {
	// 	return $http.get(globalConfig.baseUrl + '/rest/approved-items/' + id);
	// };
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/ppInventory/company/' + companyId);
    };
    
	
	// this.delete = function(id){
	// 	return $http.post(globalConfig.baseUrl + '/rest/approved-items/delete/',id);
	// };
}

/**
 * @ngdoc service
 * @name MoInventoryService
 * @module components.auth
 *
 */
angular.module('admin.rnd').service('PpInventoryService', PpInventoryService);
})(window.angular);
(function(angular){
'use strict';

var pp = {
    templateUrl: './pp.html',
    controller: 'PpController'
  };
  
  angular
    .module('admin.rnd')
    .component('pp', pp)
    .config(["$stateProvider", function ($stateProvider) {
      $stateProvider
        .state('pp', {
          parent: 'app',
          url: '/admin/rnd/pp',
          component: 'pp'
        });
    }]);})(window.angular);
(function(angular){
'use strict';

  PpController.$inject = ["$state", "_"];
function PpController($state, _) {
    var ctrl = this;

  
   
  }
  
  angular
    .module('admin.rnd')
    .controller('PpController', PpController);
  })(window.angular);
(function(angular){
'use strict';
var userEdit = {
  templateUrl: './user-edit.html',
  controller: 'UserEditController'
};

angular
  .module('admin.users')
  .component('userEdit', userEdit)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('user-edit', {
        parent: 'app',
        url: '/admin/users/edit/:userId',
        component: 'userEdit'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

UserEditController.$inject = ["$state", "$stateParams", "UsersService", "DepartmentsService", "CompanyService", "$rootScope", "PermissionsService"];
function UserEditController($state, $stateParams, UsersService, DepartmentsService, CompanyService, $rootScope, PermissionsService) {
  var ctrl = this;
  ctrl.user = {};
  ctrl.$onInit = function () {
    ctrl.error = null;
    
    console.log('userId: ' + JSON.stringify($stateParams.userId));
    
    CompanyService.list().then(function(response) {
        ctrl.companies = response.data;
    }).then(function() {
      ctrl.company = $rootScope.selectedCompany;

      DepartmentsService.listByCompany(ctrl.company.id).then(function(response){
        ctrl.departments = response.data;

        PermissionsService.list().then(function(response) {
          ctrl.permissions = response.data;
          UsersService.get($stateParams.userId).then(function (response) {
            ctrl.user = response.data;
            buildFormPermission();
          });
        });
        
        var buildFormPermission = function() {
          for (var code in ctrl.user.permissions) {
            console.log("UserEditController buildFormPermission: " + code);
            ctrl.user.permissions[code].actions = UsersService.convertActionsString(ctrl.user.permissions[code].actions);
          }   
        }
      });
    });
  };
  ctrl.editUser = function (event) {
    console.log('UserEditController editUser');
    var user =  JSON.parse(JSON.stringify(event.user));
    for (var code in user.permissions) {
      user.permissions[code].actions = UsersService.actionArrayToString(user.permissions[code].actions);
    }

    UsersService.update(user).then(function () {
      $state.go('users');
    });
  };
}

angular
  .module('admin.users')
  .controller('UserEditController', UserEditController);
})(window.angular);
(function(angular){
'use strict';
var userNew = {
  templateUrl: './user-new.html',
  controller: 'UserNewController'
};

angular
  .module('admin.users')
  .component('userNew', userNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('user-new', {
        parent: 'app',
        url: '/admin/users/new',
        component: 'userNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

UserNewController.$inject = ["$state", "UsersService", "CompanyService", "DepartmentsService", "PermissionsService"];
function UserNewController($state, UsersService, CompanyService, DepartmentsService, PermissionsService) {
  var ctrl = this;

  ctrl.$onInit = function () {
    ctrl.error = null;
    CompanyService.list().then(function(response) {
        console.log("CompanyService list: " + JSON.stringify(response))
        ctrl.companies = response.data;
    }).then(function() {
			PermissionsService.list().then(function(response) {
				ctrl.permissions = response.data;
				

				DepartmentsService.listByCompany(ctrl.companies[0].id).then(function(response){
					ctrl.departments = response.data;
					console.log("UserNewController ctrl.departments[0]:" + JSON.stringify(ctrl.departments[0]));
					console.log("UserNewController ctrl.companies[0]: " + JSON.stringify(ctrl.companies[0]));
					 
						ctrl.user = {
							firstName: 'John',
							lastName: 'Operio',
							middleInitial: 'N',
							email: 'john@operio.com',
							department: ctrl.departments[0],
							password: 'test',
							company: ctrl.companies[0],
							employeeType: 'main',
							permissions: buildFormPermission(),
							depots: []
						};

						console.log(ctrl.user);
				});
			});
			
			var buildFormPermission = function() {
				var actions = UsersService.convertActionsString('crud');
				console.log('buildFormPermission: ', actions);
				var permissions = {};
				ctrl.permissions.forEach(function(permission) {
					permission.permissionSubs.forEach(function(ps) {
						permissions[ps.code] = {code: ps.code, actions: actions}
					});
				});

				return permissions;
			}

			
	    	
       
    });


  };

  ctrl.createUser = function (event) {
    console.log('createUser');
		var user = JSON.parse(JSON.stringify(event.user));
    for (var code in user.permissions) {
      console.log("UserNewController createUser: " + code);
      user.permissions[code].actions = UsersService.actionArrayToString(user.permissions[code].actions);
    }
    UsersService.save(user).then(function () {
      $state.go('users');
    });

  };
}

angular
  .module('admin.users')
  .controller('UserNewController', UserNewController);
})(window.angular);
(function(angular){
'use strict';
var userForm = {
  bindings: {
    user: '=',
    companies: '<',
    departments: '=',
    button: '@',
    message: '@',
    onSubmit: '&',
    permissions: '='
  },
  templateUrl: './user-form.html',
  controller: 'UserFormController'
};

angular
  .module('admin.users')
  .component('userForm', userForm);
})(window.angular);
(function(angular){
'use strict';

UserFormController.$inject = ["$state", "UsersService", "DepartmentsService", "PermissionsService", "DepotsService"];
function UserFormController($state, UsersService, DepartmentsService, PermissionsService, DepotsService) {
  var ctrl = this;

  ctrl.formPermission = {};

  ctrl.baseAction = {
    'c': 'Create',
    'r': 'Read',
    'u': 'Update',
    'd': 'Delete'
  };


  DepotsService.list().then(function(res) {
    ctrl.depots = res.data;
  })

  ctrl.addDepotToUser = function() {
    ctrl.user.depots.push(ctrl.depot);
  }

  ctrl.removeDepotFromUser = function(d) {
    var length = ctrl.user.depots.length
    for (var i = 0; i < length; i++) {
      if (ctrl.user.depots[i].id == d.id) {
        ctrl.user.depots.splice(i, 1);
      }
    }
  }

  ctrl.valueAction = ['c', 'r', 'u', 'd'];


  ctrl.$onChanges = function (changes) {
    if (changes.user) {
      ctrl.user = angular.copy(ctrl.user);
    }

    if (changes.formPermission) {
      ctrl.formPermission = angular.copy(ctrl.formPermission);
    }
  };

  ctrl.hasCrud = function (action) {
    return action && UsersService.actionArrayToString(action) === 'crud';
  };

  ctrl.checkAction = function (event, permissionCode) {
    if (event.target.checked) {
      ctrl.user.permissions[permissionCode].actions = angular.copy(ctrl.valueAction);
    } else {
      ctrl.user.permissions[permissionCode].actions = [];
    }
  };

  ctrl.loadDepartments = function (id) {
    DepartmentsService.listByCompany(id).then(function (response) {
      ctrl.departments = response.data;
    });
  };

  ctrl.submitForm = function () {
    console.log('submitForm: ' + JSON.stringify(ctrl.user));

    if (!ctrl.user.department) {
      alert('Please choose a department for the user'); //TODO modal dialog;
      return;
    }
    ctrl.onSubmit({
      $event: {
        user: ctrl.user
      }
    });
    //$state.go("user-new");
  };
}

angular
  .module('admin.users')
  .controller('UserFormController', UserFormController);
})(window.angular);
(function(angular){
'use strict';

var users = {
  bindings: {
    users: '<',
    departments:'<'
  },
  templateUrl: './users.html',
  controller: 'UsersController'
};

angular
  .module('admin.users')
  .component('users', users)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('users', {
        parent: 'app',
        url: '/admin/users',
        component: 'users'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

UsersController.$inject = ["$state", "UsersService", "CompanyService", "$rootScope", "DepartmentsService", "_"];
function UsersController($state, UsersService, CompanyService,$rootScope, DepartmentsService, _) {
  var ctrl = this;

  ctrl.totalAccounts = 1;
  ctrl.users = [];
  ctrl.adminUsers = [];
  ctrl.mmdUsers = [];
  ctrl.rndUsers = [];
  ctrl.costingUsers = [];
  ctrl.purchasingUsers = [];
  ctrl.drUsers = [];

  ctrl.$onInit = function () {
	loadDepartments();
    loadUsers();
  };

  ctrl.createNewUser = function (event) {
    console.log('createNewUser');
    $state.go('user-new');
  };

  ctrl.goToEdit = function (id) {
    $state.go('user-edit', { 'userId': id });
  }


  function loadDepartments(){
	  ctrl.company = $rootScope.selectedCompany;
	  DepartmentsService.listByCompany(ctrl.company.id).then(function(response){
		ctrl.departments = response.data;
	  });
  }
  function loadUsers() {
	console.log("company selected user view " + JSON.stringify($rootScope.selectedCompany));
	ctrl.company = $rootScope.selectedCompany;
	UsersService.listByCompany(ctrl.company.id).then(function (response) {
      console.log("list response: " + JSON.stringify(response.data));
      ctrl.users = response.data;
      ctrl.totalAccounts = ctrl.users.length;
      /*
      ctrl.adminUsers = _.filter(ctrl.users, { 'accountType': 'Administrator' });
      ctrl.mmdUsers = _.filter(ctrl.users, { 'accountType': 'MMD' });
      ctrl.rndUsers = _.filter(ctrl.users, { 'accountType': 'R & D' });
      ctrl.costingUsers = _.filter(ctrl.users, { 'accountType': 'COSTING' });
      ctrl.purchasingUsers = _.filter(ctrl.users, { 'accountType': 'PURCHASING' });
      ctrl.drUsers = _.filter(ctrl.users, { 'accountType': 'DR' });*/
    });
  }
}

angular
  .module('admin.users')
  .controller('UsersController', UsersController);
})(window.angular);
(function(angular){
'use strict';

var accountSummaryReport = {
  templateUrl: './account-summary-report.html',
  controller: 'AccountSummaryReportController'
};

angular
  .module('admin.dashboard')
  .component('accountSummaryReport', accountSummaryReport)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('account-summary-reports', {
        parent: 'app',
        url: '/admin/dashboard/account-summary-report',
        component: 'accountSummaryReport'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

AccountSummaryReportController.$inject = ["$state", "AccountSummaryReportsService", "ReportsService", "$rootScope"];
function AccountSummaryReportController($state, AccountSummaryReportsService, ReportsService, $rootScope) {
  var ctrl = this;
  
  
  ctrl.$onInit = function () {
	  ctrl.company = $rootScope.selectedCompany;

  };
  
  ctrl.exportJV = function() {
	  var reportTitle = {title: 'Report : JV Account Summary Report'};
	  var dates = {date: 'Date Range:' + ctrl.startDate.getFullYear() + "-" + (ctrl.startDate.getMonth() + 1) + "-" + ctrl.startDate.getDate() + " to "+
		  ctrl.endDate.getFullYear() + "-" + (ctrl.endDate.getMonth() + 1) + "-" + ctrl.endDate.getDate()}
	  var headers = {
			    title: 'Account Title'.replace(/,/g, ''), // remove commas to avoid errors
			    credit: "Credit",
			    debit: "Debit"
	  };
	  AccountSummaryReportsService.getJVAccountSummaryReport(ctrl.company.id, ctrl.startDate, ctrl.endDate).then(function(response){
		  ReportsService.exportCSVFile(headers, reportTitle, dates, response.data, "print.csv");
	  });
  }
  
  ctrl.exportPJV = function() {
	  var reportTitle = {title: 'Report : PJV Account Summary Report'};
	  var dates = {date: 'Date Range:' + ctrl.startDate.getFullYear() + "-" + (ctrl.startDate.getMonth() + 1) + "-" + ctrl.startDate.getDate() + " to "+
		  ctrl.endDate.getFullYear() + "-" + (ctrl.endDate.getMonth() + 1) + "-" + ctrl.endDate.getDate()}
	  
	  var headers = {
			    title: 'Account Title'.replace(/,/g, ''), // remove commas to avoid errors
			    credit: "Credit",
			    debit: "Debit"
	  };
	  AccountSummaryReportsService.getPJVAccountSummaryReport(ctrl.company.id, ctrl.startDate, ctrl.endDate).then(function(response){
		  console.log(response.data);
		  ReportsService.exportCSVFile(headers, reportTitle, dates, response.data, "print");
	  });
  }
  
  ctrl.printCDV = function() {
	  var headers = {
			    title: 'Account Title'.replace(/,/g, ''), // remove commas to avoid errors
			    credit: "Credit",
			    debit: "Debit"
	  };
	  AccountSummaryReportsService.getCDVAccountSummaryReport(ctrl.company.id, ctrl.startDate, ctrl.endDate).then(function(response){
		  //exportCSVFile(headers, response.data, "print.csv");
	  });
  }
  
  ctrl.exportVP = function () {
	  var reportTitle = {title: 'Report : VP Account Summary Report'};
	  var dates = {date: 'Date Range:' + ctrl.startDate.getFullYear() + "-" + (ctrl.startDate.getMonth() + 1) + "-" + ctrl.startDate.getDate() + " to "+
		  ctrl.endDate.getFullYear() + "-" + (ctrl.endDate.getMonth() + 1) + "-" + ctrl.endDate.getDate()}
	  
	  var headers = {
			    title: 'Account Title'.replace(/,/g, ''), // remove commas to avoid errors
			    credit: "Credit",
			    debit: "Debit"
	  };
	  AccountSummaryReportsService.getVPAccountSummaryReport(ctrl.company.id, ctrl.startDate, ctrl.endDate).then(function(response){
		  console.log(response.data);
		  ReportsService.exportCSVFile(headers, reportTitle, dates, response.data, "print");
	  });
  }
  
}

angular
  .module('admin.dashboard')
  .controller('AccountSummaryReportController', AccountSummaryReportController);
})(window.angular);
(function(angular){
'use strict';
AccountSummaryReportsService.$inject = ["$http", "globalConfig"];
function AccountSummaryReportsService($http, globalConfig) {
	
	this.getJVAccountSummaryReport = function (companyId, startDate, endDate){
		return $http.get(globalConfig.baseUrl + '/rest/account-summary-reports/jv/company/' + companyId + '/start/' + startDate + '/end/' + endDate);
	}
	
	this.getPJVAccountSummaryReport = function (companyId, startDate, endDate){
		return $http.get(globalConfig.baseUrl + '/rest/account-summary-reports/pjv/company/' + companyId + '/start/' + startDate + '/end/' + endDate);
	}
	
	this.getCDVAccountSummaryReport = function (companyId, startDate, endDate) {
		return $http.get(globalConfig.baseUrl + '/rest/account-summary-reports/cdv/company/' + companyId + '/start/' + startDate + '/end/' + endDate);
	}
	
	this.getVPAccountSummaryReport = function (companyId, startDate, endDate) {
		return $http.get(globalConfig.baseUrl + '/rest/account-summary-reports/vp/company/' + companyId + '/start/' + startDate + '/end/' + endDate);
	}
}

/**
 * @ngdoc service
 * @name AccountSummaryReportsService
 * @module components.auth
 *
 */
angular.module('admin.dashboard').service('AccountSummaryReportsService', AccountSummaryReportsService);
})(window.angular);
(function(angular){
'use strict';

ApprovedReceiptsService.$inject = ["$http", "globalConfig"];
function ApprovedReceiptsService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/approved-receipts');
	};

	this.save = function(receivingReceipt) {
		return $http.post(globalConfig.baseUrl + '/rest/approved-receipts', receivingReceipt);
	};

	this.update = function(receivingReceipt) {
		return $http.post(globalConfig.baseUrl + '/rest/approved-receipts/', receivingReceipt);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/approved-receipts/' + id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/approved-receipts/company/' + companyId);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/approved-receipts/delete/',id);
	};
	
	this.getByArNumber = function(arNumber) {
		return $http.get(globalConfig.baseUrl + '/rest/approved-receipts/number/' + arNumber);
	};
	
}

/**
 * @ngdoc service
 * @name ApprovedReceiptsService
 * @module components.auth
 *
 */
angular.module('admin.dashboard').service('ApprovedReceiptsService', ApprovedReceiptsService);
})(window.angular);
(function(angular){
'use strict';
/**
 * 
 */})(window.angular);
(function(angular){
'use strict';
/**
 * 
 */})(window.angular);
(function(angular){
'use strict';
DeliveryReceiptsService.$inject = ["$http", "globalConfig"];
function DeliveryReceiptsService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/delivery-receipts');
	};

	this.save = function(client) {
		return $http.post(globalConfig.baseUrl + '/rest/delivery-receipts', client);
	};

	this.update = function(client) {
		return $http.post(globalConfig.baseUrl + '/rest/delivery-receipts/', client);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/delivery-receipts/' + id);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/delivery-receipts/delete/',id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/delivery-receipts/company/'+ companyId);
	};
}

/**
 * @ngdoc service
 * @name DeliveryReceiptsService
 * @module components.auth
 *
 */
angular.module('admin.dashboard').service('DeliveryReceiptsService', DeliveryReceiptsService);
})(window.angular);
(function(angular){
'use strict';

var depotInventory = {
  templateUrl: './depot-inventory.html',
  controller: 'DepotInventoryController'
};

angular
  .module('admin.dashboard')
  .component('depotInventory', depotInventory)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('depot-inventory', {
        parent: 'app',
        url: '/admin/dashboard/depot-inventory',
        component: 'depotInventory'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

DepotInventoryController.$inject = ["$state", "ProductInventoryService", "ReportsService", "DepotsService", "UsersService", "StockCardsService", "$rootScope", "ProductStockCardService", "_"];
function DepotInventoryController($state, ProductInventoryService, ReportsService, DepotsService, UsersService, StockCardsService, $rootScope, ProductStockCardService,_) {
  var ctrl = this;
  ctrl.depotInventoryList = [];

  ctrl.searchNumber = '';
  ctrl.searchDate = '';
  ctrl.sortType = 'date';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addDepotInventory = false;
	  ctrl.error = null;
	  ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
	  UsersService.get(ctrl.user.id).then(function(response){
		  ctrl.userAssignedDepots = response.data.depots;
	  });
  };
  
  ctrl.selectDepot = function(){
	  loadDepotInventory();
  };
  
  ctrl.exportReport = function (){
	  DepotsService.get(ctrl.userAssignedDepot.id).then(function (response){
		  var reportTitle = {title: 'Report : Finished Good Summary Report'};
		  var dates = {dates: 'Depot : ' + response.data.name}
		  var headers = {
				    code: 'Code'.replace(/,/g, ''), // remove commas to avoid errors
				    fg: "Finished Good",
				    unit: "Small/Big",
				    quantity: "Quantity"
		  };
		  
		  ProductInventoryService.listProductInventoryDepotReport(ctrl.company.id, ctrl.userAssignedDepot.id).then(function(response){
			  console.log(response.data);
			  ReportsService.exportCSVFile(headers, reportTitle, dates, response.data, "print");
		  });  
	  });
  };
  
  function loadDepotInventory(){
	  ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
	  ctrl.company = $rootScope.selectedCompany;
	  console.log("asd" + ctrl.userAssignedDepot);
	  ProductInventoryService.listProductInventoryDepotView(ctrl.company.id, ctrl.userAssignedDepot.id).then(function(response){
		  ctrl.depotInventoryList = response.data;
		  console.log("LIST" + JSON.stringify(ctrl.depotInventoryList));
	  });
  }
  
  ctrl.openModal = function(depotInventory){
	  console.log(JSON.stringify(depotInventory));
	  ctrl.finishedGood = depotInventory['product'].finishedGood;
	  ProductInventoryService.listByCompanyAndFinishedGood(ctrl.company.id, ctrl.finishedGood.id).then(function(response){
		  ctrl.productList = response.data;
	  });
	  
  };
  
  ctrl.openStockCard = function(depotInventory){
	  ProductStockCardService.listByCompanyAndProduct(ctrl.company.id, depotInventory.product.id).then(function(response){
			 ctrl.stockCards = response.data;
			 console.log("response data size " + ctrl.stockCards.length);
		  });
  }
}

angular
  .module('admin.dashboard')
  .controller('DepotInventoryController', DepotInventoryController);
})(window.angular);
(function(angular){
'use strict';
EmployeesService.$inject = ["$http", "globalConfig"];
function EmployeesService($http, globalConfig) {
  this.list = function () {
    return $http.get(globalConfig.baseUrl + '/rest/employees');
  };

  this.paginate = function (itemsPerPage, offset) {
    console.log(itemsPerPage, offset);
    return $http.get(
      globalConfig.baseUrl +
        '/rest/employees/paginate/' +
        itemsPerPage +
        '/' +
        offset
    );
  };

  this.save = function (employee) {
    return $http.post(globalConfig.baseUrl + '/rest/employees', employee);
  };

  this.update = function (employee) {
    return $http.post(globalConfig.baseUrl + '/rest/employees/', employee);
  };

  this.get = function (id) {
    console.log(id);
    return $http.get(globalConfig.baseUrl + '/rest/employees/' + id);
  };

  this.listByCompany = function (id) {
    console.log(id);
    return $http.get(globalConfig.baseUrl + '/rest/employees/company/' + id);
  };

  this.delete = function (id) {
    return $http.post(globalConfig.baseUrl + '/rest/employees/delete/', id);
  };
}

/**
 * @ngdoc service
 * @name EmployeesService
 * @module components.auth
 *
 */
angular.module('admin.dashboard').service('EmployeesService', EmployeesService);
})(window.angular);
(function(angular){
'use strict';

var engineeringInventory = {
  templateUrl: './engineering-inventory.html',
  controller: 'EngineeringInventoryController'
};

angular
  .module('admin.dashboard')
  .component('engineeringInventory', engineeringInventory)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('engineeringInventory', {
        parent: 'app',
        url: '/admin/dashboard/engineering-inventory',
        component: 'engineeringInventory'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

EngineeringInventoryController.$inject = ["$state", "EngineeringInventoryService", "StockCardsService", "$rootScope", "_"];
function EngineeringInventoryController($state, EngineeringInventoryService, StockCardsService, $rootScope, _) {
  var ctrl = this;
  ctrl.inventoryList = [];

  ctrl.searchNumber = '';
  ctrl.searchDate = '';
  ctrl.sortType = 'date';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addEngineeringInventory = false;
	  ctrl.error = null;
	  loadEngineeringInventory();
  };
  
  function loadEngineeringInventory(){
	  ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
	  ctrl.company = $rootScope.selectedCompany;
	  EngineeringInventoryService.listByCompany(ctrl.company.id).then(function(response){
		  ctrl.inventoryList = response.data;
		  console.log(ctrl.inventoryList);	
	  });
  }
  
  ctrl.openStockCard = function(inventory){
	  ctrl.controlNumber = inventory.item.code;
	  ctrl.company = $rootScope.selectedCompany;
	  StockCardsService.listByControlNumberAndCompany(inventory.item.code, ctrl.company.id).then(function(response){
			 ctrl.stockCards = response.data;
			 console.log("response data size " + ctrl.stockCards.length);
		  });
	  $("#stockCardModal").modal("show");
  }
}

angular
  .module('admin.dashboard')
  .controller('EngineeringInventoryController', EngineeringInventoryController);
})(window.angular);
(function(angular){
'use strict';
EngineeringInventoryService.$inject = ["$http", "globalConfig"];
function EngineeringInventoryService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/engineering-inventory');
	};

	this.save = function(materialReevaluation) {
		return $http.post(globalConfig.baseUrl + '/rest/engineering-inventory', materialReevaluation);
	};

	this.update = function(materialReevaluation) {
		return $http.post(globalConfig.baseUrl + '/rest/engineering-inventory/', materialReevaluation);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/engineering-inventory/' + id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/engineering-inventory/company/' + companyId);
	};
	
	this.getItemByControlNumber = function(controlNumber){
		return $http.get(globalConfig.baseUrl + '/rest/engineering-inventory/item/control-number/' + controlNumber);
	};
	
	this.getStockQuantityOfItem = function(itemId, companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/engineering-inventory/company/'+companyId+'/stock/' + itemId);
	};
	
	this.listEngineeringInventoryView = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/engineering-inventory/company/' + companyId + '/view');
	};
	
	this.listByCompanyAndItem = function(companyId, itemId){
		return $http.get(globalConfig.baseUrl + '/rest/engineering-inventory/company/' + companyId + '/item/' + itemId);
	};
	
	this.listByRecipeItemsOnEngineeringInventory = function(companyId, recipeId) {
		return $http.get(globalConfig.baseUrl + '/rest/engineering-inventory/company/' + companyId + '/recipe/' + recipeId);
	}
}

/**
 * @ngdoc service
 * @name EngineeringInventoryService
 * @module components.auth
 *
 */
angular.module('admin.dashboard').service('EngineeringInventoryService', EngineeringInventoryService);
})(window.angular);
(function(angular){
'use strict';

var inventory = {
  templateUrl: './inventory.html',
  controller: 'InventoryController'
};

angular
  .module('admin.dashboard')
  .component('inventory', inventory)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('inventory', {
        parent: 'app',
        url: '/admin/dashboard/inventory',
        component: 'inventory'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

InventoryController.$inject = ["$state", "InventoryService", "StockCardsService", "$rootScope", "_"];
function InventoryController($state, InventoryService, StockCardsService, $rootScope, _) {
  var ctrl = this;
  ctrl.inventoryList = [];

  ctrl.searchNumber = '';
  ctrl.searchDate = '';
  ctrl.sortType = 'date';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addInventory = false;
	  ctrl.error = null;
	  loadInventory();
  };
  
  function loadInventory(){
	  ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
	  ctrl.company = $rootScope.selectedCompany;
	  InventoryService.listInventoryView(ctrl.company.id).then(function(response){
		  ctrl.inventoryList = response.data;
	  });
  }
  
  ctrl.openModal = function(inventory){
	  console.log(JSON.stringify(inventory));
	  ctrl.item = inventory[1];
	  InventoryService.listByCompanyAndItem(ctrl.company.id, inventory[1].id).then(function(response){
		  ctrl.controlList = response.data;
	  });
	  
  };
  
  ctrl.openStockCard = function(inventory){
	  ctrl.controlNumber = inventory.controlNumber;
	  ctrl.company = $rootScope.selectedCompany;
	  StockCardsService.listByControlNumberAndCompany(ctrl.controlNumber, ctrl.company.id).then(function(response){
			 ctrl.stockCards = response.data;
			 console.log("response data size " + ctrl.stockCards.length);
		  });
		  
	  InventoryService.getItemByControlNumber(ctrl.controlNumber).then(function(response){
			  ctrl.item = response.data;
		  });
  }
}

angular
  .module('admin.dashboard')
  .controller('InventoryController', InventoryController);
})(window.angular);
(function(angular){
'use strict';
InventoryService.$inject = ["$http", "globalConfig"];
function InventoryService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/inventory');
	};

	this.save = function(materialReevaluation) {
		return $http.post(globalConfig.baseUrl + '/rest/inventory', materialReevaluation);
	};

	this.update = function(materialReevaluation) {
		return $http.post(globalConfig.baseUrl + '/rest/inventory/', materialReevaluation);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/inventory/' + id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/inventory/company/' + companyId);
	};
	
	this.getItemByControlNumber = function(controlNumber){
		return $http.get(globalConfig.baseUrl + '/rest/inventory/item/control-number/' + controlNumber);
	};
	
	this.getStockQuantityOfItem = function(itemId, companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/inventory/company/'+companyId+'/stock/' + itemId);
	};
	
	this.listInventoryView = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/inventory/company/' + companyId + '/view');
	};
	
	this.listByCompanyAndItem = function(companyId, itemId){
		return $http.get(globalConfig.baseUrl + '/rest/inventory/company/' + companyId + '/item/' + itemId);
	};
	
	this.listByRecipeItemsOnInventory = function(companyId, recipeId) {
		return $http.get(globalConfig.baseUrl + '/rest/inventory/company/' + companyId + '/recipe/' + recipeId);
	}
}

/**
 * @ngdoc service
 * @name InventoryService
 * @module components.auth
 *
 */
angular.module('admin.dashboard').service('InventoryService', InventoryService);
})(window.angular);
(function(angular){
'use strict';

var engineeringItems = {
  templateUrl: './engineering-items.html',
  controller: 'EngineeringItemController'
};

angular
  .module('admin.dashboard')
  .component('engineeringItems', engineeringItems)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('engineering-items', {
        parent: 'app',
        url: '/admin/dashboard/engineering-items',
        component: 'engineeringItems'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

EngineeringItemController.$inject = ["$state", "ItemsService", "_"];
function EngineeringItemController($state, ItemsService, _) {
  var ctrl = this;
  ctrl.items = [];
  ctrl.searchCode = '';
  ctrl.searchName = '';
  ctrl.sortType = '';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addItem = false;
	  ctrl.error = null;
	  loadItems();
  };
  
  function loadItems(){
	  ItemsService.listEngineering().then(function(response){
		  console.log("list response:1 " + JSON.stringify(response.data));
		  ctrl.items = response.data;
	  });
  }
  
  ctrl.showAddItem = function (show){
	  ctrl.addItem = show;
  };
  
  ctrl.editItem = function (id) {
	  ItemsService.get(id).then(function(response){
		  ctrl.item = response.data;
	  });
	  ctrl.addItem = true;
  };
  
  ctrl.saveItem = function (event) {
	    ItemsService.save(event.item).then(function () {
	    	  loadItems();
	    	  ctrl.showAddItem(false);
	    	  ctrl.item = null;
	    });
  };
  
  ctrl.deleteItem = function (id){
	  ItemsService.delete(id).then(function(response){
		  loadItems();
	  });
  };
}

angular
  .module('admin.dashboard')
  .controller('EngineeringItemController', EngineeringItemController);
})(window.angular);
(function(angular){
'use strict';
InventoryMovementsService.$inject = ["$http", "globalConfig"];
function InventoryMovementsService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/inventory-movements');
	};

	this.save = function(materialReevaluation) {
		return $http.post(globalConfig.baseUrl + '/rest/inventory-movements', materialReevaluation);
	};

	this.update = function(materialReevaluation) {
		return $http.post(globalConfig.baseUrl + '/rest/inventory-movements/', materialReevaluation);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/inventory-movements/' + id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/inventory-movements/company/' + companyId);
	};
}

/**
 * @ngdoc service
 * @name InventoryMovementService
 * @module components.auth
 *
 */
angular.module('admin.dashboard').service('InventoryMovementsService', InventoryMovementsService);
})(window.angular);
(function(angular){
'use strict';
JobOrdersService.$inject = ["$http", "globalConfig"];
function JobOrdersService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/job-orders');
	};

	this.save = function(materialReevaluation) {
		return $http.post(globalConfig.baseUrl + '/rest/job-orders', materialReevaluation);
	};

	this.update = function(materialReevaluation) {
		return $http.post(globalConfig.baseUrl + '/rest/job-orders/', materialReevaluation);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/job-orders/' + id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/job-orders/company/' + companyId);
	};
	
	this.listByStatus = function (status) {
		return $http.get(globalConfig.baseUrl + '/rest/job-orders/status/' + status);
	};

	this.listByMoInventory = function (moInventoryId) {
		return $http.get(globalConfig.baseUrl + '/rest/job-orders/moInventory/' + moInventoryId);
	}
}

/**
 * @ngdoc service
 * @name JobOrdersService
 * @module components.auth
 *
 */
angular.module('admin.dashboard').service('JobOrdersService', JobOrdersService);
})(window.angular);
(function(angular){
'use strict';
MaterialReceivingsService.$inject = ["$http", "globalConfig"];
function MaterialReceivingsService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/material-receivings');
	};

	this.save = function(materialReevaluation) {
		return $http.post(globalConfig.baseUrl + '/rest/material-receivings', materialReevaluation);
	};

	this.update = function(materialReevaluation) {
		return $http.post(globalConfig.baseUrl + '/rest/material-receivings/', materialReevaluation);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/material-receivings/' + id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/material-receivings/company/' + companyId);
	};
}

/**
 * @ngdoc service
 * @name MaterialReceivingsService
 * @module components.auth
 *
 */
angular.module('admin.dashboard').service('MaterialReceivingsService', MaterialReceivingsService);
})(window.angular);
(function(angular){
'use strict';
MaterialIssuancesService.$inject = ["$http", "globalConfig"];
function MaterialIssuancesService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/material-issuances');
	};

	this.save = function(materialReevaluation) {
		return $http.post(globalConfig.baseUrl + '/rest/material-issuances', materialReevaluation);
	};

	this.update = function(materialReevaluation) {
		return $http.post(globalConfig.baseUrl + '/rest/material-issuances/', materialReevaluation);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/material-issuances/' + id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/material-issuances/company/' + companyId);
	};
	
	this.listByStatus = function (status) {
		return $http.get(globalConfig.baseUrl + '/rest/material-issuances/status/' + status);
	};
}

/**
 * @ngdoc service
 * @name MaterialIssuancesService
 * @module components.auth
 *
 */
angular.module('admin.dashboard').service('MaterialIssuancesService', MaterialIssuancesService);
})(window.angular);
(function(angular){
'use strict';
MaterialReevaluationsService.$inject = ["$http", "globalConfig"];
function MaterialReevaluationsService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/material-reevaluations');
	};

	this.save = function(materialReevaluation) {
		return $http.post(globalConfig.baseUrl + '/rest/material-reevaluations', materialReevaluation);
	};

	this.update = function(materialReevaluation) {
		return $http.post(globalConfig.baseUrl + '/rest/material-reevaluations/', materialReevaluation);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/material-reevaluations/' + id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/material-reevaluations/company/' + companyId);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/material-reevaluations/delete/',id);
	};
}

/**
 * @ngdoc service
 * @name MaterialReevaluationsService
 * @module components.auth
 *
 */
angular.module('admin.dashboard').service('MaterialReevaluationsService', MaterialReevaluationsService);
})(window.angular);
(function(angular){
'use strict';
var productInventory = {
  templateUrl: './product-inventory.html',
  controller: 'ProductInventoryController'
};

angular
  .module('admin.dashboard')
  .component('productInventory', productInventory)
  .config(["$stateProvider", function($stateProvider) {
    $stateProvider.state('productInventory', {
      parent: 'app',
      url: '/admin/dashboard/product-inventory',
      component: 'productInventory'
    });
  }]);
})(window.angular);
(function(angular){
'use strict';
ProductInventoryController.$inject = ["$state", "ProductInventoryService", "StockCardsService", "$rootScope", "ProductStockCardService", "_"];
function ProductInventoryController(
  $state,
  ProductInventoryService,
  StockCardsService,
  $rootScope,
  ProductStockCardService,
  _
) {
  var ctrl = this;
  ctrl.productInventoryList = [];

  ctrl.searchNumber = '';
  ctrl.searchDate = '';
  ctrl.sortType = 'date';
  ctrl.sortReverse = false;

  ctrl.$onInit = function() {
    ctrl.addProductInventory = false;
    ctrl.error = null;
    loadProductInventory();
  };

  function loadProductInventory() {
    ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
    ctrl.company = $rootScope.selectedCompany;
    ProductInventoryService.listProductInventoryView(ctrl.company.id).then(
      function(response) {
        ctrl.productInventoryList = response.data;
        console.log('LIST' + JSON.stringify(ctrl.productInventoryList));
      }
    );
  }

  ctrl.openModal = function(productInventory) {
    console.log(JSON.stringify(productInventory));
    ctrl.finishedGood = productInventory['product'].finishedGood;
    ProductInventoryService.listByCompanyAndFinishedGood(
      ctrl.company.id,
      ctrl.finishedGood.id
    ).then(function(response) {
      ctrl.productList = response.data;
    });
  };

  ctrl.openStockCard = function(productInventory) {
    ProductStockCardService.listByCompanyAndProduct(
      ctrl.company.id,
      productInventory.product.id
    ).then(function(response) {
      ctrl.stockCards = response.data;
      console.log('response data size ' + ctrl.stockCards.length);
    });
  };
}

angular
  .module('admin.dashboard')
  .controller('ProductInventoryController', ProductInventoryController);
})(window.angular);
(function(angular){
'use strict';
ProductInventoryService.$inject = ["$http", "globalConfig"];
function ProductInventoryService($http, globalConfig) {
  this.list = function() {
    return $http.get(globalConfig.baseUrl + '/rest/product-inventory');
  };

  this.save = function(materialReevaluation) {
    return $http.post(
      globalConfig.baseUrl + '/rest/product-inventory',
      materialReevaluation
    );
  };

  this.update = function(materialReevaluation) {
    return $http.post(
      globalConfig.baseUrl + '/rest/product-inventory/',
      materialReevaluation
    );
  };

  this.get = function(id) {
    return $http.get(globalConfig.baseUrl + '/rest/product-inventory/' + id);
  };

  this.listByCompany = function(companyId) {
    return $http.get(
      globalConfig.baseUrl + '/rest/product-inventory/company/' + companyId
    );
  };

  this.listByDepot = function(depotId) {
    return $http.get(
      globalConfig.baseUrl + '/rest/product-inventory/depot/' + depotId
    );
  };

  this.listByFinishedGoodAndDepot = function(finishedGoodId, depotId) {
    return $http.get(
      globalConfig.baseUrl +
        '/rest/product-inventory/depot/' +
        depotId +
        '/finished-good/' +
        finishedGoodId
    );
  };

  this.listProductInventoryView = function(companyId) {
    return $http.get(
      globalConfig.baseUrl +
        '/rest/product-inventory/company/' +
        companyId +
        '/view'
    );
  };

  this.listByCompanyAndFinishedGood = function(companyId, finishedGoodId) {
    return $http.get(
      globalConfig.baseUrl +
        '/rest/product-inventory/company/' +
        companyId +
        '/finished-good/' +
        finishedGoodId
    );
  };

  this.listProductInventoryDepotView = function(companyId, depotId) {
    return $http.get(
      globalConfig.baseUrl +
        '/rest/product-inventory/company/' +
        companyId +
        '/depot/' +
        depotId +
        '/view'
    );
  };

  this.listByDepotAndFinishedGood = function(depotId, finishedGoodId) {
    return $http.get(
      globalConfig.baseUrl +
        '/rest/product-inventory/depot/' +
        depotId +
        '/finished-good/' +
        finishedGoodId
    );
  };

  this.listFinishedGoodView = function(companyId) {
    return $http.get(
      globalConfig.baseUrl +
        '/rest/product-inventory/company/' +
        companyId +
        '/view/fg-modal'
    );
  };

  this.listProductInventoryDepotReport = function(companyId, depotId) {
    return $http.get(
      globalConfig.baseUrl +
        '/rest/product-inventory/company/' +
        companyId +
        '/depot/' +
        depotId +
        '/report'
    );
  };
}

/**
 * @ngdoc service
 * @name ProductInventoryService
 * @module components.auth
 *
 */
angular
  .module('admin.dashboard')
  .service('ProductInventoryService', ProductInventoryService);
})(window.angular);
(function(angular){
'use strict';
ProductMovementsService.$inject = ["$http", "globalConfig"];
function ProductMovementsService($http, globalConfig) {

  this.list = function () {
    return $http.get(globalConfig.baseUrl + '/rest/product-movements');
  };

  this.save = function (productMovement) {
    return $http.post(globalConfig.baseUrl + '/rest/product-movements', productMovement);
  };

  this.update = function (productMovement) {
    return $http.post(globalConfig.baseUrl + '/rest/product-movements/', productMovement);
  };

  this.get = function (id) {
    return $http.get(globalConfig.baseUrl + '/rest/product-movements/' + id);
  };

  this.listByCompany = function(id) {
	return $http.get(globalConfig.baseUrl + '/rest/product-movements/company/' + id);  
  };

}

/**
 * @ngdoc service
 * @name ProductMovementsService
 * @module components.auth
 *
 */
angular
  .module('admin.dashboard')
  .service('ProductMovementsService', ProductMovementsService);
})(window.angular);
(function(angular){
'use strict';
ProductIssuancesService.$inject = ["$http", "globalConfig"];
function ProductIssuancesService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/product-issuances');
	};

	this.save = function(productReevaluation) {
		return $http.post(globalConfig.baseUrl + '/rest/product-issuances', productReevaluation);
	};

	this.update = function(productReevaluation) {
		return $http.post(globalConfig.baseUrl + '/rest/product-issuances/', productReevaluation);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/product-issuances/' + id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/product-issuances/company/' + companyId);
	};
	
	this.listByStatusAndDepot = function (status, depotId) {
		return $http.get(globalConfig.baseUrl + '/rest/product-issuances/status/' + status + '/depot/' + depotId);
	};
}

/**
 * @ngdoc service
 * @name ProductIssuancesService
 * @module components.auth
 *
 */
angular.module('admin.dashboard').service('ProductIssuancesService', ProductIssuancesService);
})(window.angular);
(function(angular){
'use strict';
ProductReceivingsService.$inject = ["$http", "globalConfig"];
function ProductReceivingsService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/product-receivings');
	};

	this.save = function(productReevaluation) {
		return $http.post(globalConfig.baseUrl + '/rest/product-receivings', productReevaluation);
	};

	this.update = function(productReevaluation) {
		return $http.post(globalConfig.baseUrl + '/rest/product-receivings/', productReevaluation);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/product-receivings/' + id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/product-receivings/company/' + companyId);
	};
	
	this.listByStatus = function (status) {
		return $http.get(globalConfig.baseUrl + '/rest/product-receivings/status/' + status);
	};
}

/**
 * @ngdoc service
 * @name ProductReceivingsService
 * @module components.auth
 *
 */
angular.module('admin.dashboard').service('ProductReceivingsService', ProductReceivingsService);
})(window.angular);
(function(angular){
'use strict';
PurchaseRequestsService.$inject = ["$http", "globalConfig"];
function PurchaseRequestsService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/purchase-requests');
	};

	this.save = function(purchaseRequest) {
		return $http.post(globalConfig.baseUrl + '/rest/purchase-requests', purchaseRequest);
	};

	this.update = function(purchaseRequest) {
		return $http.post(globalConfig.baseUrl + '/rest/purchase-requests/', purchaseRequest);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/purchase-requests/' + id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/purchase-requests/company/' + companyId);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/purchase-requests/delete/',id);
	};
	
	this.getByPrfNumberAndPurchaseOrder= function(prfNumber,po){
		return $http.get(globalConfig.baseUrl + '/rest/purchase-requests/number/' + prfNumber + '/po/'+po);
	};
	
	this.getPrfQuantityOfItem = function(itemId, companyId){
		return $http.get(globalConfig.baseUrl + '/rest/purchase-requests/company/' + companyId + '/stock/' + itemId);
	};
	
	this.approve = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/purchase-requests/approve/' + id);
	};
	
	this.reject = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/purchase-requests/reject/' + id);
	};
	
	this.getRequestedItemsByCompany = function(companyId){
		return $http.get(globalConfig.baseUrl + '/api/requested-items/company/' + companyId);
	};
	
	this.cancelRequestedItem = function(requestedItem){
		return $http.post(globalConfig.baseUrl + '/api/requested-items/cancel', requestedItem);
	};
	
	this.getLatestCancelledReqs = function(prfId){
		return $http.get(globalConfig.baseUrl + '/rest/purchase-requests/cancelled-reqs/' + prfId);
	};
	
	this.getRequestedItemsByCompanyAndType = function(companyId, type){
		return $http.get(globalConfig.baseUrl + '/api/requested-items/company/' + companyId + '/type/'+type);
	};
	
	this.listByCompanyAndDepartment = function(companyId, department){
		return $http.get(globalConfig.baseUrl + '/rest/purchase-requests/company/' + companyId + '/department/'+department);
	};
	
	
}

/**
 * @ngdoc service
 * @name PurchaseRequestsService
 * @module components.auth
 * 
 */
angular.module('admin.dashboard').service('PurchaseRequestsService', PurchaseRequestsService);
})(window.angular);
(function(angular){
'use strict';
/**
 * 
 */})(window.angular);
(function(angular){
'use strict';
ReceivingReceiptsService.$inject = ["$http", "globalConfig"];
function ReceivingReceiptsService($http, globalConfig) {
  this.list = function() {
    return $http.get(globalConfig.baseUrl + '/rest/receiving-receipts');
  };

  this.listReceivedItem = function() {
    return $http.get(globalConfig.baseUrl + '/api/receivedItems');
  };

  this.save = function(receivingReceipt) {
    return $http.post(
      globalConfig.baseUrl + '/rest/receiving-receipts',
      receivingReceipt
    );
  };

  this.update = function(receivingReceipt) {
    return $http.post(
      globalConfig.baseUrl + '/rest/receiving-receipts/',
      receivingReceipt
    );
  };

  this.get = function(id) {
    return $http.get(globalConfig.baseUrl + '/rest/receiving-receipts/' + id);
  };

  this.listByCompany = function(companyId) {
    return $http.get(
      globalConfig.baseUrl + '/rest/receiving-receipts/company/' + companyId
    );
  };

  this.delete = function(id) {
    return $http.post(
      globalConfig.baseUrl + '/rest/receiving-receipts/delete/',
      id
    );
  };

  this.listByCompanyForPo = function(companyId, purchaseOrderId) {
    return $http.get(
      globalConfig.baseUrl +
        '/rest/receiving-receipts/company/' +
        companyId +
        '/po/' +
        purchaseOrderId
    );
  };

  this.listByCompanyByStatus = function(companyId, status) {
    return $http.get(
      globalConfig.baseUrl +
        '/rest/receiving-receipts/company/' +
        companyId +
        '/status/' +
        status
    );
  };

  this.getQuarantinedQuantityOfItem = function(itemId, companyId) {
    return $http.get(
      globalConfig.baseUrl +
        '/rest/receiving-receipts/company/' +
        companyId +
        '/stock/' +
        itemId
    );
  };

  this.listReceivedItemByStatus = function(status) {
    return $http.get(
      globalConfig.baseUrl + '/api/receivedItems/status/' + status
    );
  };

  this.listRrWithoutPurchaseVoucher = function(companyId) {
    return $http.get(
      globalConfig.baseUrl +
        '/rest/receiving-receipts/company/' +
        companyId +
        '/no-purchase-voucher'
    );
  };
}

/**
 * @ngdoc service
 * @name ReceivingReceiptsService
 * @module components.auth
 *
 */
angular
  .module('admin.dashboard')
  .service('ReceivingReceiptsService', ReceivingReceiptsService);
})(window.angular);
(function(angular){
'use strict';

ReportsService.$inject = ["$http", "globalConfig"];
function ReportsService($http, globalConfig) {


	function convertToCSV (objArray) {
		   var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;
		    
		  var str = '';
		    
		    for (var i = 0; i < array.length; i++) {
		        var line = '';
		        for (var index in array[i]) {
		            if (line != '') line += ','

		            line += array[i][index];
		        }

		        str += line + '\r\n';
		    }

		    return str;
	}

	this.exportCSVFile = function(headers, reportTitle, dates, items, fileTitle) {
		    if (headers) {
		        items.unshift(headers);
		        items.unshift(dates);
		        items.unshift(reportTitle);
		    }

		    // Convert Object to JSON
		    var jsonObject = JSON.stringify(items);

		    var csv = convertToCSV(jsonObject);

		    var exportedFilenmae = fileTitle + '.csv' || 'export.csv';

		    var blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
		    if (navigator.msSaveBlob) { // IE 10+
		        navigator.msSaveBlob(blob, exportedFilenmae);
		    } else {
		        var link = document.createElement("a");
		        if (link.download !== undefined) { // feature detection
		            // Browsers that support HTML5 download attribute
		            var url = URL.createObjectURL(blob);
		            link.setAttribute("href", url);
		            link.setAttribute("download", exportedFilenmae);
		            link.style.visibility = 'hidden';
		            document.body.appendChild(link);
		            link.click();
		            document.body.removeChild(link);
		        }
		    }
		}
}

/**
 * @ngdoc service
 * @name ProvinceCodesService
 * @module components.auth
 *
 */
angular.module('admin.dashboard').service('ReportsService', ReportsService);

})(window.angular);
(function(angular){
'use strict';

var salesReports = {
  templateUrl: './sales-reports.html',
  controller: 'SalesReportsController'
};

angular
  .module('admin.dashboard')
  .component('salesReports', salesReports)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('sales-reports', {
        parent: 'app',
        url: '/admin/dashboard/sales-reports',
        component: 'salesReports'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

SalesReportsController.$inject = ["$state", "SalesOrdersService", "UsersService", "ProductCategoriesService", "ProductsService", "CategoryService", "ProductDivisionCodesService", "SalesReportsService", "ReportsService", "SalesRepsService", "$rootScope"];
function SalesReportsController($state, SalesOrdersService, UsersService, ProductCategoriesService, ProductsService, CategoryService, ProductDivisionCodesService, SalesReportsService, ReportsService, SalesRepsService, $rootScope) {
  var ctrl = this;
  
  
  ctrl.$onInit = function () {
	  ctrl.company = $rootScope.selectedCompany;

	  ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
	  UsersService.get(ctrl.user.id).then(function(response){
		  ctrl.userAssignedDepots = response.data.depots;
	  });
	  SalesRepsService.list().then(function(response){
		 ctrl.salesReps = response.data;
		 console.log(ctrl.salesReps);
	  });
	  
	  ProductsService.list().then(function(response){
		  ctrl.items = response.data;
	  });
	  
	  ProductDivisionCodesService.list().then(function(response){
		  ctrl.divisions = response.data;
	  });
	  
	  ProductCategoriesService.list().then(function(response){
		 ctrl.categories = response.data;
	  });
  };
  /*
  ctrl.exportGeneralSalesReport = function() {
	  var reportTitle = {title: 'Report : General Sales Report'};
	  var dates = {date: 'Date Range:' + ctrl.startDate.getFullYear() + "-" + (ctrl.startDate.getMonth() + 1) + "-" + ctrl.startDate.getDate() + " to "+
		  ctrl.endDate.getFullYear() + "-" + (ctrl.endDate.getMonth() + 1) + "-" + ctrl.endDate.getDate()}
	  var headers = {
			    title: 'Account Title'.replace(/,/g, ''), // remove commas to avoid errors
			    credit: "Credit",
			    debit: "Debit"
	  };
	  SalesReportssService.getJVSalesReports(ctrl.company.id, ctrl.startDate, ctrl.endDate).then(function(response){
		  ReportsService.exportCSVFile(headers, reportTitle, dates, response.data, "print.csv");
	  });
  }
  
  */
  ctrl.generateGeneralSalesReport = function () {
	  SalesOrdersService.getTotalAmountAndQuantity(ctrl.userAssignedDepot.id, ctrl.startDate, ctrl.endDate, ctrl.salesRep.id).then(function(response){
		 if(response){
			 ctrl.gsrAmount = response.data.gsrAmount;
			 ctrl.gsrQuantity = response.data.gsrQuantity;
		 } 
	  });
  };
  
  
  ctrl.generateItemSalesReport = function () {
		  SalesReportsService.itemSalesReport(ctrl.userAssignedDepot.id, ctrl.startDate, ctrl.endDate, ctrl.item.id).then(function(response){
			 if(response){
				 ctrl.itemAmount = response.data.itemAmount;
				 ctrl.itemQuantity = response.data.itemQuantity;
			 } 
		  });
  };
  
  ctrl.generateItemSalesReportByCategory = function () {
		  SalesReportsService.itemSalesReportByCategory(ctrl.userAssignedDepot.id, ctrl.startDate, ctrl.endDate, ctrl.division.id, ctrl.category.id).then(function(response){
				 if(response){
					 ctrl.itemAmount2 = response.data.itemAmount;
					 ctrl.itemQuantity2 = response.data.itemQuantity;
				 } 
		  });
  };
  
}

angular
  .module('admin.dashboard')
  .controller('SalesReportsController', SalesReportsController);
})(window.angular);
(function(angular){
'use strict';
SalesReportsService.$inject = ["$http", "globalConfig"];
function SalesReportsService($http, globalConfig) {

	this.itemSalesReport = function(userAssignedDepotId, startDate, endDate, itemId) {
		return $http.get(globalConfig.baseUrl + '/rest/sales-reports/item-sales-report/depot/'+userAssignedDepotId+'/start/' + startDate + '/end/' + endDate + '/item/' + itemId);
	};
	
	this.itemSalesReportByCategory = function (userAssignedDepotId, startDate, endDate, categoryId, divisionId) {
		return $http.get(globalConfig.baseUrl + '/rest/sales-reports/item-sales-report/depot/'+userAssignedDepotId+'/start/' + startDate + '/end/' + endDate + '/category/' + categoryId + '/division/' +divisionId);

	};

}

/**
 * @ngdoc service
 * @name SalesReportsService
 * @module components.auth
 * 
 */
angular.module('admin.dashboard').service('SalesReportsService', SalesReportsService);})(window.angular);
(function(angular){
'use strict';
SalesSlipsService.$inject = ["$http", "globalConfig"];
function SalesSlipsService($http, globalConfig) {
	
	this.listByDepotAndClientAndStatus = function(depotId, clientId, status){
		return $http.get(globalConfig.baseUrl + '/rest/sales-slips/depot/' + depotId + '/client/' +clientId + '/status/' + status);
	};
	
	this.listByDepotAndStatus = function(depotId, status){
		return $http.get(globalConfig.baseUrl + '/rest/sales-slips/depot/' + depotId  + '/status/' + status);
	};
	this.listByDepot = function(depotId){
		return $http.get(globalConfig.baseUrl + '/rest/sales-slips/depot/' + depotId);
	};
	
	this.getByDepotAndDates = function(depotId, startDate, endDate){
		return $http.get(globalConfig.baseUrl + '/rest/sales-slips/depot/' + depotId + '/start/' + startDate + '/end/' +endDate);
	};
}

/**
 * @ngdoc service
 * @name SalesSlipsService
 * @module components.auth
 *
 */
angular.module('admin.dashboard').service('SalesSlipsService', SalesSlipsService);
})(window.angular);
(function(angular){
'use strict';

VouchersService.$inject = ["$http", "globalConfig"];
function VouchersService($http, globalConfig) {

	this.listNewVouchersByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/vouchers/company/' + companyId + '/new-vouchers');
	};
	
	this.listNewVouchersByCompanyAndStatus = function(companyId, status) {
		return $http.get(globalConfig.baseUrl + '/rest/vouchers/company/' + companyId + '/status/'+status+'/new-vouchers');
	};

	
	
}

/**
 * @ngdoc service
 * @name VouchersService
 * @module components.auth
 *
 */

angular.module('admin.dashboard').service('VouchersService', VouchersService);
})(window.angular);
(function(angular){
'use strict';
var printAccountSummaryReport = {
	templateUrl : './print-account-summary-report.html',
	controller : 'PrintAccountSummaryReportController'
};

angular.module('admin.shared')
.component('printAccountSummaryReport', printAccountSummaryReport)
.config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('print-account-summary-report', {
        url: '/admin/shared/print-account-summary-report/:type/start/:startDate/end/:endDate',
		component: 'printAccountSummaryReport',
		params: {
			type:null,
			startDate: null,
			endDate: null
		}
	  });
	}]);
})(window.angular);
(function(angular){
'use strict';

PrintAccountSummaryReportController.$inject = ["$state", "AccountSummaryReportsService", "InventoryService", "$stateParams", "$rootScope"];
function PrintAccountSummaryReportController($state, AccountSummaryReportsService, InventoryService, $stateParams, $rootScope) {
  var ctrl = this;
  
  console.log("control number", $stateParams.controlNumber);

  
  ctrl.$onInit = function(){
	  ctrl.company = $rootScope.selectedCompany;
	  ctrl.startDate = new Date($stateParams.startDate.replace(/['"]+/g, ''));
	  ctrl.endDate = new Date($stateParams.endDate.replace(/['"]+/g, ''));
	  //ctrl.dates = ctrl.startDate + " to " + ctrl.endDate;
	  ctrl.dates = ctrl.startDate.getFullYear() + "-" + (ctrl.startDate.getMonth() + 1) + "-" + ctrl.startDate.getDate() + " to "+
			  ctrl.endDate.getFullYear() + "-" + (ctrl.endDate.getMonth() + 1) + "-" + ctrl.endDate.getDate();
	  console.log($stateParams.startDate);
	  if($stateParams.type == "pjv"){
		  ctrl.reportType = "PJV Account Summary Report";
		  console.log(new Date($stateParams.startDate));
		  AccountSummaryReportsService.getPJVAccountSummaryReport(ctrl.company.id, new Date($stateParams.startDate.replace(/['"]+/g, '')), new Date($stateParams.endDate.replace(/['"]+/g, ''))).then(function(response){
			  console.log(response.data);
			  ctrl.entries = response.data;
		  }).then(() => {
			    setTimeout(function(){
			        window.print();
			        window.close();
			      }, 1500);
			    });;
	  } else if ($stateParams.type == "jv"){
		  ctrl.reportType = "JV Account Summary Report";
		  console.log(new Date($stateParams.startDate));
		  AccountSummaryReportsService.getJVAccountSummaryReport(ctrl.company.id, new Date($stateParams.startDate.replace(/['"]+/g, '')), new Date($stateParams.endDate.replace(/['"]+/g, ''))).then(function(response){
			  console.log(response.data);
			  ctrl.entries = response.data;
		  }).then(() => {
			    setTimeout(function(){
			        window.print();
			        window.close();
			      }, 1500);
			    });;
	  } else if($stateParams.type == "vp"){
		  ctrl.reportType = "VP Account Summary Report";
		  console.log(new Date($stateParams.startDate));
		  AccountSummaryReportsService.getVPAccountSummaryReport(ctrl.company.id, new Date($stateParams.startDate.replace(/['"]+/g, '')), new Date($stateParams.endDate.replace(/['"]+/g, ''))).then(function(response){
			  console.log(response.data);
			  ctrl.entries = response.data;
		  }).then(() => {
			    setTimeout(function(){
			        window.print();
			        window.close();
			      }, 1500);
			    });;
	  } else if($stateParams.type == "cdv"){
		  
	  }
	 
  };
 
}

angular
  .module('admin.shared')
  .controller('PrintAccountSummaryReportController', PrintAccountSummaryReportController);
})(window.angular);
(function(angular){
'use strict';
var accountTitleTable = {
	bindings : {
		accounttitles : '=',
		readonly : '<'
	},
	templateUrl : './account-title-table.html',
	controller : 'AccountTitleTableController'
};

angular.module('admin.shared').component('accountTitleTable', accountTitleTable);})(window.angular);
(function(angular){
'use strict';

AccountTitleTableController.$inject = ["$state", "AccountTitlesService", "DepartmentsService", "GroupService", "AreasService", "$rootScope", "_"];
function AccountTitleTableController($state, AccountTitlesService, DepartmentsService, GroupService, AreasService, $rootScope, _) {
  var ctrl = this;
  
  ctrl.$onInit = function(){
	  ctrl.company = $rootScope.selectedCompany;
	  AccountTitlesService.list().then(function(response){
		  ctrl.accountTitlesList = response.data;
		  console.log("response" + JSON.stringify(ctrl.accountTitles));
	  });
	  
	  DepartmentsService.listByCompany(ctrl.company.id).then(function(response){
		  ctrl.departments = response.data;
	  });
	  
	  GroupService.listByCompany(ctrl.company.id).then(function(response){
		  ctrl.groups = response.data;
	  });
	  
	  AreasService.listByCompany(ctrl.company.id).then(function(response){
		  ctrl.areas = response.data;
	  });
	  
	  ctrl.debitAmount = 0;
	  ctrl.creditAmount = 0;
	  
	  $("#myInput").focusout(function () {
		document.getElementById("myDropdown").classList.toggle("show");
		});

		$("#myDropdown").focusout(function () {
			document.getElementById("myDropdown").classList.toggle("show");
		});
  };
	
  
  
  ctrl.addRow = function(){
	  ctrl.accounttitles.push({
		  accountTitle: ctrl.accountTitle,
		  department: ctrl.department,
		  group: ctrl.group,
		  area: ctrl.area,
		  amount: ctrl.amount
	  });
	  if(ctrl.accountTitle.type == 'Credit'){
		  ctrl.creditAmount += ctrl.amount;
	  }else if(ctrl.accountTitle.type == 'Debit'){
		  ctrl.debitAmount -= ctrl.amount;
	  }
	  ctrl.accountTitle = null;
	  ctrl.department = null;
	  ctrl.group = null;
	  ctrl.area = null;
	  ctrl.amount = null;
  };
  
  ctrl.deleteRow = function(index){
	  if(ctrl.accounttitles[index].accountTitle.type == 'Credit'){
		  ctrl.creditAmount -= ctrl.accounttitles[index].amount;
	  }else if(ctrl.accounttitles[index].accountTitle.type == 'Debit'){
		  ctrl.debitAmount += ctrl.accounttitles[index].amount;
	  }
	  
	  ctrl.accounttitles.splice(index, 1);
  }
  
  ctrl.showAccountTitleModal = function(){
	  console.log(ctrl.accountTitle);
  }

  ctrl.myFunction = function() {
	document.getElementById("myDropdown").classList.toggle("show");
	
  }
  
  ctrl.filterFunction = function() {
	var input, filter, ul, li, a, i, div, txtValue;
	input = document.getElementById("myInput");
	filter = input.value.toUpperCase();
	div = document.getElementById("myDropdown");
	a = div.getElementsByTagName("a");
	for (i = 0; i < a.length; i++) {
	  txtValue = a[i].textContent || a[i].innerText;
	  if (txtValue.toUpperCase().indexOf(filter) > -1) {
		a[i].style.display = "";
	  } else {
		a[i].style.display = "none";
	  }
	}

	if(a.length == 1){
		console.log("ASDASD");
		AccountTitlesService.findByTitle(a[0].textContent || a[0].innerText).then(function(response){
			this.accountTitle = response.data;
		});	
	}
  }

  ctrl.selectAccountTitle = function(accountTitle){
	  ctrl.accountTitle = accountTitle;
	  document.getElementById("myDropdown").classList.toggle("show");
  }
  
}

angular
  .module('admin.shared')
  .controller('AccountTitleTableController', AccountTitleTableController);
})(window.angular);
(function(angular){
'use strict';
ApprovedItemsService.$inject = ["$http", "globalConfig"];
function ApprovedItemsService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/approved-items');
	};

	this.save = function(approvedItem) {
		return $http.post(globalConfig.baseUrl + '/rest/approved-items', approvedItem);
	};

	this.update = function(approvedItem) {
		return $http.post(globalConfig.baseUrl + '/rest/approved-items/', approvedItem);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/approved-items/' + id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/approved-items/company/' + companyId);
	};
	
	this.delete = function(id){
		return $http.post(globalConfig.baseUrl + '/rest/approved-items/delete/',id);
	};
}

/**
 * @ngdoc service
 * @name ApprovedItemsService
 * @module components.auth
 *
 */
angular.module('admin.shared').service('ApprovedItemsService', ApprovedItemsService);
})(window.angular);
(function(angular){
'use strict';

var companyNav = {
    bindings: {
    },
    templateUrl: './company-nav.html',
    controller: 'CompanyNavController'
  };
  
  angular
    .module('admin.shared')
    .component('companyNav', companyNav);})(window.angular);
(function(angular){
'use strict';

  CompanyNavController.$inject = ["$state", "CompanyService", "$rootScope", "_"];
function CompanyNavController($state, CompanyService, $rootScope, _) {
    var ctrl = this;
    ctrl.companies = [];
    
    ctrl.$onInit  = function() {
        CompanyService.list().then(function(response) {
            ctrl.companies = response.data;
            //console.log(window.localStorage.getItem("company"));
            ctrl.company = $rootScope.selectedCompany;
            if (ctrl.company == null) {
                $rootScope.selectedCompany = ctrl.companies[0];
            }
        });

        ctrl.selectCompany = function(company) {
        	$rootScope.selectedCompany = company;
        	localStorage.setItem('company', JSON.stringify(company));
        	ctrl.company = company;
        	$state.reload();
        }
    };

    ctrl.showCompanyNav = function(){
    	ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    	if(ctrl.user.department.name == "Admin"){
    		return true;
    	}else{
    		$rootScope.selectedCompany = ctrl.user.company;
    		return false;
    	}
    };

  }
  
  angular
    .module('admin.shared')
    .controller('CompanyNavController', CompanyNavController);
  })(window.angular);
(function(angular){
'use strict';
var findClientModal = {
	bindings : {
		client : '=',
		button : '@',
		message : '@'
	},
	templateUrl : './find-client-modal.html',
	controller : 'FindClientModalController'
};

angular.module('admin.shared').component('findClientModal', findClientModal);})(window.angular);
(function(angular){
'use strict';

FindClientModalController.$inject = ["$state", "ClientsService", "$rootScope"];
function FindClientModalController($state, ClientsService, $rootScope) {
  var ctrl = this;
  ctrl.clients = [];
  ctrl.sortType = 'number';
	ctrl.sortReverse = false;
  
  ctrl.$onInit = function(){
	loadClients();
  };
  
  
  function loadClients(){
	  ctrl.company = $rootScope.selectedCompany;
	  ClientsService.listByCompany(ctrl.company.id).then(function(response){
		  ctrl.clients = response.data;
		  console.log("response" + JSON.stringify(ctrl.clients));
	  });
  }
  
  
  ctrl.getClient = function(client){
	ctrl.client = client;  
  };
}

angular
  .module('admin.shared')
  .controller('FindClientModalController', FindClientModalController);
})(window.angular);
(function(angular){
'use strict';
var findFgInventoryModal = {
	bindings : {
		fglist : '=',
		fglistview : '=',
		message : '@'
	},
	templateUrl : './find-fg-inventory-modal.html',
	controller : 'FindFgInventoryModalController'
};

angular.module('admin.shared').component('findFgInventoryModal', findFgInventoryModal);})(window.angular);
(function(angular){
'use strict';

FindFgInventoryModalController.$inject = ["$state", "FinishedGoodsService", "ProductInventoryService"];
function FindFgInventoryModalController($state, FinishedGoodsService, ProductInventoryService) {
  var ctrl = this;

	ctrl.sortType = 'mis';
	ctrl.sortReverse = false;
  
  
  
  ctrl.selectFG = function(fg){
	  if(ctrl.fglist.indexOf(fg) !== -1){
		  var index = ctrl.fglist.indexOf(fg);
		  ctrl.fglist.splice(index, 1);
		  console.log("splice "+ index);
	  }else{
		  ctrl.fglist.push(fg);
		  console.log("pushed");
	  }
  };
 
  
  
}

angular
  .module('admin.shared')
  .controller('FindFgInventoryModalController', FindFgInventoryModalController);
})(window.angular);
(function(angular){
'use strict';
var findFgModal = {
	bindings : {
		fg : '=',
		message : '@'
	},
	templateUrl : './find-fg-modal.html',
	controller : 'FindFgModalController'
};

angular.module('admin.shared').component('findFgModal', findFgModal);})(window.angular);
(function(angular){
'use strict';

FindFgModalController.$inject = ["$state", "FinishedGoodsService"];
function FindFgModalController($state, FinishedGoodsService) {
  var ctrl = this;
  ctrl.fgList = [];

  ctrl.$onInit = function(){
	loadFg();
	};
	
	ctrl.sortType = 'mis';
	ctrl.sortReverse = false;
  
  
  function loadFg(){
	  ctrl.company = JSON.parse(window.localStorage.getItem('company'));
	  FinishedGoodsService.list().then(function(response){
		  ctrl.fgList = response.data;
		  console.log(JSON.stringify(response.data));
	  });
  }
  
  ctrl.selectFG = function(fg){
	  ctrl.fg = fg;
  };
  
  
}

angular
  .module('admin.shared')
  .controller('FindFgModalController', FindFgModalController);
})(window.angular);
(function(angular){
'use strict';
var findInventoryModal = {
	bindings : {
		issuedinventorylist : '=',
		stockonhand : '=',
		button : '@',
		message : '@'
	},
	templateUrl : './find-inventory-modal.html',
	controller : 'FindInventoryModalController'
};

angular.module('admin.shared').component('findInventoryModal', findInventoryModal);})(window.angular);
(function(angular){
'use strict';

FindInventoryModalController.$inject = ["$state", "InventoryService", "$rootScope"];
function FindInventoryModalController($state, InventoryService, $rootScope) {
  var ctrl = this;
  ctrl.issuedlist = [];
  ctrl.issuedinventorylist = [];
  ctrl.stockonhand = [];
  
	ctrl.sortType = 'controlNumber';
	ctrl.sortReverse = false;
  
  ctrl.$onInit = function(){
	  ctrl.company = $rootScope.selectedCompany;
	  InventoryService.listByCompany(ctrl.company.id).then(function(response){
		  ctrl.inventorylist = response.data;
		  console.log(JSON.stringify(ctrl.inventorylist));
	  });  
  };
  
  ctrl.selectInventory = function(inventory){
	  if(ctrl.issuedlist.indexOf(inventory) !== -1){
		  var index = ctrl.issuedlist.indexOf(inventory);
		  ctrl.issuedlist.splice(index, 1);
		  ctrl.issuedinventorylist.splice(index, 1);
		  ctrl.stockonhand.splice(index, 1);
	  }else{
		  ctrl.issuedlist.push(inventory);
		  ctrl.issuedinventorylist.push(
				  {
					  item:inventory.item,
					  controlNumber:inventory.controlNumber,
					  quantity:0
				  }
		  );
		  ctrl.stockonhand.push(inventory.quantity);
		  console.log(ctrl.stockonhand);
	  }
	  
  };
}

angular
  .module('admin.shared')
  .controller('FindInventoryModalController', FindInventoryModalController);
})(window.angular);
(function(angular){
'use strict';
var findItemModal = {
	bindings : {
		itemlist: '=',
		button : '@',
		message : '@',
		onSubmit: '&'
	},
	templateUrl : './find-item-modal.html',
	controller : 'FindItemModalController'
};

angular.module('admin.shared').component('findItemModal', findItemModal);})(window.angular);
(function(angular){
'use strict';

FindItemModalController.$inject = ["$state", "ItemsService", "PurchaseRequestsService", "PurchaseOrdersService", "ReceivingReceiptsService", "InventoryService", "$rootScope", "_"];
function FindItemModalController($state, ItemsService, PurchaseRequestsService, PurchaseOrdersService, ReceivingReceiptsService, InventoryService, $rootScope, _) {
  var ctrl = this;
  ctrl.rawItems = [];
  ctrl.packagingItems = [];
  ctrl.itemsWithDetails = [];
  ctrl.packagingItemsWithDetails = [];
  ctrl.rawItemList = [];
  ctrl.packagingItemList = [];
  
  ctrl.$onInit = function(){
	ctrl.itemlist = [];
	ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
	console.log(window.location.href);
	if(window.location.href.includes("eng")){
		loadEngineeringItems();
		ctrl.engineering = true;
	}else{
		loadItems();
	}
  };
  
  function loadEngineeringItems(){
	  ctrl.company = $rootScope.selectedCompany;
	  ItemsService.listEngineering().then(function(response){
		  ctrl.items = response.data;
		  for(var i = 0; i < ctrl.items.length; i++){
			  (function(i){
				  ctrl.itemsWithDetails.push({
					  item:ctrl.items[i], 
					  stockOnHand:0,
					  pendingPrf:0,
					  pendingPo:0,
					  pendingRr:0
				  });
				  var itemId = ctrl.items[i].id;
				  InventoryService.getStockQuantityOfItem(itemId, ctrl.company.id).then(function(response){
					  ctrl.itemsWithDetails[i].stockOnHand = response.data;
				  });
				  PurchaseRequestsService.getPrfQuantityOfItem(itemId, ctrl.company.id).then(function(response){
					  ctrl.itemsWithDetails[i].pendingPrf = response.data;
					  console.log("pending" + ctrl.itemsWithDetails[i].pendingPrf);
				  });
				  PurchaseOrdersService.getPurchaseOrderQuantity(itemId, ctrl.company.id).then(function(response){
					  ctrl.itemsWithDetails[i].pendingPo = response.data;
				  });
				  ReceivingReceiptsService.getQuarantinedQuantityOfItem(itemId, ctrl.company.id).then(function(response){
					  ctrl.itemsWithDetails[i].pendingRr = response.data;
				  });
			  })(i);
		  }
	  });
  }
  
  function loadItems(){
	  ctrl.company = $rootScope.selectedCompany;
	  ItemsService.list().then(function(response){
		  ctrl.items = response.data;
		  for(var i = 0; i < ctrl.items.length; i++){
			  (function(i){
				  ctrl.itemsWithDetails.push({
					  item:ctrl.items[i], 
					  stockOnHand:0,
					  pendingPrf:0,
					  pendingPo:0,
					  pendingRr:0
				  });
				  var itemId = ctrl.items[i].id;
				  InventoryService.getStockQuantityOfItem(itemId, ctrl.company.id).then(function(response){
					  ctrl.itemsWithDetails[i].stockOnHand = response.data;
				  });
				  PurchaseRequestsService.getPrfQuantityOfItem(itemId, ctrl.company.id).then(function(response){
					  ctrl.itemsWithDetails[i].pendingPrf = response.data;
					  console.log("pending" + ctrl.itemsWithDetails[i].pendingPrf);
				  });
				  PurchaseOrdersService.getPurchaseOrderQuantity(itemId, ctrl.company.id).then(function(response){
					  ctrl.itemsWithDetails[i].pendingPo = response.data;
				  });
				  ReceivingReceiptsService.getQuarantinedQuantityOfItem(itemId, ctrl.company.id).then(function(response){
					  ctrl.itemsWithDetails[i].pendingRr = response.data;
				  });
			  })(i);
		  }
	  });
	  
	  
  }
  
  
  ctrl.isItemPresent = function(item){
	  for(var i = 0; i < ctrl.itemlist.length; i++){
		  if(ctrl.itemlist[i].item.id == item.item.id){
			  return i;
		  }
	  }
	  
	  return -1;
  };
  /*
  function loadRawItems(){
	  ctrl.company = $rootScope.selectedCompany;
	  ItemsService.listRaw().then(function(response){
		  ctrl.rawItems = response.data;
		  for(var i = 0; i < ctrl.rawItems.length; i++){
			  (function(i){
				  ctrl.rawItemsWithDetails.push({
						  rawItem:ctrl.rawItems[i], 
						  stockOnHand:0,
						  pendingPrf:0,
						  pendingPo:0,
						  pendingRr:0
				  });
				  var itemId = ctrl.rawItems[i].id;
				  InventoryService.getStockQuantityOfItem(itemId, ctrl.company.id).then(function(response){
					  ctrl.rawItemsWithDetails[i].stockOnHand = response.data;
				  });
				  PurchaseRequestsService.getPrfQuantityOfItem(itemId, ctrl.company.id).then(function(response){
					  ctrl.rawItemsWithDetails[i].pendingPrf = response.data;
					  console.log("pending" + ctrl.rawItemsWithDetails[i].pendingPrf);
				  });
				  PurchaseOrdersService.getPurchaseOrderQuantity(itemId, ctrl.company.id).then(function(response){
					  ctrl.rawItemsWithDetails[i].pendingPo = response.data;
				  });
				  ReceivingReceiptsService.getQuarantinedQuantityOfItem(itemId, ctrl.company.id).then(function(response){
					  ctrl.rawItemsWithDetails[i].pendingRr = response.data;
				  });
			  })(i);
		  } 
	  });
  }
  
  function loadPackagingItems(){
	  ItemsService.listPackaging().then(function(response){
		  ctrl.packagingItems = response.data;
		  for(var i = 0; i < ctrl.packagingItems.length; i++){
			  (function(i){
				  ctrl.packagingItemsWithDetails.push({
						  packagingItem:ctrl.packagingItems[i], 
						  stockOnHand:0,
						  pendingPrf:0,
						  pendingPo:0,
						  pendingRr:0
				  });
				  var itemId = ctrl.packagingItems[i].id;
				  InventoryService.getStockQuantityOfItem(itemId, ctrl.company.id).then(function(response){
					  ctrl.packagingItemsWithDetails[i].stockOnHand = response.data;
				  });
				  PurchaseRequestsService.getPrfQuantityOfItem(itemId, ctrl.company.id).then(function(response){
					  ctrl.packagingItemsWithDetails[i].pendingPrf = response.data;
				  });
				  PurchaseOrdersService.getPurchaseOrderQuantity(itemId, ctrl.company.id).then(function(response){
					  ctrl.packagingItemsWithDetails[i].pendingPo = response.data;
				  });
				  ReceivingReceiptsService.getQuarantinedQuantityOfItem(itemId, ctrl.company.id).then(function(response){
					  ctrl.packagingItemsWithDetails[i].pendingRr = response.data;
				  });
			  })(i);
		  }
	  });
	  
	  
  }
  */
  
  ctrl.getItem = function(item){
	  if(ctrl.isItemPresent(item) !== -1){
			var index = ctrl.isItemPresent(item);
			ctrl.itemlist.splice(index, 1);
		}else{
			ctrl.itemlist.push(item);
		}
  };
  /*
  ctrl.getRawItem = function(item){
	if(ctrl.rawItemList.indexOf(item) !== -1){
		var index = ctrl.rawItemList.indexOf(item);
		ctrl.rawItemList.splice(index, 1);
		var index2 = ctrl.itemlist.indexOf(item);
		ctrl.itemlist.splice(index2, 1);
	}else{
		ctrl.itemlist.push(item);
		ctrl.rawItemList.push(item);
	}
  };
*/
  ctrl.onButtonSelect = function() {
	  console.log("on-submit");
	ctrl.onSubmit({
		$event: {
		
		}
	  });
  }
  /*
  ctrl.getPackagingItem = function(item){
	if(ctrl.packagingItemList.indexOf(item) !== -1){
		var index = ctrl.packagingItemList.indexOf(item);
		ctrl.packagingItemList.splice(index, 1);
		var index2 = ctrl.itemlist.indexOf(item);
		ctrl.itemlist.splice(index2, 1);
	}else{
		ctrl.itemlist.push(item);
		ctrl.packagingItemList.push(item);
	}
  };*/
}

angular
  .module('admin.shared')
  .controller('FindItemModalController', FindItemModalController);
})(window.angular);
(function(angular){
'use strict';
var findMaterialIssuanceModal = {
	bindings : {
		mis : '=',
		message : '@'
	},
	templateUrl : './find-mis-modal.html',
	controller : 'FindMaterialIssuanceModalController'
};

angular.module('admin.shared').component('findMaterialIssuanceModal', findMaterialIssuanceModal);})(window.angular);
(function(angular){
'use strict';

FindMaterialIssuanceModalController.$inject = ["$state", "MaterialIssuancesService"];
function FindMaterialIssuanceModalController($state, MaterialIssuancesService) {
  var ctrl = this;
  ctrl.misList = [];
  ctrl.issuedlist = [];
  ctrl.$onInit = function(){
	loadMaterialIssuance();
	};
	
	ctrl.sortType = 'mis';
	ctrl.sortReverse = false;
  
  
  function loadMaterialIssuance(){
	  ctrl.company = JSON.parse(window.localStorage.getItem('company'));
	  MaterialIssuancesService.listByStatus("Pending").then(function(response){
		  ctrl.misList = response.data;
		  console.log("response" + JSON.stringify(ctrl.misList));
	  });
  }
  
  ctrl.selectMIS = function(mis){
	  ctrl.mis = mis;
  };
  
  
}

angular
  .module('admin.shared')
  .controller('FindMaterialIssuanceModalController', FindMaterialIssuanceModalController);
})(window.angular);
(function(angular){
'use strict';
var findProductInventoryModal = {
	bindings : {
		inventorylist: '=',
		issuedinventorylist : '=',
		stockonhand : '=',
		button : '@',
		message : '@'
	},
	templateUrl : './find-product-inventory-modal.html',
	controller : 'FindProductInventoryModalController'
};

angular.module('admin.shared').component('findProductInventoryModal', findProductInventoryModal);})(window.angular);
(function(angular){
'use strict';

FindProductInventoryModalController.$inject = ["$state", "InventoryService", "$rootScope"];
function FindProductInventoryModalController($state, InventoryService, $rootScope) {
  var ctrl = this;
  ctrl.issuedlist = [];
  
	ctrl.sortType = 'controlNumber';
	ctrl.sortReverse = false;
  
  ctrl.selectInventory = function(inventory){
	  if(ctrl.issuedlist.indexOf(inventory) !== -1){
		  var index = ctrl.issuedlist.indexOf(inventory);
		  ctrl.issuedlist.splice(index, 1);
		  ctrl.issuedinventorylist.splice(index, 1);
		  ctrl.stockonhand.splice(index, 1);
	  }else{
		  ctrl.issuedlist.push(inventory);
		  ctrl.issuedinventorylist.push(
				  {
					  product: inventory.product,
					  quantity:0
				  }
		  );
		  ctrl.stockonhand.push(inventory.quantity);
		  console.log(ctrl.stockonhand);
	  }
	  
  };
}

angular
  .module('admin.shared')
  .controller('FindProductInventoryModalController', FindProductInventoryModalController);
})(window.angular);
(function(angular){
'use strict';
var findProductModal = {
	bindings : {
		productlist: '=',
		issuedlist:'=',
		stockonhand: '=',
		message : '@'
	},
	templateUrl : './find-product-modal.html',
	controller : 'FindProductModalController'
};

angular.module('admin.shared').component('findProductModal', findProductModal);})(window.angular);
(function(angular){
'use strict';

FindProductModalController.$inject = ["$state", "ProductInventoryService"];
function FindProductModalController($state, ProductInventoryService) {
  var ctrl = this;
  
  ctrl.products = [];
  ctrl.issuedlist = [];
  ctrl.productlist = [];
  ctrl.stockonhand = [];
  ctrl.issuedproductlist = [];

  ctrl.$onInit = function() {
	  
  }
  
  ctrl.selectProduct = function(productInventory){
	  
	  if(ctrl.issuedproductlist.indexOf(productInventory.product) !== -1){
		  var index = ctrl.issuedlist.indexOf(productInventory.product);
		  ctrl.issuedlist.splice(index, 1);
		  ctrl.stockonhand.splice(index, 1);
		  ctrl.issuedproductlist.splice(index, 1);
	  }else{
		  ctrl.issuedproductlist.push(productInventory.product);
		  ctrl.issuedlist.push(
				  {
					  product:productInventory.product,
					  quantity:0
				  });
		  ctrl.stockonhand.push(productInventory.quantity);
		  console.log(ctrl.stockonhand);
	  }
  };

  
}

angular
  .module('admin.shared')
  .controller('FindProductModalController', FindProductModalController);
})(window.angular);
(function(angular){
'use strict';
var findPurchaseOrderModal = {
	bindings : {
		po : '=',
		receiveditems: '=',
		receiveditemsview: '=',
		button : '@',
		message : '@'
	},
	templateUrl : './find-purchase-order-modal.html',
	controller : 'FindPurchaseOrderModalController'
};

angular.module('admin.shared').component('findPurchaseOrderModal', findPurchaseOrderModal);})(window.angular);
(function(angular){
'use strict';

FindPurchaseOrderModalController.$inject = ["$state", "ReceivingReceiptsService", "PurchaseOrdersService", "$rootScope"];
function FindPurchaseOrderModalController($state, ReceivingReceiptsService, PurchaseOrdersService, $rootScope) {
  var ctrl = this;
  ctrl.purchaseOrders = [];
  ctrl.sortType = 'number';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function(){
	loadPurchaseOrders();
	ctrl.receiveditemsview = [];
	ctrl.receiveditems = [];
  };
  
  
  function loadPurchaseOrders(){
	  ctrl.company = $rootScope.selectedCompany;
	  PurchaseOrdersService.listNotCompletedByCompany(ctrl.company.id).then(function(response){
		  ctrl.purchaseOrders = response.data;
		  console.log("response" + JSON.stringify(ctrl.purchaseOrders));
	  });
  }
  
  
  ctrl.getPurchaseOrder = function(po){
	ctrl.po = po;  
	ctrl.receiveditems = [];
	ctrl.receiveditemsview = [];
	for(var i = 0; i < po.orderedItems.length; i++){
		(function(i){
		if(po.orderedItems[i].status != "Completed"){
			ctrl.receiveditems.push({
			quantity:0,
			item:po.orderedItems[i].item,
			unit:po.orderedItems[i].unit
			});
			
			ReceivingReceiptsService.getQuarantinedQuantityOfItem(po.orderedItems[i].item.id, ctrl.company.id).then(function(response){
				ctrl.receiveditemsview.push({
					prfNumber:po.orderedItems[i].prfNumber,
					item:po.orderedItems[i].item,
					quantityOrdered:po.orderedItems[i].quantity,
					pendingRr: response.data
					});
		    });
			
		}
	  })(i);
	}
	
	
  };
}

angular
  .module('admin.shared')
  .controller('FindPurchaseOrderModalController', FindPurchaseOrderModalController);
})(window.angular);
(function(angular){
'use strict';
var findRequestedItemsModal = {
	bindings : {
		ordereditems : '=',
		button : '@',
		message : '@'
	},
	templateUrl : './find-requested-items-modal.html',
	controller : 'FindRequestedItemsModalController'
};

angular.module('admin.shared').component('findRequestedItemsModal', findRequestedItemsModal);})(window.angular);
(function(angular){
'use strict';

FindRequestedItemsModalController.$inject = ["$state", "PurchaseRequestsService"];
function FindRequestedItemsModalController($state, PurchaseRequestsService) {
  var ctrl = this;
  ctrl.requestedItems = [];
  ctrl.selectedItems = [];
  ctrl.ordereditems = [];
  ctrl.$onInit = function(){
	ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
	if(ctrl.user.department.name === "Engineering"){
		loadEngineeringPurchaseRequests();
	}else{
		loadPurchaseRequests();
	}
	
  };
	
	ctrl.sortType = 'number';
	ctrl.sortReverse = false;
  
  function loadEngineeringPurchaseRequests(){
	  ctrl.company = JSON.parse(window.localStorage.getItem('company'));
	  PurchaseRequestsService.getRequestedItemsByCompanyAndType(ctrl.company.id, "ENG").then(function(response){
		  ctrl.requestedItems = response.data;
		  console.log(JSON.stringify(response.data));
	  });
  }
  
  function loadPurchaseRequests(){
	  console.log("HELLO");
	  ctrl.company = JSON.parse(window.localStorage.getItem('company'));
	  PurchaseRequestsService.getRequestedItemsByCompany(ctrl.company.id).then(function(response){
		  ctrl.requestedItems = response.data;
		  console.log(JSON.stringify(response.data));
	  });
  }
  
  
  ctrl.selectRequestedItem = function(requestedItem){
	  if(ctrl.selectedItems.indexOf(requestedItem) !== -1){
		  var index = ctrl.selectedItems.indexOf(requestedItem);
		  ctrl.selectedItems.splice(index, 1);
		  
		  ctrl.ordereditems.splice(index, 1);
		  
	  }else{
		  ctrl.selectedItems.push(requestedItem);
		  ctrl.ordereditems.push(
				  {
					  item:requestedItem.item,
					  quantity:requestedItem.quantityRequested,
					  unitPrice:0,
					  amount:0,
					  prfNumber:requestedItem.prfNumber,
					  unit: requestedItem.unit,
					  requestedItemId: requestedItem.id
				  }
		  );
	  }
	  
  };
}

angular
  .module('admin.shared')
  .controller('FindRequestedItemsModalController', FindRequestedItemsModalController);
})(window.angular);
(function(angular){
'use strict';
var findSalesSlipModal = {
	bindings : {
		ss : '=',
		salesslips: '=',
		button : '@',
		message : '@'
	},
	templateUrl : './find-sales-slip-modal.html',
	controller : 'FindSalesSlipModalController'
};

angular.module('admin.shared').component('findSalesSlipModal', findSalesSlipModal);})(window.angular);
(function(angular){
'use strict';

FindSalesSlipModalController.$inject = ["$state", "SalesOrdersService", "$rootScope"];
function FindSalesSlipModalController($state, SalesOrdersService, $rootScope) {
  var ctrl = this;
  ctrl.salesOrders = [];
  ctrl.sortType = 'number';
  ctrl.sortReverse = false;
  
  
  ctrl.getSalesSlip = function(ss){
	ctrl.ss = ss;  
  };
}

angular
  .module('admin.shared')
  .controller('FindSalesSlipModalController', FindSalesSlipModalController);
})(window.angular);
(function(angular){
'use strict';
var findSoModal = {
	bindings : {
		so : '=',
		salesorders: '=',
		button : '@',
		message : '@',
		onSubmit: '&'
	},
	templateUrl : './find-so-modal.html',
	controller : 'FindSoModalController'
};

angular.module('admin.shared').component('findSoModal', findSoModal);})(window.angular);
(function(angular){
'use strict';

FindSoModalController.$inject = ["$state", "ReceivingReceiptsService", "SalesOrdersService", "$rootScope"];
function FindSoModalController($state, ReceivingReceiptsService, SalesOrdersService, $rootScope) {
  var ctrl = this;
  ctrl.salesOrders = [];
  ctrl.sortType = 'number';
  ctrl.sortReverse = false;
  
  
  ctrl.getSalesOrder = function(so){
	ctrl.so = so;  
  };
}

angular
  .module('admin.shared')
  .controller('FindSoModalController', FindSoModalController);
})(window.angular);
(function(angular){
'use strict';
var findVendorModal = {
	bindings : {
		vendor : '=',
		button : '@',
		message : '@'
	},
	templateUrl : './find-vendor-modal.html',
	controller : 'FindVendorModalController'
};

angular.module('admin.shared').component('findVendorModal', findVendorModal);})(window.angular);
(function(angular){
'use strict';

FindVendorModalController.$inject = ["$state", "VendorsService", "$rootScope"];
function FindVendorModalController($state, VendorsService, $rootScope) {
  var ctrl = this;
  ctrl.vendors = [];
  ctrl.sortType = 'number';
	ctrl.sortReverse = false;
  
  ctrl.$onInit = function(){
	loadVendors();
  };
  
  
  function loadVendors(){
	  ctrl.company = $rootScope.selectedCompany;
	  VendorsService.listByCompany(ctrl.company.id).then(function(response){
		  ctrl.vendors = response.data;
		  console.log("response" + JSON.stringify(ctrl.vendors));
	  });
  }
  
  
  ctrl.getVendor = function(vendor){
	ctrl.vendor = vendor;  
  };
}

angular
  .module('admin.shared')
  .controller('FindVendorModalController', FindVendorModalController);
})(window.angular);
(function(angular){
'use strict';
var itemSalesReport = {
	templateUrl : './item-sales-report.html',
	controller : 'itemSalesReportController'
};

angular.module('admin.shared')
.component('itemSalesReport', itemSalesReport)
.config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('item-sales-report', {
        url: '/admin/shared/item-sales-report/depot/:depotId/start/:startDate/end/:endDate/item/:itemId',
		component: 'itemSalesReport',
		params: {
			startDate: null,
			endDate: null,
			depotId: null,
			itemId: null
		}
	  });
	}]);
})(window.angular);
(function(angular){
'use strict';

ItemSalesReportController.$inject = ["$state", "SalesReportsService", "$stateParams", "$rootScope"];
function ItemSalesReportController($state, SalesReportsService, $stateParams, $rootScope) {
  var ctrl = this;
  
  
  ctrl.$onInit = function(){
	  ctrl.company = $rootScope.selectedCompany;
	  ctrl.startDate = new Date($stateParams.startDate.replace(/['"]+/g, ''));
	  ctrl.endDate = new Date($stateParams.endDate.replace(/['"]+/g, ''));
	  //ctrl.dates = ctrl.startDate + " to " + ctrl.endDate;
	  ctrl.dates = ctrl.startDate.getFullYear() + "-" + (ctrl.startDate.getMonth() + 1) + "-" + ctrl.startDate.getDate() + " to "+
			  ctrl.endDate.getFullYear() + "-" + (ctrl.endDate.getMonth() + 1) + "-" + ctrl.endDate.getDate();
	  console.log($stateParams.startDate);
		  ctrl.reportType = "Item Sales Report (Item)";
		  console.log(new Date($stateParams.startDate));
		  SalesReportsService.itemSalesReport(ctrl.depot.id, new Date($stateParams.startDate.replace(/['"]+/g, '')), new Date($stateParams.endDate.replace(/['"]+/g, '')), $stateParams.itemId).then(function(response){
			  console.log(response.data);
			  ctrl.entries = response.data;
		  }).then(() => {
			    setTimeout(function(){
			        window.print();
			        window.close();
			      }, 1500);
			    });
	 
  };
  
  ctrl.months = ["Jan", "Feb", "Mar", "Apr", "Jun" , "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
 
  ctrl.range = function(min, max, step) {
	    step = step || 1;
	    var input = [];
	    for (var i = min; i <= max; i += step) {
	        input.push(i);
	    }
	    return input;
	};
}

angular
  .module('admin.shared')
  .controller('ItemSalesReportController', ItemSalesReportController);
})(window.angular);
(function(angular){
'use strict';
var printFgReport = {
	templateUrl : './print-fg-report.html',
	controller : 'PrintFgReportController'
};

angular.module('admin.shared')
.component('printFgReport', printFgReport)
.config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('print-fg-report', {
        url: '/admin/shared/print-fg-report/:depotId',
		component: 'printFgReport',
		params: {
			depotId: null
		}
	  });
	}]);
})(window.angular);
(function(angular){
'use strict';

PrintFgReportController.$inject = ["$state", "ProductInventoryService", "DepotsService", "$stateParams", "$rootScope"];
function PrintFgReportController($state, ProductInventoryService, DepotsService, $stateParams, $rootScope) {
  var ctrl = this;
  
  
  ctrl.$onInit = function(){
	  ctrl.company = $rootScope.selectedCompany;
	  //ctrl.dates = ctrl.startDate + " to " + ctrl.endDate;
	  DepotsService.get($stateParams.depotId).then(function(response){
		  ctrl.reportType = "Finished Goods Summary Report";
		  ctrl.dates = response.data.name;
		  ProductInventoryService.listProductInventoryDepotReport(ctrl.company.id, response.data.id).then(function(response){
			  console.log(response.data);
			  ctrl.entries = response.data;
		  }).then(() => {
			    setTimeout(function(){
			        window.print();
			        window.close();
			      }, 1500);
			    });
	 
	  });
	  
	  
  };
 
}

angular
  .module('admin.shared')
  .controller('PrintFgReportController', PrintFgReportController);
})(window.angular);
(function(angular){
'use strict';
var findSoProductModal = {
	bindings : {
		products : '=',
		inventorylist: '=',
		button : '@',
		message : '@'
	},
	templateUrl : './find-so-product-modal.html',
	controller : 'FindSoProductModalController'
};

angular.module('admin.shared').component('findSoProductModal', findSoProductModal);})(window.angular);
(function(angular){
'use strict';

FindSoProductModalController.$inject = ["$state", "SalesOrdersService", "$rootScope"];
function FindSoProductModalController($state, SalesOrdersService, $rootScope) {
  var ctrl = this;
  
  ctrl.selectSoProduct = function(inventory){
	  if(ctrl.isProductPresent(inventory) !== -1){
		  var index = ctrl.isProductPresent(inventory);
		  ctrl.products.splice(index, 1);
	  }else{
		  ctrl.products.push({
			  product: inventory.product,
			  quantity: inventory.quantity,
			  unitPrice: 0,
			  salesOrderProductId: inventory.id
			  });
	  }
	  
  };
  
  ctrl.isProductPresent = function(inventory){
	  for(var i = 0; i < ctrl.products.length; i++){
		  if(ctrl.products[i].product.id == inventory.product.id){
			  return i;
		  }
	  }
	  return -1;
  }
}

angular
  .module('admin.shared')
  .controller('FindSoProductModalController', FindSoProductModalController);
})(window.angular);
(function(angular){
'use strict';
var printJournalReport = {
	templateUrl : './print-journal-report.html',
	controller : 'PrintJournalReportController'
};

angular.module('admin.shared')
.component('printJournalReport', printJournalReport)
.config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('print-journal-report', {
        url: '/admin/shared/print-journal-report/start/:startDate/end/:endDate',
		component: 'printJournalReport',
		params: {
			startDate: null,
			endDate: null
		}
	  });
	}]);
})(window.angular);
(function(angular){
'use strict';

PrintJournalReportController.$inject = ["$state", "JournalVouchersService", "DepotsService", "$stateParams", "$rootScope"];
function PrintJournalReportController($state, JournalVouchersService, DepotsService, $stateParams, $rootScope) {
  var ctrl = this;
  
  
  ctrl.$onInit = function(){
	  ctrl.company = $rootScope.selectedCompany;
	  ctrl.startDate = new Date($stateParams.startDate.replace(/['"]+/g, ''));
	  ctrl.endDate = new Date($stateParams.endDate.replace(/['"]+/g, ''));
	  //ctrl.dates = ctrl.startDate + " to " + ctrl.endDate;
	  ctrl.dates = ctrl.startDate.getFullYear() + "-" + (ctrl.startDate.getMonth() + 1) + "-" + ctrl.startDate.getDate() + " to "+
			  ctrl.endDate.getFullYear() + "-" + (ctrl.endDate.getMonth() + 1) + "-" + ctrl.endDate.getDate();
	  console.log($stateParams.startDate);
		  ctrl.reportType = "General Journal Report";
		  console.log(new Date($stateParams.startDate));
		  JournalVouchersService.getJournalReport(ctrl.company.id, new Date($stateParams.startDate.replace(/['"]+/g, '')), new Date($stateParams.endDate.replace(/['"]+/g, ''))).then(function(response){
			  console.log(response.data);
			  ctrl.entries = response.data;
		  }).then(() => {
			    setTimeout(function(){
			        window.print();
			        window.close();
			      }, 1500);
			    });
	  
  };
 
}

angular
  .module('admin.shared')
  .controller('PrintJournalReportController', PrintJournalReportController);
})(window.angular);
(function(angular){
'use strict';
var printCrvReport = {
	templateUrl : './print-crv-report.html',
	controller : 'PrintCrvReportController'
};

angular.module('admin.shared')
.component('printCrvReport', printCrvReport)
.config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('print-crv-report', {
        url: '/admin/shared/print-crv-report/start/:startDate/end/:endDate',
		component: 'printCrvReport',
		params: {
			startDate: null,
			endDate: null
		}
	  });
	}]);
})(window.angular);
(function(angular){
'use strict';

PrintCrvReportController.$inject = ["$state", "CashReceiptVouchersService", "InventoryService", "$stateParams", "$rootScope"];
function PrintCrvReportController($state, CashReceiptVouchersService, InventoryService, $stateParams, $rootScope) {
  var ctrl = this;
  
  
  ctrl.$onInit = function(){
	  ctrl.company = $rootScope.selectedCompany;
	  ctrl.startDate = new Date($stateParams.startDate.replace(/['"]+/g, ''));
	  ctrl.endDate = new Date($stateParams.endDate.replace(/['"]+/g, ''));
	  //ctrl.dates = ctrl.startDate + " to " + ctrl.endDate;
	  ctrl.dates = ctrl.startDate.getFullYear() + "-" + (ctrl.startDate.getMonth() + 1) + "-" + ctrl.startDate.getDate() + " to "+
			  ctrl.endDate.getFullYear() + "-" + (ctrl.endDate.getMonth() + 1) + "-" + ctrl.endDate.getDate();
	  console.log($stateParams.startDate);
		  ctrl.reportType = "Cash Receipt Voucher Report";
		  console.log(new Date($stateParams.startDate));
		  CashReceiptVouchersService.getByCompanyAndDates(ctrl.company.id, new Date($stateParams.startDate.replace(/['"]+/g, '')), new Date($stateParams.endDate.replace(/['"]+/g, ''))).then(function(response){
			  console.log(response.data);
			  ctrl.entries = response.data;
		  }).then(() => {
			    setTimeout(function(){
			        window.print();
			        window.close();
			      }, 1500);
			    });
	 
  };
 
}

angular
  .module('admin.shared')
  .controller('PrintCrvReportController', PrintCrvReportController);
})(window.angular);
(function(angular){
'use strict';
var printJournalVoucher = {
	templateUrl : './print-journal-voucher.html',
	controller : 'PrintJournalVoucherController'
};

angular.module('admin.shared')
.component('printJournalVoucher', printJournalVoucher)
.config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('print-journal-voucher', {
        url: '/admin/shared/print-journal-voucher/:journalVoucherId',
		component: 'printJournalVoucher',
		params: {
			journalVoucherId: null
		}
	  });
	}]);
})(window.angular);
(function(angular){
'use strict';

PrintJournalVoucherController.$inject = ["$state", "JournalVouchersService", "$stateParams", "$rootScope"];
function PrintJournalVoucherController($state, JournalVouchersService, $stateParams, $rootScope) {
  var ctrl = this;
  
  console.log("journalVoucherId", $stateParams.journalVoucherId);
  
  JournalVouchersService.get($stateParams.journalVoucherId).then(function(res) {
    ctrl.jv = res.data;
    ctrl.approvedBy = ctrl.jv.approvedBy != null ? ctrl.jv.approvedBy.firstName + " " + ctrl.jv.approvedBy.lastName : "";
    ctrl.preparedBy = ctrl.jv.preparedBy.firstName + " " + ctrl.jv.preparedBy.lastName;
  }).then(() => {
    setTimeout(function(){
      window.print();
      window.close();
    }, 0);
  });;
}

angular
  .module('admin.shared')
  .controller('PrintJournalVoucherController', PrintJournalVoucherController);
})(window.angular);
(function(angular){
'use strict';

PrintOsdrReportController.$inject = ["$state", "SalesSlipsService", "$stateParams", "$rootScope"];
function PrintOsdrReportController($state, SalesSlipsService, $stateParams, $rootScope) {
  var ctrl = this;
  
  
  ctrl.$onInit = function(){
	  ctrl.company = $rootScope.selectedCompany;
	  ctrl.startDate = new Date($stateParams.startDate.replace(/['"]+/g, ''));
	  ctrl.endDate = new Date($stateParams.endDate.replace(/['"]+/g, ''));
	  //ctrl.dates = ctrl.startDate + " to " + ctrl.endDate;
	  ctrl.dates = ctrl.startDate.getFullYear() + "-" + (ctrl.startDate.getMonth() + 1) + "-" + ctrl.startDate.getDate() + " to "+
			  ctrl.endDate.getFullYear() + "-" + (ctrl.endDate.getMonth() + 1) + "-" + ctrl.endDate.getDate();
	  console.log($stateParams.startDate);
		  ctrl.reportType = "OS/DR Summary Report";
		  console.log(new Date($stateParams.startDate));
		  SalesSlipsService.getByDepotAndDates($stateParams.depotId, new Date($stateParams.startDate.replace(/['"]+/g, '')), new Date($stateParams.endDate.replace(/['"]+/g, ''))).then(function(response){
			  console.log(response.data);
			  ctrl.entries = response.data;
		  }).then(() => {
			    setTimeout(function(){
			        window.print();
			        window.close();
			      }, 1500);
			    });
	 
  };
 
}

angular
  .module('admin.shared')
  .controller('PrintOsdrReportController', PrintOsdrReportController);
})(window.angular);
(function(angular){
'use strict';
var printOsdrReport = {
	templateUrl : './print-osdr-report.html',
	controller : 'PrintOsdrReportController'
};

angular.module('admin.shared')
.component('printOsdrReport', printOsdrReport)
.config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('print-osdr-report', {
        url: '/admin/shared/print-osdr-report/depot/:depotId/start/:startDate/end/:endDate',
		component: 'printOsdrReport',
		params: {
			depotId:null,
			startDate: null,
			endDate: null
		}
	  });
	}]);
})(window.angular);
(function(angular){
'use strict';
var printJvReport = {
	templateUrl : './print-jv-report.html',
	controller : 'PrintJvReportController'
};

angular.module('admin.shared')
.component('printJvReport', printJvReport)
.config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('print-jv-report', {
        url: '/admin/shared/print-jv-report/start/:startDate/end/:endDate',
		component: 'printJvReport',
		params: {
			startDate: null,
			endDate: null
		}
	  });
	}]);
})(window.angular);
(function(angular){
'use strict';

PrintJvReportController.$inject = ["$state", "JournalVouchersService", "InventoryService", "$stateParams", "$rootScope"];
function PrintJvReportController($state, JournalVouchersService, InventoryService, $stateParams, $rootScope) {
  var ctrl = this;
  
  
  ctrl.$onInit = function(){
	  ctrl.company = $rootScope.selectedCompany;
	  ctrl.startDate = new Date($stateParams.startDate.replace(/['"]+/g, ''));
	  ctrl.endDate = new Date($stateParams.endDate.replace(/['"]+/g, ''));
	  //ctrl.dates = ctrl.startDate + " to " + ctrl.endDate;
	  ctrl.dates = ctrl.startDate.getFullYear() + "-" + (ctrl.startDate.getMonth() + 1) + "-" + ctrl.startDate.getDate() + " to "+
			  ctrl.endDate.getFullYear() + "-" + (ctrl.endDate.getMonth() + 1) + "-" + ctrl.endDate.getDate();
	  console.log($stateParams.startDate);
		  ctrl.reportType = "Journal Voucher Report";
		  console.log(new Date($stateParams.startDate));
		  JournalVouchersService.getByCompanyAndDates(ctrl.company.id, new Date($stateParams.startDate.replace(/['"]+/g, '')), new Date($stateParams.endDate.replace(/['"]+/g, ''))).then(function(response){
			  console.log(response.data);
			  ctrl.entries = response.data;
		  }).then(() => {
			    setTimeout(function(){
			        window.print();
			        window.close();
			      }, 1500);
			    });
	 
  };
 
}

angular
  .module('admin.shared')
  .controller('PrintJvReportController', PrintJvReportController);
})(window.angular);
(function(angular){
'use strict';
var printPjvReport = {
	templateUrl : './print-pjv-report.html',
	controller : 'PrintPjvReportController'
};

angular.module('admin.shared')
.component('printPjvReport', printPjvReport)
.config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('print-pjv-report', {
        url: '/admin/shared/print-pjv-report/start/:startDate/end/:endDate',
		component: 'printPjvReport',
		params: {
			startDate: null,
			endDate: null
		}
	  });
	}]);
})(window.angular);
(function(angular){
'use strict';

PrintPjvReportController.$inject = ["$state", "PurchaseVouchersService", "InventoryService", "$stateParams", "$rootScope"];
function PrintPjvReportController($state, PurchaseVouchersService, InventoryService, $stateParams, $rootScope) {
  var ctrl = this;
  
  
  ctrl.$onInit = function(){
	  ctrl.company = $rootScope.selectedCompany;
	  ctrl.startDate = new Date($stateParams.startDate.replace(/['"]+/g, ''));
	  ctrl.endDate = new Date($stateParams.endDate.replace(/['"]+/g, ''));
	  //ctrl.dates = ctrl.startDate + " to " + ctrl.endDate;
	  ctrl.dates = ctrl.startDate.getFullYear() + "-" + (ctrl.startDate.getMonth() + 1) + "-" + ctrl.startDate.getDate() + " to "+
			  ctrl.endDate.getFullYear() + "-" + (ctrl.endDate.getMonth() + 1) + "-" + ctrl.endDate.getDate();
	  console.log($stateParams.startDate);
		  ctrl.reportType = "Purchase Journal Voucher Report";
		  console.log(new Date($stateParams.startDate));
		  PurchaseVouchersService.getByCompanyAndDates(ctrl.company.id, new Date($stateParams.startDate.replace(/['"]+/g, '')), new Date($stateParams.endDate.replace(/['"]+/g, ''))).then(function(response){
			  console.log(response.data);
			  ctrl.entries = response.data;
		  }).then(() => {
			    setTimeout(function(){
			        window.print();
			        window.close();
			      }, 1500);
			    });
	 
  };
 
}

angular
  .module('admin.shared')
  .controller('PrintPjvReportController', PrintPjvReportController);
})(window.angular);
(function(angular){
'use strict';
var printPdcReport = {
	templateUrl : './print-pdc-report.html',
	controller : 'PrintPdcReportController'
};

angular.module('admin.shared')
.component('printPdcReport', printPdcReport)
.config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('print-pdc-report', {
        url: '/admin/shared/print-pdc-report/start/:startDate/end/:endDate',
		component: 'printPdcReport',
		params: {
			startDate: null,
			endDate: null
		}
	  });
	}]);
})(window.angular);
(function(angular){
'use strict';

PrintPdcReportController.$inject = ["$state", "PdcDisbursementsService", "InventoryService", "$stateParams", "$rootScope"];
function PrintPdcReportController($state, PdcDisbursementsService, InventoryService, $stateParams, $rootScope) {
  var ctrl = this;
  
  
  ctrl.$onInit = function(){
	  ctrl.company = $rootScope.selectedCompany;
	  ctrl.startDate = new Date($stateParams.startDate.replace(/['"]+/g, ''));
	  ctrl.endDate = new Date($stateParams.endDate.replace(/['"]+/g, ''));
	  //ctrl.dates = ctrl.startDate + " to " + ctrl.endDate;
	  ctrl.dates = ctrl.startDate.getFullYear() + "-" + (ctrl.startDate.getMonth() + 1) + "-" + ctrl.startDate.getDate() + " to "+
			  ctrl.endDate.getFullYear() + "-" + (ctrl.endDate.getMonth() + 1) + "-" + ctrl.endDate.getDate();
	  console.log($stateParams.startDate);
		  ctrl.reportType = "Post Dated Cheque Report";
		  console.log(new Date($stateParams.startDate));
		  PdcDisbursementsService.getByCompanyAndDates(ctrl.company.id, new Date($stateParams.startDate.replace(/['"]+/g, '')), new Date($stateParams.endDate.replace(/['"]+/g, ''))).then(function(response){
			  console.log(response.data);
			  ctrl.entries = response.data;
		  }).then(() => {
			    setTimeout(function(){
			        window.print();
			        window.close();
			      }, 1500);
			    });
	 
  };
 
}

angular
  .module('admin.shared')
  .controller('PrintPdcReportController', PrintPdcReportController);
})(window.angular);
(function(angular){
'use strict';
var printPrf = {
	templateUrl : './print-prf.html',
	controller : 'PrintPrfController'
};

angular.module('admin.shared')
.component('printPrf', printPrf)
.config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('print-prf', {
        url: '/admin/shared/print-prf/:prfId',
		component: 'printPrf',
		params: {
			prfId: null
		}
	  });
	}]);
})(window.angular);
(function(angular){
'use strict';

PrintPrfController.$inject = ["$state", "PurchaseRequestsService", "$stateParams", "$rootScope"];
function PrintPrfController($state, PurchaseRequestsService, $stateParams, $rootScope) {
  var ctrl = this;
  
  console.log("prfId", $stateParams.prfId);
  
  PurchaseRequestsService.get($stateParams.prfId).then(function(res) {
    ctrl.prf = res.data;
  }).then(() => {
    setTimeout(function(){
      window.print();
      window.close();
    }, 1500);
  });;
}

angular
  .module('admin.shared')
  .controller('PrintPrfController', PrintPrfController);
})(window.angular);
(function(angular){
'use strict';
var printRsReport = {
	templateUrl : './print-rs-report.html',
	controller : 'PrintRsReportController'
};

angular.module('admin.shared')
.component('printRsReport', printRsReport)
.config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('print-rs-report', {
        url: '/admin/shared/print-rs-report/depot/:depotId/start/:startDate/end/:endDate',
		component: 'printRsReport',
		params: {
			depotId:null,
			startDate: null,
			endDate: null
		}
	  });
	}]);
})(window.angular);
(function(angular){
'use strict';

PrintRsReportController.$inject = ["$state", "ReturnSlipsService", "InventoryService", "$stateParams", "$rootScope"];
function PrintRsReportController($state, ReturnSlipsService, InventoryService, $stateParams, $rootScope) {
  var ctrl = this;
  
  
  ctrl.$onInit = function(){
	  ctrl.company = $rootScope.selectedCompany;
	  ctrl.startDate = new Date($stateParams.startDate.replace(/['"]+/g, ''));
	  ctrl.endDate = new Date($stateParams.endDate.replace(/['"]+/g, ''));
	  //ctrl.dates = ctrl.startDate + " to " + ctrl.endDate;
	  ctrl.dates = ctrl.startDate.getFullYear() + "-" + (ctrl.startDate.getMonth() + 1) + "-" + ctrl.startDate.getDate() + " to "+
			  ctrl.endDate.getFullYear() + "-" + (ctrl.endDate.getMonth() + 1) + "-" + ctrl.endDate.getDate();
	  console.log($stateParams.startDate);
		  ctrl.reportType = "Return Slip Summary Report";
		  console.log(new Date($stateParams.startDate));
		  ReturnSlipsService.getByDepotAndDates($stateParams.depotId, new Date($stateParams.startDate.replace(/['"]+/g, '')), new Date($stateParams.endDate.replace(/['"]+/g, ''))).then(function(response){
			  console.log(response.data);
			  ctrl.entries = response.data;
		  }).then(() => {
			    setTimeout(function(){
			        window.print();
			        window.close();
			      }, 1500);
			    });
	 
  };
 
}

angular
  .module('admin.shared')
  .controller('PrintRsReportController', PrintRsReportController);
})(window.angular);
(function(angular){
'use strict';
var printPurchaseVoucher = {
	templateUrl : './print-purchase-voucher.html',
	controller : 'PrintPurchaseVoucherController'
};

angular.module('admin.shared')
.component('printPurchaseVoucher', printPurchaseVoucher)
.config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('print-purchase-voucher', {
        url: '/admin/shared/print-purchase-voucher/:purchaseVoucherId',
		component: 'printPurchaseVoucher',
		params: {
			purchaseVoucherId: null
		}
	  });
	}]);
})(window.angular);
(function(angular){
'use strict';

PrintPurchaseVoucherController.$inject = ["$state", "PurchaseVouchersService", "$stateParams", "$rootScope"];
function PrintPurchaseVoucherController($state, PurchaseVouchersService, $stateParams, $rootScope) {
  var ctrl = this;
  
  console.log("purchaseVoucherId", $stateParams.purchaseVoucherId);
  
  PurchaseVouchersService.get($stateParams.purchaseVoucherId).then(function(res) {
    ctrl.pv = res.data;
    ctrl.approvedBy = ctrl.pv.approvedBy != null ? ctrl.pv.approvedBy.firstName + " " + ctrl.pv.approvedBy.lastName : "";
    ctrl.preparedBy = ctrl.pv.preparedBy.firstName + " " + ctrl.pv.preparedBy.lastName;
  }).then(() => {
    setTimeout(function(){
      window.print();
      window.close();
    }, 0);
  });;
}

angular
  .module('admin.shared')
  .controller('PrintPurchaseVoucherController', PrintPurchaseVoucherController);
})(window.angular);
(function(angular){
'use strict';
var printVpReport = {
	templateUrl : './print-vp-report.html',
	controller : 'PrintVpReportController'
};

angular.module('admin.shared')
.component('printVpReport', printVpReport)
.config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('print-vp-report', {
        url: '/admin/shared/print-vp-report/start/:startDate/end/:endDate',
		component: 'printVpReport',
		params: {
			startDate: null,
			endDate: null
		}
	  });
	}]);
})(window.angular);
(function(angular){
'use strict';

PrintVpReportController.$inject = ["$state", "VouchersPayablesService", "InventoryService", "$stateParams", "$rootScope"];
function PrintVpReportController($state, VouchersPayablesService, InventoryService, $stateParams, $rootScope) {
  var ctrl = this;
  
  
  ctrl.$onInit = function(){
	  ctrl.company = $rootScope.selectedCompany;
	  ctrl.startDate = new Date($stateParams.startDate.replace(/['"]+/g, ''));
	  ctrl.endDate = new Date($stateParams.endDate.replace(/['"]+/g, ''));
	  //ctrl.dates = ctrl.startDate + " to " + ctrl.endDate;
	  ctrl.dates = ctrl.startDate.getFullYear() + "-" + (ctrl.startDate.getMonth() + 1) + "-" + ctrl.startDate.getDate() + " to "+
			  ctrl.endDate.getFullYear() + "-" + (ctrl.endDate.getMonth() + 1) + "-" + ctrl.endDate.getDate();
	  console.log($stateParams.startDate);
		  ctrl.reportType = "Vouchers Payable Report";
		  console.log(new Date($stateParams.startDate));
		  VouchersPayablesService.getByCompanyAndDates(ctrl.company.id, new Date($stateParams.startDate.replace(/['"]+/g, '')), new Date($stateParams.endDate.replace(/['"]+/g, ''))).then(function(response){
			  console.log(response.data);
			  ctrl.entries = response.data;
		  }).then(() => {
			    setTimeout(function(){
			        window.print();
			        window.close();
			      }, 1500);
			    });
	 
  };
 
}

angular
  .module('admin.shared')
  .controller('PrintVpReportController', PrintVpReportController);
})(window.angular);
(function(angular){
'use strict';
var salesRepClientReport = {
	templateUrl : './sales-rep-client-report.html',
	controller : 'SalesRepClientReportController'
};

angular.module('admin.shared')
.component('salesRepClientReport', salesRepClientReport)
.config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('sales-rep-client-report', {
        url: '/admin/shared/sales-rep-client-report/sales-rep/:salesRepId',
		component: 'salesRepClientReport',
		params: {
			salesRepId:null
		}
	  });
	}]);
})(window.angular);
(function(angular){
'use strict';

SalesRepClientReportController.$inject = ["$state", "ClientsService", "InventoryService", "$stateParams", "$rootScope"];
function SalesRepClientReportController($state, ClientsService, InventoryService, $stateParams, $rootScope) {
  var ctrl = this;
  
  
  ctrl.$onInit = function(){
	  ctrl.company = $rootScope.selectedCompany;
	  ctrl.salesRepId = $stateParams.salesRepId;
		  ctrl.reportType = "Sales Rep Client Report";
		  ClientsService.getClients(ctrl.company.id, ctrl.salesRepId).then(function(response){
			  console.log(response.data);
			  ctrl.entries = response.data;
		  }).then(() => {
			    setTimeout(function(){
			        window.print();
			        window.close();
			      }, 1500);
			    });;
	 
  };
 
}

angular
  .module('admin.shared')
  .controller('SalesRepClientReportController', SalesRepClientReportController);
})(window.angular);
(function(angular){
'use strict';
var printStockCard = {
	templateUrl : './print-stock-card.html',
	controller : 'PrintStockCardController'
};

angular.module('admin.shared')
.component('printStockCard', printStockCard)
.config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('print-stock-card', {
        url: '/admin/shared/print-stock-card/:controlNumber',
		component: 'printStockCard',
		params: {
			controlNumber: null
		}
	  });
	}]);
})(window.angular);
(function(angular){
'use strict';

PrintStockCardController.$inject = ["$state", "StockCardsService", "InventoryService", "$stateParams", "$rootScope"];
function PrintStockCardController($state, StockCardsService, InventoryService, $stateParams, $rootScope) {
  var ctrl = this;
  
  console.log("control number", $stateParams.controlNumber);

  
  ctrl.$onInit = function(){
	  ctrl.company = $rootScope.selectedCompany;
  StockCardsService.listByControlNumberAndCompany($stateParams.controlNumber, ctrl.company.id).then(function(response){
		 ctrl.stockcards = response.data;
		 InventoryService.getItemByControlNumber($stateParams.controlNumber).then(function(response){
			 ctrl.item = response.data;
			 console.log("item " + ctrl.item);
		 });
	  }).then(() => {
		    setTimeout(function(){
		        window.print();
		        window.close();
		      }, 1500);
		    });
  };
 
}

angular
  .module('admin.shared')
  .controller('PrintStockCardController', PrintStockCardController);
})(window.angular);
(function(angular){
'use strict';
var viewAckreceiptModal = {
	bindings : {
		ar : '='
	},
	templateUrl : './view-ackreceipt-modal.html',
	controller : 'ViewAckreceiptModalController'
};

angular.module('admin.shared').component('viewAckreceiptModal', viewAckreceiptModal);})(window.angular);
(function(angular){
'use strict';

ViewAckreceiptModalController.$inject = ["$state", "$rootScope"];
function ViewAckreceiptModalController($state, $rootScope) {
  var ctrl = this;
  
}

angular
  .module('admin.shared')
  .controller('ViewAckreceiptModalController', ViewAckreceiptModalController);
})(window.angular);
(function(angular){
'use strict';
var viewPrfModal = {
	bindings : {
		prf : '=',
		cancelreqs : '='
	},
	templateUrl : './view-prf-modal.html',
	controller : 'ViewPrfModalController'
};

angular.module('admin.shared').component('viewPrfModal', viewPrfModal);})(window.angular);
(function(angular){
'use strict';

ViewPrfModalController.$inject = ["$state", "PurchaseRequestsService", "$rootScope"];
function ViewPrfModalController($state, PurchaseRequestsService, $rootScope) {
  var ctrl = this;
  ctrl.cancelledItem = {};
  
  ctrl.$onInit = function(){
	  ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
	  ctrl.cancelledItem = {cancelledBy: ctrl.user};
  };
  
  ctrl.approve = function(id){
	  PurchaseRequestsService.approve(id).then(function(response){
		  console.log("Approved" + id);
		  window.location.reload();
	  });
  };
  
  ctrl.reject = function(id){
	  PurchaseRequestsService.reject(id).then(function(response){
		  console.log("Rejected" + id);
		  window.location.reload();
	  });
  };
  
  ctrl.cancelItem = function(item)
  {
	  console.log(JSON.stringify(item));
	  ctrl.cancelledItem = {};
	  ctrl.cancelledItem.requestedItem = item;
	  ctrl.cancelledItem.date = new Date();
	  ctrl.cancelledItem.cancelledBy = ctrl.user;
	  console.log(ctrl.cancelledItem);
  };
  
  
  ctrl.submitCancel = function(){
	  
	  console.log("Cancelled Item " + JSON.stringify(ctrl.cancelledItem));
	  PurchaseRequestsService.cancelRequestedItem(ctrl.cancelledItem).then(function(response){
		  console.log("inserted " + JSON.stringify(response.data));
		  window.location.reload();
	  });
  };
  
}

angular
  .module('admin.shared')
  .controller('ViewPrfModalController', ViewPrfModalController);
})(window.angular);
(function(angular){
'use strict';
var viewOsModal = {
	bindings : {
		os : '=',
	},
	templateUrl : './view-os-modal.html',
	controller : 'ViewOsModalController'
};

angular.module('admin.shared').component('viewOsModal', viewOsModal);})(window.angular);
(function(angular){
'use strict';

ViewOsModalController.$inject = ["$state", "$rootScope"];
function ViewOsModalController($state, $rootScope) {
  var ctrl = this;
  
}

angular
  .module('admin.shared')
  .controller('ViewOsModalController', ViewOsModalController);
})(window.angular);
(function(angular){
'use strict';
var viewProductModal = {
	bindings : {
		product : '='
	},
	templateUrl : './view-product-modal.html',
	controller : 'ViewProductModalController'
};

angular.module('admin.shared').component('viewProductModal', viewProductModal);})(window.angular);
(function(angular){
'use strict';

ViewProductModalController.$inject = ["$state", "VendorsService", "$rootScope"];
function ViewProductModalController($state, VendorsService, $rootScope) {
  var ctrl = this;
  
  
  
}

angular
  .module('admin.shared')
  .controller('ViewProductModalController', ViewProductModalController);
})(window.angular);
(function(angular){
'use strict';
var viewRrModal = {
	bindings : {
		rr : '='
	},
	templateUrl : './view-rr-modal.html',
	controller : 'ViewRrModalController'
};

angular.module('admin.shared').component('viewRrModal', viewRrModal);})(window.angular);
(function(angular){
'use strict';

ViewRrModalController.$inject = ["$state", "VendorsService", "$rootScope"];
function ViewRrModalController($state, VendorsService, $rootScope) {
  var ctrl = this;
  
  
  
}

angular
  .module('admin.shared')
  .controller('ViewRrModalController', ViewRrModalController);
})(window.angular);
(function(angular){
'use strict';
var viewSoModal = {
	bindings : {
		so : '=',
		cancelreqs : '='
	},
	templateUrl : './view-so-modal.html',
	controller : 'ViewSoModalController'
};

angular.module('admin.shared').component('viewSoModal', viewSoModal);})(window.angular);
(function(angular){
'use strict';

ViewSoModalController.$inject = ["$state", "SalesOrdersService", "$rootScope"];
function ViewSoModalController($state, SalesOrdersService, $rootScope) {
  var ctrl = this;
  ctrl.cancelledItem = {};
  
  ctrl.$onInit = function(){
	  ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
	  ctrl.cancelledItem = {cancelledBy: ctrl.user};
  };
  
  ctrl.approve = function(id){
	  SalesOrdersService.approve(id).then(function(response){
		  console.log("Approved" + id);
		  window.location.reload();
	  });
  };
  
  ctrl.reject = function(id){
	  SalesOrdersService.reject(id).then(function(response){
		  console.log("Rejected" + id);
		  window.location.reload();
	  });
  };
  
  ctrl.cancelItem = function(item)
  {
	  console.log(JSON.stringify(item));
	  ctrl.cancelledItem = {};
	  ctrl.cancelledItem.salesOrderProduct = item;
	  ctrl.cancelledItem.date = new Date();
	  ctrl.cancelledItem.cancelledBy = ctrl.user;
	  console.log(ctrl.cancelledItem);
  };
  
  
  ctrl.submitCancel = function(){
	  console.log("Cancelled Item " + JSON.stringify(ctrl.cancelledItem));
	  SalesOrdersService.cancelRequestedProduct(ctrl.cancelledItem).then(function(response){
		  console.log("inserted " + JSON.stringify(response.data));
		  window.location.reload()
	  });
  };
  
}

angular
  .module('admin.shared')
  .controller('ViewSoModalController', ViewSoModalController);
})(window.angular);
(function(angular){
'use strict';
	ProductStockCardService.$inject = ["$http", "globalConfig"];
 function ProductStockCardService($http, globalConfig) {

		this.list = function() {
			return $http.get(globalConfig.baseUrl + '/rest/product-stock-cards');
		};

		this.save = function(materialReevaluation) {
			return $http.post(globalConfig.baseUrl + '/rest/product-stock-cards', materialReevaluation);
		};

		this.update = function(materialReevaluation) {
			return $http.post(globalConfig.baseUrl + '/rest/product-stock-cards/', materialReevaluation);
		};

		this.get = function(id) {
			return $http.get(globalConfig.baseUrl + '/rest/product-stock-cards/' + id);
		};
		
		this.listByCompany = function(companyId) {
			return $http.get(globalConfig.baseUrl + '/rest/product-stock-cards/company/' + companyId);
		};
		
		this.listByCompanyAndProduct = function(companyId,productId){
			return $http.get(globalConfig.baseUrl + '/rest/product-stock-cards/company/'+companyId+'/product/' + productId);
		};
	}

	/**
	 * @ngdoc service
	 * @name ProductStockCardService
	 * @module components.auth
	 *
	 */
	angular.module('admin.shared').service('ProductStockCardService', ProductStockCardService);
})(window.angular);
(function(angular){
'use strict';
StockCardsService.$inject = ["$http", "globalConfig"];
function StockCardsService($http, globalConfig) {

	this.list = function() {
		return $http.get(globalConfig.baseUrl + '/rest/stock-cards');
	};

	this.save = function(materialReevaluation) {
		return $http.post(globalConfig.baseUrl + '/rest/stock-cards', materialReevaluation);
	};

	this.update = function(materialReevaluation) {
		return $http.post(globalConfig.baseUrl + '/rest/stock-cards/', materialReevaluation);
	};

	this.get = function(id) {
		return $http.get(globalConfig.baseUrl + '/rest/stock-cards/' + id);
	};
	
	this.listByCompany = function(companyId) {
		return $http.get(globalConfig.baseUrl + '/rest/stock-cards/company/' + companyId);
	};
	
	this.listByControlNumberAndCompany = function(controlNumber,companyId){
		return $http.get(globalConfig.baseUrl + '/rest/stock-cards/company/'+companyId+'/control-number/' + controlNumber);
	};
	
	this.listByItemAndCompany = function(itemId, companyId){
		return $http.get(globalConfig.baseUrl + '/rest/stock-cards/company/' + companyId + '/item/'+ itemId);
	};
}

/**
 * @ngdoc service
 * @name StockCardsService
 * @module components.auth
 *
 */
angular.module('admin.shared').service('StockCardsService', StockCardsService);
})(window.angular);
(function(angular){
'use strict';
var viewStockCardModal = {
	bindings : {
		item: '=',
		stockcards: '='
	},
	templateUrl : './view-stock-card.html',
	controller : 'ViewStockCardModalController'
};

angular.module('admin.shared').component('viewStockCardModal', viewStockCardModal);})(window.angular);
(function(angular){
'use strict';

ViewStockCardModalController.$inject = ["$state"];
function ViewStockCardModalController($state) {
  var ctrl = this;
  
  
}

angular
  .module('admin.shared')
  .controller('ViewStockCardModalController', ViewStockCardModalController);
})(window.angular);
(function(angular){
'use strict';
var viewVpModal = {
	bindings : {
		vp : '=',
		approve: '&'
	},
	templateUrl : './view-vp-modal.html',
	controller : 'ViewVpModalController'
};

angular.module('admin.shared').component('viewVpModal', viewVpModal);})(window.angular);
(function(angular){
'use strict';

ViewVpModalController.$inject = ["$state", "$rootScope"];
function ViewVpModalController($state, $rootScope) {
  var ctrl = this;
  
  ctrl.approveVp = function(vpId) {
	  ctrl.approve({
		  $event: {
			  vpId: vpId
		  }
	  });
  };
}

angular
  .module('admin.shared')
  .controller('ViewVpModalController', ViewVpModalController);
})(window.angular);
(function(angular){
'use strict';
var searchForm = {
  bindings: {
    search: '=',
    placeholder: '@',
    button: '@',
    message: '@',
    onSubmit: '&',
  },
  templateUrl: './app-searchbox.html',
  controller: 'SearchBoxFormController'
};

angular
  .module('admin.common')
  .component('searchForm', searchForm);
})(window.angular);
(function(angular){
'use strict';

SearchBoxFormController.$inject = ["$state"];
function SearchBoxFormController($state) {
  var ctrl = this;
  ctrl.$onChanges = function (changes) {
    if (changes.search) {
      ctrl.search = angular.copy(ctrl.search);
    }
  };

  ctrl.submitForm = function () {
    console.log('submitForm: ' + JSON.stringify(ctrl.search));
    ctrl.onSubmit({
      $event: {
    	  search: ctrl.search
      }
    });
  };
}

angular
  .module('admin.common')
  .controller('SearchBoxFormController', SearchBoxFormController);
})(window.angular);
(function(angular){
'use strict';

var login = {
  bindings: {
  },
  templateUrl: './login.html',
  controller: 'LoginController'
};

angular
  .module('admin.common')
  .component('login', login)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('login', {
        url: '/login',
        component: 'login'
      });
  }]);})(window.angular);
(function(angular){
'use strict';


LoginController.$inject = ["$state", "$rootScope", "$cookieStore", "AuthService", "UsersService"];
function LoginController($state, $rootScope, $cookieStore, AuthService, UsersService) {
    var ctrl = this;

    ctrl.email = 'katharine@yahoo.com';
    ctrl.password = 'test';

    ctrl.login = function() {
      console.log("login: " + ctrl.email);
      AuthService.authenticate(ctrl.email, ctrl.password).then(function(response) {
        console.log("LOGIN.response: " + JSON.stringify(response));
        if (response.data) {
          $rootScope.accessToken = response.data.token;
          $cookieStore.put('accessToken', response.data.token);
          
          UsersService.me().then(function(response) {
            console.log("### UsersService.me: " + JSON.stringify(response.data));
            $rootScope.user = response.data;
            localStorage.setItem('currentUser', JSON.stringify($rootScope.user));
            $state.go('dashboard');
          });
        } else {
          console.log("####  FAILED TO LOGIN");
        }
        
      });
    }
};

/**
 * @ngdoc type
 * @module admin.common
 * @name AppController
 *
 */
angular
  .module('admin.common')
  .controller('LoginController', LoginController);})(window.angular);
(function(angular){
'use strict';
var cashReceiptVoucherNew = {
  templateUrl: './cash-receipt-voucher-new.html',
  controller: 'CashReceiptVoucherNewController'
};

angular
  .module('admin.accounting')
  .component('cashReceiptVoucherNew', cashReceiptVoucherNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('cash-receipt-voucher-new', {
        parent: 'app',
        url: '/admin/accounting/cash-receipt-voucher/new',
        component: 'cashReceiptVoucherNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

CashReceiptVoucherNewController.$inject = ["$state", "CashReceiptVouchersService", "$rootScope"];
function CashReceiptVoucherNewController($state, CashReceiptVouchersService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    ctrl.company = $rootScope.selectedCompany;
    ctrl.crv = {
    		company: ctrl.company,
    		date: new Date(),
    		accountTitles: [],
    		variation: 'New',
    		preparedBy: ctrl.user
    }
    };

  ctrl.createCashReceiptVoucher = function (event) {
    CashReceiptVouchersService.save(event.crv).then(function (response) {
    	  console.log("createCashReceiptVoucher " + JSON.stringify(response.data));
        $state.go('cash-receipt-vouchers');
    });

  };
}

angular
  .module('admin.accounting')
  .controller('CashReceiptVoucherNewController', CashReceiptVoucherNewController);
})(window.angular);
(function(angular){
'use strict';
var cashReceiptVoucherForm = {
  bindings: {
    crv: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './cash-receipt-voucher-form.html',
  controller: 'CashReceiptVoucherFormController'
};

angular
  .module('admin.accounting')
  .component('cashReceiptVoucherForm', cashReceiptVoucherForm);
})(window.angular);
(function(angular){
'use strict';

CashReceiptVoucherFormController.$inject = ["$state", "CashReceiptVouchersService", "VouchersService", "JournalVouchersService", "UsersService", "BankAccountsService", "$rootScope"];
function CashReceiptVoucherFormController($state, CashReceiptVouchersService, VouchersService, JournalVouchersService, UsersService, BankAccountsService, $rootScope) {
	  
  var ctrl = this;
  
  var currentUser = localStorage.getItem('cupventUser');
      if (currentUser != null) {
          ctrl.currentUser = JSON.parse(currentUser);
      }
  
  ctrl.$onInit = function (){
	  ctrl.company = $rootScope.selectedCompany;
	    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));

	  UsersService.get(ctrl.user.id).then(function(response){
		  ctrl.user = response.data;
	  });
	  
	  BankAccountsService.list().then(function(response){
		  ctrl.bankAccounts = response.data;
	  });
	  ctrl.totalAmount = 0;
  };
  
  ctrl.$onChanges = function (changes) {
    if (changes.crv) {
      ctrl.crv = angular.copy(ctrl.crv);
    }
  };
  
  ctrl.toggleVariation = function(){
	  ctrl.crv = {
			  	number: ctrl.crv.number,
	    		company: ctrl.company,
	    		date: new Date(),
	    		accountTitles: [],
	    		variation: ctrl.crv.variation,
	    		voucher: {},
	    		preparedBy: ctrl.crv.preparedBy
	    }
  };

  ctrl.selectVoucher = function (v){
	  ctrl.crv.voucher = v;
	  /*
	  ctrl.vp.siNumber = v.siNumber;
	  ctrl.vp.drNumber = v.drNumber;
	  ctrl.vp.poNumber = v.poNumber;
	  ctrl.vp.rrNumber = v.rrNumber;*/
	  //ctrl.vp.rrDate = v.rrDate;
	  ctrl.totalAmount = 0;
	  JournalVouchersService.listAdjustmentsOfVoucherByCompany(v.id, ctrl.company.id).then(function(response){
		  ctrl.adjustments = response.data;
		  for(var i = 0; i < ctrl.adjustments.length; i++){
			  ctrl.totalAmount += ctrl.adjustments[i].totalAmount;
		  }
		  ctrl.totalAmount += ctrl.crv.voucher.totalAmount;
	  });
  };
  
  ctrl.findNewVouchers = function() {
	 VouchersService.listNewVouchersByCompanyAndStatus(ctrl.company.id, 'Completed').then(function(response) {
	    ctrl.vouchers = response.data;
	 });
  };
	  
  
  ctrl.submitForm = function () {
    ctrl.onSubmit({
      $event: {
    	  crv: ctrl.crv
      }
    });
  };

  

}

angular
  .module('admin.accounting')
  .controller('CashReceiptVoucherFormController', CashReceiptVoucherFormController);
})(window.angular);
(function(angular){
'use strict';

var cashReceiptVoucher = {
  templateUrl: './cash-receipt-vouchers.html',
  controller: 'CashReceiptVoucherController'
};

angular
  .module('admin.accounting')
  .component('cashReceiptVoucher', cashReceiptVoucher)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('cash-receipt-vouchers', {
        parent: 'app',
        url: '/admin/accounting/cash-receipt-voucher',
        component: 'cashReceiptVoucher'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

CashReceiptVoucherController.$inject = ["$state", "CashReceiptVouchersService", "ReportsService", "$rootScope"];
function CashReceiptVoucherController($state, CashReceiptVouchersService, ReportsService,  $rootScope) {
  var ctrl = this;
  
  
  ctrl.$onInit = function () {
	  ctrl.addJournalRequest = false;
	  ctrl.error = null;
	  loadCashReceiptVouchers();
  };
  
  
  ctrl.exportReport = function (){
	  var reportTitle = {title: 'Report : Cash Receipt Voucher Report'};
	  var dates = {dates: 'Date Range:' + ctrl.startDate.getFullYear() + "-" + (ctrl.startDate.getMonth() + 1) + "-" + ctrl.startDate.getDate() + " to "+
		  ctrl.endDate.getFullYear() + "-" + (ctrl.endDate.getMonth() + 1) + "-" + ctrl.endDate.getDate()}
	  var headers = {
			    number: 'CRV No'.replace(/,/g, ''), // remove commas to avoid errors
			    date: "Date",
			    payee: "Bank",
			    voucher: "Voucher",
			    amount: "Amount",
	  };
	  
	  CashReceiptVouchersService.getByCompanyAndDates(ctrl.company.id, ctrl.startDate, ctrl.endDate).then(function(response){
		  console.log(response.data);
		  ReportsService.exportCSVFile(headers, reportTitle, dates, response.data, "print");
	  });
  };
  
  function loadCashReceiptVouchers(){
	ctrl.company = $rootScope.selectedCompany;
	CashReceiptVouchersService.list().then(function(response){
      ctrl.cashReceiptVouchers = response.data;
      console.log("response v" + JSON.stringify(ctrl.cashReceiptVouchers));
    });
	  
  }

  
  ctrl.openModal = function(cashReceiptVoucher){
	  console.log("openModal");
    ctrl.crv = cashReceiptVoucher;
  };
  
  
  ctrl.print = function(){
	  window.print();
  };
  
/*
  ctrl.openModalApprovedItem = function(approvedItem) {
    console.log("openModalApprovedItem");
    ctrl.approvedItem = approvedItem;
  };*/
  
}

angular
  .module('admin.accounting')
  .controller('CashReceiptVoucherController', CashReceiptVoucherController);
})(window.angular);
(function(angular){
'use strict';
var chequeDisbursementForm = {
  bindings: {
    cp: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './cheque-disbursement-form.html',
  controller: 'ChequeDisbursementFormController'
};

angular
  .module('admin.accounting')
  .component('chequeDisbursementForm', chequeDisbursementForm);
})(window.angular);
(function(angular){
'use strict';

ChequeDisbursementFormController.$inject = ["$state", "ChequeDisbursementsService", "ChequePrintingsService", "UsersService", "BankAccountsService", "$rootScope"];
function ChequeDisbursementFormController($state, ChequeDisbursementsService, ChequePrintingsService, UsersService, BankAccountsService, $rootScope) {
	  
  var ctrl = this;
  
  var currentUser = localStorage.getItem('cupventUser');
      if (currentUser != null) {
          ctrl.currentUser = JSON.parse(currentUser);
      }
  
  ctrl.$onInit = function (){
	  ctrl.company = $rootScope.selectedCompany;
	    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));

	  UsersService.get(ctrl.user.id).then(function(response){
		  ctrl.user = response.data;
	  });
	  
	  BankAccountsService.list().then(function(response){
		  ctrl.bankAccounts = response.data;
	  });
	  
	  ChequePrintingsService.listByCompanyAndStatus(ctrl.company.id, "Approved").then(function(response){
		  ctrl.cpList = response.data;
	  });
	  
	  ctrl.totalAmount = 0;
  };
  
  ctrl.$onChanges = function (changes) {
    if (changes.cp) {
      ctrl.cp = angular.copy(ctrl.cp);
    }
  };
  

  ctrl.selectChequePrinting = function (cp){
	  ctrl.cp.chequePrinting = cp;
  };


  ctrl.submitForm = function () {
    ctrl.onSubmit({
      $event: {
    	  cp: ctrl.cp
      }
    });
  };

  

}

angular
  .module('admin.accounting')
  .controller('ChequeDisbursementFormController', ChequeDisbursementFormController);
})(window.angular);
(function(angular){
'use strict';
var chequeDisbursementNew = {
  templateUrl: './cheque-disbursement-new.html',
  controller: 'ChequeDisbursementNewController'
};

angular
  .module('admin.accounting')
  .component('chequeDisbursementNew', chequeDisbursementNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('cheque-disbursement-new', {
        parent: 'app',
        url: '/admin/accounting/cheque-disbursement/new',
        component: 'chequeDisbursementNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

ChequeDisbursementNewController.$inject = ["$state", "ChequeDisbursementsService", "$rootScope"];
function ChequeDisbursementNewController($state, ChequeDisbursementsService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    ctrl.company = $rootScope.selectedCompany;
    ctrl.cp = {
        company: ctrl.company,
        accountTitles:[]
    }
    };

  ctrl.createChequeDisbursement = function (event) {
    ChequeDisbursementsService.save(event.cp).then(function (response) {
    	  console.log("createChequeDisbursement " + JSON.stringify(response.data));
        $state.go('cheque-disbursements');
    });

  };
}

angular
  .module('admin.accounting')
  .controller('ChequeDisbursementNewController', ChequeDisbursementNewController);
})(window.angular);
(function(angular){
'use strict';
var debitMemoForm = {
  bindings: {
    dm: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './debit-memo-form.html',
  controller: 'DebitMemoFormController'
};

angular
  .module('admin.accounting')
  .component('debitMemoForm', debitMemoForm);
})(window.angular);
(function(angular){
'use strict';

DebitMemoFormController.$inject = ["$state", "DebitMemosService", "MemoTypesService", "UsersService", "SalesSlipsService"];
function DebitMemoFormController($state, DebitMemosService, MemoTypesService, UsersService, SalesSlipsService) {
  var ctrl = this;
  
  ctrl.$onChanges = function (changes) {
    if (changes.dm) {
      ctrl.dm = angular.copy(ctrl.dm);
    }
  };
  
  ctrl.$onInit = function(){
	  ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));

	  MemoTypesService.listByType("DM").then(function(response){
		  ctrl.memoTypes = response.data;
	  });
	  ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
	  UsersService.get(ctrl.user.id).then(function(response){
		  ctrl.depots = response.data.depots;
	  });
	  
	  ctrl.dm.memoSlipType = "DM";
  };
  
  ctrl.submitForm = function () {
    console.log('submitForm: ' + JSON.stringify(ctrl.dm));
    
    ctrl.onSubmit({
      $event: {
    	  dm: ctrl.dm
      }
    });
  };
  
  ctrl.loadSalesSlips = function() {
	  console.log("asd");
	  SalesSlipsService.listByDepotAndStatus(ctrl.dm.depot.id, ["Pending","Incomplete"]).then(function(response){
		  ctrl.salesSlips = response.data;
		  console.log("hello" + JSON.stringify(ctrl.salesSlips));
		  $("#findSalesSlipModal").modal("show");
	  });
  };
  



  
}

angular
  .module('admin.accounting')
  .controller('DebitMemoFormController', DebitMemoFormController);
})(window.angular);
(function(angular){
'use strict';

var chequeDisbursement = {
  templateUrl: './cheque-disbursements.html',
  controller: 'ChequeDisbursementController'
};

angular
  .module('admin.accounting')
  .component('chequeDisbursement', chequeDisbursement)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('cheque-disbursements', {
        parent: 'app',
        url: '/admin/accounting/cheque-disbursement',
        component: 'chequeDisbursement'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

ChequeDisbursementController.$inject = ["$state", "ChequeDisbursementsService", "$rootScope"];
function ChequeDisbursementController($state, ChequeDisbursementsService, $rootScope) {
  var ctrl = this;
  
  ctrl.chequeDisbursements = [];

  ctrl.searchNumber = '';
  ctrl.searchRRNumber = '';
  ctrl.sortType = 'number';
  ctrl.sortReverse = false;
  
  
  ctrl.$onInit = function () {
	  ctrl.addJournalRequest = false;
	  ctrl.error = null;
	  loadChequeDisbursements();
  };
  
  
  function loadChequeDisbursements(){
	ctrl.company = $rootScope.selectedCompany;
	ChequeDisbursementsService.listByCompany(ctrl.company.id).then((response) => {
      ctrl.chequeDisbursements = response.data;
      console.log("response v" + JSON.stringify(ctrl.chequeDisbursements));
    });
	  
  }

  ctrl.viewVp = function(vp){
	  ctrl.vp = vp;
  };
  
  ctrl.openModal = function(chequeDisbursement){
	  console.log("openModal");
    ctrl.cp = chequeDisbursement;
  };
  
  
  ctrl.print = function(){
	  window.print();
  };
  
/*
  ctrl.openModalApprovedItem = function(approvedItem) {
    console.log("openModalApprovedItem");
    ctrl.approvedItem = approvedItem;
  };*/
  
}

angular
  .module('admin.accounting')
  .controller('ChequeDisbursementController', ChequeDisbursementController);
})(window.angular);
(function(angular){
'use strict';
var debitMemoNew = {
  templateUrl: './debit-memo-new.html',
  controller: 'DebitMemoNewController'
};

angular
  .module('admin.accounting')
  .component('debitMemoNew', debitMemoNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('debit-memo-new', {
        parent: 'app',
        url: '/admin/accounting/debit-memo/new',
        component: 'debitMemoNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

DebitMemoNewController.$inject = ["$state", "DebitMemosService", "CompanyService", "DepartmentsService", "PermissionsService"];
function DebitMemoNewController($state, DebitMemosService, CompanyService, DepartmentsService, PermissionsService) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    ctrl.company = JSON.parse(window.localStorage.getItem('company'));
    ctrl.dm = {
    		date: new Date()
    };
  };

  ctrl.createDebitMemo = function (event) {
	console.log("create " + JSON.stringify(event.dm));
    DebitMemosService.save(event.dm).then(function () {
      $state.go('debit-memos');
    });

  };
}

angular
  .module('admin.accounting')
  .controller('DebitMemoNewController', DebitMemoNewController);
})(window.angular);
(function(angular){
'use strict';
var journalVoucherEdit = {
  templateUrl: './journal-voucher-edit.html',
  controller: 'JournalVoucherEditController'
};

angular
  .module('admin.accounting')
  .component('journalVoucherEdit', journalVoucherEdit)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('journal-voucher-edit', {
        parent: 'app',
        url: '/admin/journal-vouchers/edit/:journalVoucherId',
        component: 'journalVoucherEdit'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

JournalVoucherEditController.$inject = ["$state", "$stateParams", "JournalVouchersService", "$rootScope"];
function JournalVoucherEditController($state, $stateParams, JournalVouchersService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    ctrl.company = $rootScope.selectedCompany;
    
    console.log('pjvId: ' + JSON.stringify($stateParams.journalVoucherId));
    
    JournalVouchersService.get($stateParams.journalVoucherId).then(function(response){
    	ctrl.jv = response.data;
    	ctrl.jv.preparedBy = ctrl.user;
    	console.log("asdasd" + JSON.stringify(ctrl.jv));
    });
    
  };

  ctrl.editJournalVoucher = function (event) {
    JournalVouchersService.save(event.pv).then(function (response) {
    	  console.log("editJournalVoucher " + JSON.stringify(response.data));
        $state.go('journal-vouchers');
    });

  };
}

angular
  .module('admin.accounting')
  .controller('JournalVoucherEditController', JournalVoucherEditController);
})(window.angular);
(function(angular){
'use strict';

var debitMemo = {
  templateUrl: './debit-memos.html',
  controller: 'DebitMemoController'
};

angular
  .module('admin.accounting')
  .component('debitMemo', debitMemo)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('debit-memos', {
        parent: 'app',
        url: '/admin/accounting/debit-memo',
        component: 'debitMemo'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

DebitMemoController.$inject = ["$state", "DebitMemosService", "UsersService", "$rootScope", "_"];
function DebitMemoController($state, DebitMemosService, UsersService, $rootScope, _) {
  var ctrl = this;
  ctrl.debitMemos = [];

  
  ctrl.sortType = 'date';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addDebitMemo = false;
	  ctrl.error = null;
	  ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
	  UsersService.get(ctrl.user.id).then(function(response){
		  ctrl.userAssignedDepots = response.data.depots;
	  });
  };
  
  ctrl.selectDepot = function (){
	  loadDebitMemos();
  };
  
  function loadDebitMemos(){
	  DebitMemosService.listByDepot(ctrl.userAssignedDepot.id).then(function(response){
	  	  console.log("list response: {}", response.data);
		  ctrl.debitMemos = response.data;
	  });
  }
  
  ctrl.searchPrf = function(event){
	  ctrl.debitMemoTable.DataTable.search(event).draw();
  };
  
  ctrl.createNewDebitMemo = function (event) {
	    console.log('createNewDebitMemo');
	    $state.go('debit-memo-new');
  };
  
  ctrl.openModal = function(debitMemo){
	  console.log("show modal" +  ctrl.showModal);
	  console.log("debitMemo" + JSON.stringify(debitMemo));
	  ctrl.debitMemo = debitMemo;
	  $('#debitMemoInfoModal').modal('show');
	  
  };
  
}

angular
  .module('admin.accounting')
  .controller('DebitMemoController', DebitMemoController);
})(window.angular);
(function(angular){
'use strict';
var journalVoucherNew = {
  templateUrl: './journal-voucher-new.html',
  controller: 'JournalVoucherNewController'
};

angular
  .module('admin.accounting')
  .component('journalVoucherNew', journalVoucherNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('journal-voucher-new', {
        parent: 'app',
        url: '/admin/accounting/journal-voucher/new',
        component: 'journalVoucherNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

JournalVoucherNewController.$inject = ["$state", "JournalVouchersService", "$rootScope"];
function JournalVoucherNewController($state, JournalVouchersService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    ctrl.company = $rootScope.selectedCompany;
    ctrl.jv = {
    		company: ctrl.company,
    		date: new Date(),
    		accountTitles: [],
    		adjustment: false,
    		type: "JV",
    		preparedBy: ctrl.user
    }
    };

  ctrl.createJournalVoucher = function (event) {
    JournalVouchersService.save(event.jv).then(function (response) {
    	  console.log("createJournalVoucher " + JSON.stringify(response.data));
        $state.go('journal-vouchers');
    });

  };
}

angular
  .module('admin.accounting')
  .controller('JournalVoucherNewController', JournalVoucherNewController);
})(window.angular);
(function(angular){
'use strict';

var journalVoucher = {
  templateUrl: './journal-vouchers.html',
  controller: 'JournalVoucherController'
};

angular
  .module('admin.accounting')
  .component('journalVoucher', journalVoucher)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('journal-vouchers', {
        parent: 'app',
        url: '/admin/accounting/journal-voucher',
        component: 'journalVoucher'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

JournalVoucherController.$inject = ["$state", "JournalVouchersService", "ReportsService", "$rootScope"];
function JournalVoucherController($state, JournalVouchersService, ReportsService, $rootScope) {
  var ctrl = this;
  
  ctrl.journalVouchers = [];

  ctrl.searchNumber = '';
  ctrl.searchRRNumber = '';
  ctrl.sortType = 'number';
  ctrl.sortReverse = false;
  
  
  ctrl.$onInit = function () {
	  ctrl.addJournalRequest = false;
	  ctrl.error = null;
	  loadJournalVouchers();
  };
  
  ctrl.exportReport = function (){
	  var reportTitle = {title: 'Report : Journal Voucher Report'};
	  var dates = {dates: 'Date Range:' + ctrl.startDate.getFullYear() + "-" + (ctrl.startDate.getMonth() + 1) + "-" + ctrl.startDate.getDate() + " to "+
		  ctrl.endDate.getFullYear() + "-" + (ctrl.endDate.getMonth() + 1) + "-" + ctrl.endDate.getDate()}
	  var headers = {
			    number: 'JV No'.replace(/,/g, ''), // remove commas to avoid errors
			    date: "Date",
			    payee: "Payee",
			    amount: "Amount",
			    status: "Status"
	  };
	  
	  JournalVouchersService.getByCompanyAndDates(ctrl.company.id, ctrl.startDate, ctrl.endDate).then(function(response){
		  console.log(response.data);
		  ReportsService.exportCSVFile(headers, reportTitle, dates, response.data, "print");
	  });
  };
  
  function loadJournalVouchers(){
	ctrl.company = $rootScope.selectedCompany;
	JournalVouchersService.listByCompany(ctrl.company.id).then((response) => {
      ctrl.journalVouchers = response.data;
      console.log("response journal voucher" + JSON.stringify(ctrl.journalVouchers));
    });
	  
  }

  ctrl.openModal = function(journalVoucher){
	  console.log("openModal");
    ctrl.jv = journalVoucher;
  };
  
  ctrl.approve = function(jvId){
	  ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
	  JournalVouchersService.approve(jvId, ctrl.user.id).then(function(response){
		  if(response.data){
			  alert("Approved");
			  loadJournalVouchers();
		  }
	  });
  };
  
  ctrl.goToEdit = function (id) {
	    $state.go('journal-voucher-edit', { 'journalVoucherId': id });
   }
/*
  ctrl.openModalApprovedItem = function(approvedItem) {
    console.log("openModalApprovedItem");
    ctrl.approvedItem = approvedItem;
  };*/
  
}

angular
  .module('admin.accounting')
  .controller('JournalVoucherController', JournalVoucherController);
})(window.angular);
(function(angular){
'use strict';
var journalVoucherForm = {
  bindings: {
    jv: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './journal-voucher-form.html',
  controller: 'JournalVoucherFormController'
};

angular
  .module('admin.accounting')
  .component('journalVoucherForm', journalVoucherForm);
})(window.angular);
(function(angular){
'use strict';

JournalVoucherFormController.$inject = ["$state", "JournalVouchersService", "VouchersService", "PurchaseOrdersService", "UsersService", "$rootScope"];
function JournalVoucherFormController($state, JournalVouchersService, VouchersService, PurchaseOrdersService, UsersService, $rootScope) {
	  
  var ctrl = this;
  
  var currentUser = localStorage.getItem('cupventUser');
      if (currentUser != null) {
          ctrl.currentUser = JSON.parse(currentUser);
      }
  
  ctrl.$onInit = function (){
	  ctrl.company = $rootScope.selectedCompany;
	    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));

	  UsersService.get(ctrl.user.id).then(function(response){
		  ctrl.user = response.data;
	  });
  };
  
  ctrl.$onChanges = function (changes) {
    if (changes.jv) {
      ctrl.jv = angular.copy(ctrl.jv);
    }
  };
  
  ctrl.toggleAdjustment = function(flag){
	  ctrl.jv = {
	    		company: ctrl.company,
	    		date: new Date(),
	    		accountTitles: [],
	    		adjustment: flag,
	    		type: "JV",
	    		preparedBy: ctrl.user
	    }
  };

  ctrl.findNewVouchers = function() {
	  ctrl.company = $rootScope.selectedCompany;
    VouchersService.listNewVouchersByCompany(ctrl.company.id).then(function(response) {
      ctrl.vouchers = response.data;
    });
  };

  ctrl.selectVoucher = function (v){
	  ctrl.jv.voucher = v;
	  ctrl.jv.siNumber = v.siNumber;
	  ctrl.jv.drNumber = v.drNumber;
	  ctrl.jv.poNumber = v.poNumber;
	  ctrl.jv.rrNumber = v.rrNumber;
	  ctrl.jv.vendor = v.vendor;
	  ctrl.jv.rrDate = v.rrDate;
  };
  
  ctrl.submitForm = function () {
    ctrl.onSubmit({
      $event: {
    	  jv: ctrl.jv
      }
    });
  };

  

}

angular
  .module('admin.accounting')
  .controller('JournalVoucherFormController', JournalVoucherFormController);
})(window.angular);
(function(angular){
'use strict';
var creditMemoForm = {
  bindings: {
    cm: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './credit-memo-form.html',
  controller: 'CreditMemoFormController'
};

angular
  .module('admin.accounting')
  .component('creditMemoForm', creditMemoForm);
})(window.angular);
(function(angular){
'use strict';

CreditMemoFormController.$inject = ["$state", "CreditMemosService", "MemoTypesService", "UsersService", "SalesSlipsService"];
function CreditMemoFormController($state, CreditMemosService, MemoTypesService, UsersService, SalesSlipsService) {
  var ctrl = this;
  
  ctrl.$onChanges = function (changes) {
    if (changes.cm) {
      ctrl.cm = angular.copy(ctrl.cm);
    }
  };
  
  ctrl.$onInit = function(){
	  ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));

	  MemoTypesService.listByType("CM").then(function(response){
		  ctrl.memoTypes = response.data;
	  });
	  ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
	  UsersService.get(ctrl.user.id).then(function(response){
		  ctrl.depots = response.data.depots;
	  });
	  
	  ctrl.cm.memoSlipType = "CM";
  };
  
  ctrl.submitForm = function () {
    console.log('submitForm: ' + JSON.stringify(ctrl.cm));
    
    ctrl.onSubmit({
      $event: {
    	  cm: ctrl.cm
      }
    });
  };
  
  ctrl.loadSalesSlips = function() {
	  console.log("asd");
	  SalesSlipsService.listByDepotAndStatus(ctrl.cm.depot.id, ["Pending","Incomplete"]).then(function(response){
		  ctrl.salesSlips = response.data;
		  console.log("hello" + JSON.stringify(ctrl.salesSlips));
		  $("#findSalesSlipModal").modal("show");
	  });
  };
  



  
}

angular
  .module('admin.accounting')
  .controller('CreditMemoFormController', CreditMemoFormController);
})(window.angular);
(function(angular){
'use strict';

var creditMemo = {
  templateUrl: './credit-memos.html',
  controller: 'CreditMemoController'
};

angular
  .module('admin.accounting')
  .component('creditMemo', creditMemo)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('credit-memos', {
        parent: 'app',
        url: '/admin/accounting/credit-memo',
        component: 'creditMemo'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

CreditMemoController.$inject = ["$state", "CreditMemosService", "ReportsService", "UsersService", "$rootScope", "_"];
function CreditMemoController($state, CreditMemosService, ReportsService, UsersService, $rootScope, _) {
  var ctrl = this;
  ctrl.creditMemos = [];

  
  ctrl.sortType = 'date';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addCreditMemo = false;
	  ctrl.error = null;
	  ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
	  UsersService.get(ctrl.user.id).then(function(response){
		  ctrl.userAssignedDepots = response.data.depots;
	  });
  };
  
  ctrl.selectDepot = function (){
	  loadCreditMemos();
  };
  
  function loadCreditMemos(){
	  CreditMemosService.listByDepot(ctrl.userAssignedDepot.id).then(function(response){
	  	  console.log("list response: {}", response.data);
		  ctrl.creditMemos = response.data;
	  });
  }
  
  ctrl.searchPrf = function(event){
	  ctrl.creditMemoTable.DataTable.search(event).draw();
  };
  
  ctrl.createNewCreditMemo = function (event) {
	    console.log('createNewCreditMemo');
	    $state.go('credit-memo-new');
  };
  
  ctrl.openModal = function(creditMemo){
	  console.log("show modal" +  ctrl.showModal);
	  console.log("creditMemo" + JSON.stringify(creditMemo));
	  ctrl.creditMemo = creditMemo;
	  $('#creditMemoInfoModal').modal('show');
	  
  };
  
  ctrl.exportReport = function () {
	  var reportTitle = {title: 'Report : Credit Debit Memo Summary Report'};
	  var dates = {date: 'Date Range:' + ctrl.startDate.getFullYear() + "-" + (ctrl.startDate.getMonth() + 1) + "-" + ctrl.startDate.getDate() + " to "+
		  ctrl.endDate.getFullYear() + "-" + (ctrl.endDate.getMonth() + 1) + "-" + ctrl.endDate.getDate()}
	  
	  var headers = {
			    title: 'NO.'.replace(/,/g, ''), // remove commas to avoid errors
			    credit: "TYPE",
			    date: "DATE",
			    client: "CLIENT",
			    os:"OS / DR",
			    amount: "AMOUNT",
			    remarks: "REMARKS"
	  };
	  CreditMemosService.getCMDMSummaryReport(ctrl.userAssignedDepot.id, ctrl.startDate, ctrl.endDate).then(function(response){
		  console.log(response.data);
		  ReportsService.exportCSVFile(headers, reportTitle, dates, response.data, "print");
	  });
  }
  
}

angular
  .module('admin.accounting')
  .controller('CreditMemoController', CreditMemoController);
})(window.angular);
(function(angular){
'use strict';
var creditMemoNew = {
  templateUrl: './credit-memo-new.html',
  controller: 'CreditMemoNewController'
};

angular
  .module('admin.accounting')
  .component('creditMemoNew', creditMemoNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('credit-memo-new', {
        parent: 'app',
        url: '/admin/accounting/credit-memo/new',
        component: 'creditMemoNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

CreditMemoNewController.$inject = ["$state", "CreditMemosService", "CompanyService", "DepartmentsService", "PermissionsService"];
function CreditMemoNewController($state, CreditMemosService, CompanyService, DepartmentsService, PermissionsService) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    ctrl.company = JSON.parse(window.localStorage.getItem('company'));
    ctrl.cm = {
    		date: new Date()
    };
  };

  ctrl.createCreditMemo = function (event) {
	console.log("create " + JSON.stringify(event.cm));
    CreditMemosService.save(event.cm).then(function () {
      $state.go('credit-memos');
    });

  };
}

angular
  .module('admin.accounting')
  .controller('CreditMemoNewController', CreditMemoNewController);
})(window.angular);
(function(angular){
'use strict';
var pdcDisbursementNew = {
  templateUrl: './pdc-disbursement-new.html',
  controller: 'PdcDisbursementNewController'
};

angular
  .module('admin.accounting')
  .component('pdcDisbursementNew', pdcDisbursementNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('pdc-disbursement-new', {
        parent: 'app',
        url: '/admin/accounting/pdc-disbursement/new',
        component: 'pdcDisbursementNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

PdcDisbursementNewController.$inject = ["$state", "PdcDisbursementsService", "$rootScope"];
function PdcDisbursementNewController($state, PdcDisbursementsService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    ctrl.company = $rootScope.selectedCompany;
    ctrl.pdc = {
    		company: ctrl.company,
    		date: new Date(),
    		cheques: []
    }
    };

  ctrl.createPdcDisbursement = function (event) {
    PdcDisbursementsService.save(event.pdc).then(function (response) {
    	  console.log("createPdcDisbursement " + JSON.stringify(response.data));
    	  alert("PDC Disbursement successfully added");
    	  $state.go("pdc-disbursements");
    });

  };
}

angular
  .module('admin.accounting')
  .controller('PdcDisbursementNewController', PdcDisbursementNewController);
})(window.angular);
(function(angular){
'use strict';
var pdcDisbursementForm = {
  bindings: {
    pdc: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './pdc-disbursement-form.html',
  controller: 'PdcDisbursementFormController'
};

angular
  .module('admin.accounting')
  .component('pdcDisbursementForm', pdcDisbursementForm);
})(window.angular);
(function(angular){
'use strict';

PdcDisbursementFormController.$inject = ["$state", "PdcDisbursementsService", "VouchersPayablesService", "UsersService", "BankAccountsService", "$rootScope"];
function PdcDisbursementFormController($state, PdcDisbursementsService, VouchersPayablesService, UsersService, BankAccountsService, $rootScope) {
	  
  var ctrl = this;
  
  var currentUser = localStorage.getItem('currentUser');
      if (currentUser != null) {
          ctrl.currentUser = JSON.parse(currentUser);
      }
  
  ctrl.$onInit = function (){
  };
  
  ctrl.$onChanges = function (changes) {
    if (changes.pdc) {
      ctrl.pdc = angular.copy(ctrl.pdc);
    }
  };
  
  
  ctrl.addRow = function(){
	  ctrl.pdc.cheques.push({
		  number: ctrl.chequeNumber,
		  amount: ctrl.amount,
		  date: ctrl.chequeDate,
		  remarks: ctrl.remarks
	  });

	  ctrl.chequeNumber = null;
	  ctrl.amount = null;
	  ctrl.chequeDate = null;
	  ctrl.remarks = null;
  };
  
  ctrl.deleteRow = function(index){
	  ctrl.pdc.cheques.splice(index, 1);
  }
  

  
  ctrl.submitForm = function () {
    ctrl.onSubmit({
      $event: {
    	  pdc: ctrl.pdc
      }
    });
  };

  

}

angular
  .module('admin.accounting')
  .controller('PdcDisbursementFormController', PdcDisbursementFormController);
})(window.angular);
(function(angular){
'use strict';

var pdcDisbursement = {
  templateUrl: './pdc-disbursements.html',
  controller: 'PdcDisbursementController'
};

angular
  .module('admin.accounting')
  .component('pdcDisbursement', pdcDisbursement)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('pdc-disbursements', {
        parent: 'app',
        url: '/admin/accounting/pdc-disbursement',
        component: 'pdcDisbursement'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

PdcDisbursementController.$inject = ["$state", "PdcDisbursementsService", "ReportsService", "$rootScope"];
function PdcDisbursementController($state, PdcDisbursementsService, ReportsService, $rootScope) {
  var ctrl = this;
  
  ctrl.pdcDisbursements = [];

  ctrl.searchNumber = '';
  ctrl.searchRRNumber = '';
  ctrl.sortType = 'number';
  ctrl.sortReverse = false;
  ctrl.readonly = true;
  
  ctrl.$onInit = function () {
	  ctrl.addPurchaseRequest = false;
	  ctrl.error = null;
	  loadPdcDisbursements();
  };
  
  
  ctrl.exportReport = function (){
	  var reportTitle = {title: 'Report : PDC Report'};
	  var dates = {dates: 'Date Range:' + ctrl.startDate.getFullYear() + "-" + (ctrl.startDate.getMonth() + 1) + "-" + ctrl.startDate.getDate() + " to "+
		  ctrl.endDate.getFullYear() + "-" + (ctrl.endDate.getMonth() + 1) + "-" + ctrl.endDate.getDate()}
	  var headers = {
			    number: 'Payee'.replace(/,/g, ''), // remove commas to avoid errors
			    date: "Cheque Details",
			    payee: "Chk Date",
			    amount: "Amount",
			    status: "Status",
	  };
	  
	  PdcDisbursementsService.getByCompanyAndDates(ctrl.company.id, ctrl.startDate, ctrl.endDate).then(function(response){
		  console.log(response.data);
		  ReportsService.exportCSVFile(headers, reportTitle, dates, response.data, "print");
	  });
  };
  
  
  function loadPdcDisbursements(){
	ctrl.company = $rootScope.selectedCompany;
	PdcDisbursementsService.list().then((response) => {
      ctrl.pdcDisbursements = response.data;
      console.log("response purchase voucher" + JSON.stringify(ctrl.pdcDisbursements));
    });
	
	  
  }

  ctrl.openModal = function(pdcDisbursement){
	  console.log("openModal");
    ctrl.pdc = pdcDisbursement;
  };
  
  
  ctrl.print = function(){
	  window.print();
  };
  
/*
  ctrl.openModalApprovedItem = function(approvedItem) {
    console.log("openModalApprovedItem");
    ctrl.approvedItem = approvedItem;
  };*/
  
}

angular
  .module('admin.accounting')
  .controller('PdcDisbursementController', PdcDisbursementController);
})(window.angular);
(function(angular){
'use strict';
var chequePrintingForm = {
  bindings: {
    cp: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './cheque-printing-form.html',
  controller: 'ChequePrintingFormController'
};

angular
  .module('admin.accounting')
  .component('chequePrintingForm', chequePrintingForm);
})(window.angular);
(function(angular){
'use strict';

ChequePrintingFormController.$inject = ["$state", "ChequePrintingsService", "VouchersPayablesService", "UsersService", "BankAccountsService", "$rootScope"];
function ChequePrintingFormController($state, ChequePrintingsService, VouchersPayablesService, UsersService, BankAccountsService, $rootScope) {
	  
  var ctrl = this;
  
  var currentUser = localStorage.getItem('cupventUser');
      if (currentUser != null) {
          ctrl.currentUser = JSON.parse(currentUser);
      }
  
  ctrl.$onInit = function (){
	  ctrl.company = $rootScope.selectedCompany;
	    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));

	  UsersService.get(ctrl.user.id).then(function(response){
		  ctrl.user = response.data;
	  });
	  
	  BankAccountsService.list().then(function(response){
		  ctrl.bankAccounts = response.data;
	  });
	  ctrl.totalAmount = 0;
  };
  
  ctrl.$onChanges = function (changes) {
    if (changes.cp) {
      ctrl.cp = angular.copy(ctrl.cp);
    }
  };
  
  
  ctrl.selectMultipleVouchers = function (v){
	  if(ctrl.cp.payables.indexOf(v) !== -1){
		  var index = ctrl.cp.payables.indexOf(v);
		  ctrl.cp.payables.splice(index, 1);
		  ctrl.totalAmount -= v.totalAmount;
	  }else{
		  ctrl.cp.payables.push(v);
		  ctrl.totalAmount += v.totalAmount;
	  }
  };
  

  ctrl.findVouchersPayable = function() {
    VouchersPayablesService.getByCompanyAndVendorAndStatus(ctrl.cp.company.id, ctrl.cp.vendor.id, 'Approved').then(function(response) {
      ctrl.payables = response.data;
    });
  };

  ctrl.viewVp = function(vp){
	  ctrl.vp = vp;
  };
  
  ctrl.submitForm = function () {
    ctrl.onSubmit({
      $event: {
    	  cp: ctrl.cp
      }
    });
  };

  

}

angular
  .module('admin.accounting')
  .controller('ChequePrintingFormController', ChequePrintingFormController);
})(window.angular);
(function(angular){
'use strict';
var chequePrintingNew = {
  templateUrl: './cheque-printing-new.html',
  controller: 'ChequePrintingNewController'
};

angular
  .module('admin.accounting')
  .component('chequePrintingNew', chequePrintingNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('cheque-printing-new', {
        parent: 'app',
        url: '/admin/accounting/cheque-printing/new',
        component: 'chequePrintingNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

ChequePrintingNewController.$inject = ["$state", "ChequePrintingsService", "$rootScope"];
function ChequePrintingNewController($state, ChequePrintingsService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    ctrl.company = $rootScope.selectedCompany;
    ctrl.cp = {
    		company: ctrl.company,
    		chequeDate: new Date(),
    		payables: []
    }
    };

  ctrl.createChequePrinting = function (event) {
    ChequePrintingsService.save(event.cp).then(function (response) {
    	  console.log("createChequePrinting " + JSON.stringify(response.data));
        $state.go('cheque-printings');
    });

  };
}

angular
  .module('admin.accounting')
  .controller('ChequePrintingNewController', ChequePrintingNewController);
})(window.angular);
(function(angular){
'use strict';
var pdcVoucherForm = {
  bindings: {
    pdc: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './pdc-voucher-form.html',
  controller: 'PdcVoucherFormController'
};

angular
  .module('admin.accounting')
  .component('pdcVoucherForm', pdcVoucherForm);
})(window.angular);
(function(angular){
'use strict';

PdcVoucherFormController.$inject = ["$state", "PdcVouchersService", "PdcDisbursementsService", "UsersService", "BankAccountsService", "$rootScope"];
function PdcVoucherFormController($state, PdcVouchersService, PdcDisbursementsService, UsersService, BankAccountsService, $rootScope) {
	  
  var ctrl = this;
  
  var currentUser = localStorage.getItem('currentUser');
      if (currentUser != null) {
          ctrl.currentUser = JSON.parse(currentUser);
      }
  
  ctrl.$onInit = function (){
  };
  
  ctrl.$onChanges = function (changes) {
    if (changes.pdc) {
      ctrl.pdc = angular.copy(ctrl.pdc);
    }
  };
  
  ctrl.loadDisbursements = function(){
	  PdcDisbursementsService.listByStatus("Pending").then(function(response){
		  ctrl.disbursements = response.data;
	  });
  };
  
  
  ctrl.getDisbursement = function(d){
	  console.log(d);
	  ctrl.pdc.disbursement = d;
  }
  
  ctrl.submitForm = function () {
    ctrl.onSubmit({
      $event: {
    	  pdc: ctrl.pdc
      }
    });
  };

  

}

angular
  .module('admin.accounting')
  .controller('PdcVoucherFormController', PdcVoucherFormController);
})(window.angular);
(function(angular){
'use strict';

var chequePrinting = {
  templateUrl: './cheque-printings.html',
  controller: 'ChequePrintingController'
};

angular
  .module('admin.accounting')
  .component('chequePrinting', chequePrinting)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('cheque-printings', {
        parent: 'app',
        url: '/admin/accounting/cheque-printing',
        component: 'chequePrinting'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

ChequePrintingController.$inject = ["$state", "ChequePrintingsService", "$rootScope"];
function ChequePrintingController($state, ChequePrintingsService, $rootScope) {
  var ctrl = this;
  
  ctrl.chequePrintings = [];

  ctrl.searchNumber = '';
  ctrl.searchRRNumber = '';
  ctrl.sortType = 'number';
  ctrl.sortReverse = false;
  
  
  ctrl.$onInit = function () {
	  ctrl.addJournalRequest = false;
	  ctrl.error = null;
	  loadChequePrintings();
  };
  
  
  function loadChequePrintings(){
	ctrl.company = $rootScope.selectedCompany;
	ChequePrintingsService.listByCompany(ctrl.company.id).then((response) => {
      ctrl.chequePrintings = response.data;
      console.log("response v" + JSON.stringify(ctrl.chequePrintings));
    });
	  
  }

  ctrl.viewVp = function(vp){
	  ctrl.vp = vp;
  };
  
  ctrl.openModal = function(chequePrinting){
	  console.log("openModal");
    ctrl.cp = chequePrinting;
  };
  
  ctrl.approve = function(cpId){
	  ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
	  ChequePrintingsService.approve(cpId, ctrl.user.id).then(function(response){
		  if(response.data){
			  alert("Approved");
			  loadChequePrintings();
		  }
	  });
  };
  
  ctrl.print = function(){
	  window.print();
  };
  
  ctrl.goToEdit = function (id) {
	    $state.go('cheque-printing-edit', { 'chequePrintingId': id });
   }
/*
  ctrl.openModalApprovedItem = function(approvedItem) {
    console.log("openModalApprovedItem");
    ctrl.approvedItem = approvedItem;
  };*/
  
}

angular
  .module('admin.accounting')
  .controller('ChequePrintingController', ChequePrintingController);
})(window.angular);
(function(angular){
'use strict';

var pdcVoucher = {
  templateUrl: './pdc-vouchers.html',
  controller: 'PdcVoucherController'
};

angular
  .module('admin.accounting')
  .component('pdcVoucher', pdcVoucher)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('pdc-vouchers', {
        parent: 'app',
        url: '/admin/accounting/pdc-voucher',
        component: 'pdcVoucher'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

PdcVoucherController.$inject = ["$state", "PdcVouchersService", "$rootScope"];
function PdcVoucherController($state, PdcVouchersService, $rootScope) {
  var ctrl = this;
  
  ctrl.pdcVouchers = [];

  ctrl.searchNumber = '';
  ctrl.searchRRNumber = '';
  ctrl.sortType = 'number';
  ctrl.sortReverse = false;
  
  
  ctrl.$onInit = function () {
	  ctrl.addPurchaseRequest = false;
	  ctrl.error = null;
	  loadPdcVouchers();
  };
  
  
  function loadPdcVouchers(){
	ctrl.company = $rootScope.selectedCompany;
	PdcVouchersService.list().then((response) => {
      ctrl.pdcVouchers = response.data;
      console.log("response purchase voucher" + JSON.stringify(ctrl.pdcVouchers));
    });
	
	  
  }

  ctrl.openModal = function(pdcVoucher){
	  console.log("openModal");
    ctrl.pdc = pdcVoucher;
  };
  
  
  ctrl.print = function(){
	  window.print();
  };
  
/*
  ctrl.openModalApprovedItem = function(approvedItem) {
    console.log("openModalApprovedItem");
    ctrl.approvedItem = approvedItem;
  };*/
  
}

angular
  .module('admin.accounting')
  .controller('PdcVoucherController', PdcVoucherController);
})(window.angular);
(function(angular){
'use strict';
var pdcVoucherNew = {
  templateUrl: './pdc-voucher-new.html',
  controller: 'PdcVoucherNewController'
};

angular
  .module('admin.accounting')
  .component('pdcVoucherNew', pdcVoucherNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('pdc-voucher-new', {
        parent: 'app',
        url: '/admin/accounting/pdc-voucher/new',
        component: 'pdcVoucherNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

PdcVoucherNewController.$inject = ["$state", "PdcVouchersService", "$rootScope"];
function PdcVoucherNewController($state, PdcVouchersService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    ctrl.company = $rootScope.selectedCompany;
    ctrl.pdc = {
    		company: ctrl.company,
    		date: new Date()
    }
    };

  ctrl.createPdcVoucher = function (event) {
    PdcVouchersService.save(event.pdc).then(function (response) {
    	  console.log("createPdcVoucher " + JSON.stringify(response.data));
    	  alert("PDC Voucher successfully added");
    	  $state.go("pdc-vouchers");
    });

  };
}

angular
  .module('admin.accounting')
  .controller('PdcVoucherNewController', PdcVoucherNewController);
})(window.angular);
(function(angular){
'use strict';
var purchaseVoucherEdit = {
  templateUrl: './purchase-voucher-edit.html',
  controller: 'PurchaseVoucherEditController'
};

angular
  .module('admin.accounting')
  .component('purchaseVoucherEdit', purchaseVoucherEdit)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('purchase-voucher-edit', {
        parent: 'app',
        url: '/admin/purchase-vouchers/edit/:purchaseVoucherId',
        component: 'purchaseVoucherEdit'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

PurchaseVoucherEditController.$inject = ["$state", "$stateParams", "PurchaseVouchersService", "$rootScope"];
function PurchaseVoucherEditController($state, $stateParams, PurchaseVouchersService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    ctrl.company = $rootScope.selectedCompany;
    
    console.log('pjvId: ' + JSON.stringify($stateParams.purchaseVoucherId));
    
    PurchaseVouchersService.get($stateParams.purchaseVoucherId).then(function(response){
    	ctrl.pv = response.data;
    	ctrl.pv.preparedBy = ctrl.user;
    	console.log("asdasd" + JSON.stringify(ctrl.pv));
    });
    
  };

  ctrl.editPurchaseVoucher = function (event) {
    PurchaseVouchersService.save(event.pv).then(function (response) {
    	  console.log("editPurchaseVoucher " + JSON.stringify(response.data));
        $state.go('purchase-vouchers');
    });

  };
}

angular
  .module('admin.accounting')
  .controller('PurchaseVoucherEditController', PurchaseVoucherEditController);
})(window.angular);
(function(angular){
'use strict';
var purchaseVoucherNew = {
  templateUrl: './purchase-voucher-new.html',
  controller: 'PurchaseVoucherNewController'
};

angular
  .module('admin.accounting')
  .component('purchaseVoucherNew', purchaseVoucherNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('purchase-voucher-new', {
        parent: 'app',
        url: '/admin/accounting/purchase-voucher/new',
        component: 'purchaseVoucherNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

PurchaseVoucherNewController.$inject = ["$state", "PurchaseVouchersService", "$rootScope"];
function PurchaseVoucherNewController($state, PurchaseVouchersService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    ctrl.company = $rootScope.selectedCompany;
    ctrl.pv = {
    		company: ctrl.company,
    		date: new Date(),
    		accountTitles: [],
    		manual: false,
    		type: "PJV",
    		preparedBy: ctrl.user
    }
    };

  ctrl.createPurchaseVoucher = function (event) {
    PurchaseVouchersService.save(event.pv).then(function (response) {
    	  console.log("createPurchaseVoucher " + JSON.stringify(response.data));
    	  alert("PJV successfully added");
    	  ctrl.pv.number = response.data.number;
    	  ctrl.pv.id = response.data.id;
    });

  };
}

angular
  .module('admin.accounting')
  .controller('PurchaseVoucherNewController', PurchaseVoucherNewController);
})(window.angular);
(function(angular){
'use strict';
var purchaseVoucherForm = {
  bindings: {
    pv: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './purchase-voucher-form.html',
  controller: 'PurchaseVoucherFormController'
};

angular
  .module('admin.accounting')
  .component('purchaseVoucherForm', purchaseVoucherForm);
})(window.angular);
(function(angular){
'use strict';

PurchaseVoucherFormController.$inject = ["$state", "PurchaseVouchersService", "ReceivingReceiptsService", "PurchaseOrdersService", "UsersService", "$rootScope"];
function PurchaseVoucherFormController($state, PurchaseVouchersService, ReceivingReceiptsService, PurchaseOrdersService, UsersService, $rootScope) {
	  
  var ctrl = this;
  
  var currentUser = localStorage.getItem('currentUser');
      if (currentUser != null) {
          ctrl.currentUser = JSON.parse(currentUser);
      }
  
  ctrl.$onInit = function (){
	  ctrl.company = $rootScope.selectedCompany;
	  ctrl.printFlag = false;
	    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));

	  UsersService.get(ctrl.user.id).then(function(response){
		  ctrl.user = response.data;
	  });
  };
  
  ctrl.$onChanges = function (changes) {
    if (changes.pv) {
      ctrl.pv = angular.copy(ctrl.pv);
    }
  };

  
  ctrl.toggleAdjustment = function(flag){
	  
		  ctrl.pv = {date: new Date(),
			  	manual: flag, 
			  	accountTitles: [],
			  	company: ctrl.company,
	    		type: "PJV",
	    		preparedBy: ctrl.user};
  };

  ctrl.findReceivingReceipts = function() {
    ReceivingReceiptsService.listRrWithoutPurchaseVoucher(ctrl.company.id).then(function(response) {
      ctrl.receivingReceipts = response.data;
      console.log(ctrl.receivingReceipts);
    });
  };

  ctrl.selectReceivingReceipt = function (rr){
	  ctrl.pv.rrNumber = rr.number;
	  ctrl.pv.siNumber = rr.siNumber;
	  ctrl.pv.drNumber = rr.drNumber;
	  ctrl.pv.poNumber = rr.poNumber;
	  ctrl.pv.rrDate = rr.date;
	  PurchaseOrdersService.getByNumber(rr.poNumber).then(function(response){
		  ctrl.pv.vendor = response.data.vendor;
	  });
	  ctrl.rrValidFlag = 'true';
  };
  
  ctrl.submitForm = function () {
	ctrl.company = $rootScope.selectedCompany;
    ctrl.onSubmit({
      $event: {
    	  pv: ctrl.pv
      }
    });
    
    ctrl.printFlag = true;
  };
  
  ctrl.validateRrNumber = function(){
	  ctrl.company = $rootScope.selectedCompany;
	  if(ctrl.pv.id == undefined){
		  PurchaseVouchersService.isRrNumberValid(ctrl.company.id, ctrl.pv.rrNumber).then(function(response){
			  ctrl.rrValidFlag = response.data;
			  if(ctrl.rrValidFlag){
				  alert("RR Number is OK");
			  }else{
				  alert("RR already has PJV");
			  }
		  });
	  }
	  else{
		  console.log("ASDASD " + ctrl.pv.id);
		  PurchaseVouchersService.get(ctrl.pv.id).then(function(response){
			  if(ctrl.pv.rrNumber === response.data.rrNumber){
				  alert("RR Number is OK");
			  }else{
				  PurchaseVouchersService.isRrNumberValid(ctrl.company.id, ctrl.pv.rrNumber).then(function(response){
					  ctrl.rrValidFlag = response.data;
					  if(ctrl.rrValidFlag){
						  alert("RR Number is OK");
					  }else{
						  alert("RR already has PJV");
					  }
				  });
			  }
		  });
		  
	  }
	  
  };
  

}

angular
  .module('admin.accounting')
  .controller('PurchaseVoucherFormController', PurchaseVoucherFormController);
})(window.angular);
(function(angular){
'use strict';

var purchaseVoucher = {
  templateUrl: './purchase-vouchers.html',
  controller: 'PurchaseVoucherController'
};

angular
  .module('admin.accounting')
  .component('purchaseVoucher', purchaseVoucher)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('purchase-vouchers', {
        parent: 'app',
        url: '/admin/accounting/purchase-voucher',
        component: 'purchaseVoucher'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

PurchaseVoucherController.$inject = ["$state", "ReportsService", "PurchaseVouchersService", "$rootScope"];
function PurchaseVoucherController($state, ReportsService, PurchaseVouchersService, $rootScope) {
  var ctrl = this;
  
  ctrl.purchaseVouchers = [];

  ctrl.searchNumber = '';
  ctrl.searchRRNumber = '';
  ctrl.sortType = 'number';
  ctrl.sortReverse = false;
  
  
  ctrl.$onInit = function () {
	  ctrl.addPurchaseRequest = false;
	  ctrl.error = null;
	  loadPurchaseVouchers();
  };
  
  ctrl.exportReport = function (){
	  var reportTitle = {title: 'Report : Purchase Journal Voucher Report'};
	  var dates = {dates: 'Date Range:' + ctrl.startDate.getFullYear() + "-" + (ctrl.startDate.getMonth() + 1) + "-" + ctrl.startDate.getDate() + " to "+
		  ctrl.endDate.getFullYear() + "-" + (ctrl.endDate.getMonth() + 1) + "-" + ctrl.endDate.getDate()}
	  var headers = {
			    number: 'PJV No'.replace(/,/g, ''), // remove commas to avoid errors
			    date: "Date",
			    payee: "Payee",
			    amount: "Amount",
			    status: "Status"
	  };
	  
	  PurchaseVouchersService.getByCompanyAndDates(ctrl.company.id, ctrl.startDate, ctrl.endDate).then(function(response){
		  console.log(response.data);
		  ReportsService.exportCSVFile(headers, reportTitle, dates, response.data, "print");
	  });
  };
  
  
  function loadPurchaseVouchers(){
	ctrl.company = $rootScope.selectedCompany;
	PurchaseVouchersService.listByCompany(ctrl.company.id).then((response) => {
      ctrl.purchaseVouchers = response.data;
      console.log("response purchase voucher" + JSON.stringify(ctrl.purchaseVouchers));
    });
	
	  
  }

  ctrl.openModal = function(purchaseVoucher){
	  console.log("openModal");
    ctrl.pv = purchaseVoucher;
  };
  
  ctrl.approve = function(pvId){
	  ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
	  PurchaseVouchersService.approve(pvId, ctrl.user.id).then(function(response){
		  if(response.data){
			  alert("Approved");
			  loadPurchaseVouchers();
		  }
	  });
  };
  
  ctrl.print = function(){
	  window.print();
  };
  
  ctrl.goToEdit = function (id) {
	    $state.go('purchase-voucher-edit', { 'purchaseVoucherId': id });
   }
/*
  ctrl.openModalApprovedItem = function(approvedItem) {
    console.log("openModalApprovedItem");
    ctrl.approvedItem = approvedItem;
  };*/
  
}

angular
  .module('admin.accounting')
  .controller('PurchaseVoucherController', PurchaseVoucherController);
})(window.angular);
(function(angular){
'use strict';
})(window.angular);
(function(angular){
'use strict';
})(window.angular);
(function(angular){
'use strict';
var vouchersPayableNew = {
  templateUrl: './vouchers-payable-new.html',
  controller: 'VouchersPayableNewController'
};

angular
  .module('admin.accounting')
  .component('vouchersPayableNew', vouchersPayableNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('vouchers-payable-new', {
        parent: 'app',
        url: '/admin/accounting/vouchers-payable/new',
        component: 'vouchersPayableNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

VouchersPayableNewController.$inject = ["$state", "VouchersPayablesService", "$rootScope"];
function VouchersPayableNewController($state, VouchersPayablesService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    ctrl.company = $rootScope.selectedCompany;
    ctrl.vp = {
    		company: ctrl.company,
    		date: new Date(),
    		accountTitles: [],
    		variation: '1 Voucher'
    }
    };

  ctrl.createVouchersPayable = function (event) {
    VouchersPayablesService.save(event.vp).then(function (response) {
    	  console.log("createVouchersPayable " + JSON.stringify(response.data));
        $state.go('vouchers-payables');
    });

  };
}

angular
  .module('admin.accounting')
  .controller('VouchersPayableNewController', VouchersPayableNewController);
})(window.angular);
(function(angular){
'use strict';
var vouchersPayableForm = {
  bindings: {
    vp: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './vouchers-payable-form.html',
  controller: 'VouchersPayableFormController'
};

angular
  .module('admin.accounting')
  .component('vouchersPayableForm', vouchersPayableForm);
})(window.angular);
(function(angular){
'use strict';

VouchersPayableFormController.$inject = ["$state", "VouchersPayablesService", "VouchersService", "JournalVouchersService", "PurchaseVouchersService", "$rootScope"];
function VouchersPayableFormController($state, VouchersPayablesService, VouchersService, JournalVouchersService, PurchaseVouchersService, $rootScope) {
	  
  var ctrl = this;
  
  var currentUser = localStorage.getItem('cupventUser');
      if (currentUser != null) {
          ctrl.currentUser = JSON.parse(currentUser);
      }
  
  ctrl.$onInit = function (){
	  ctrl.company = $rootScope.selectedCompany;
	  ctrl.totalAmount = 0;
  };
  
  ctrl.$onChanges = function (changes) {
    if (changes.vp) {
      ctrl.vp = angular.copy(ctrl.vp);
    }
  };
  
  ctrl.toggleVariation = function(){
	  ctrl.vp = {
	    		company: ctrl.company,
	    		date: new Date(),
	    		accountTitles: [],
	    		variation: ctrl.vp.variation,
	    		vouchers: []
	    }
  };

  ctrl.findNewVouchers = function() {
    VouchersService.listNewVouchersByCompanyAndStatus(ctrl.company.id, 'Approved').then(function(response) {
      ctrl.vouchers = response.data;
    });
  };
  
  ctrl.findPurchaseVouchersWithoutAdjustments = function() {
	  PurchaseVouchersService.getPvWithoutAdjustmentsByCompanyAndVendorAndStatus(ctrl.company.id, ctrl.vp.vendor.id, 'Approved').then(function(response){
		  ctrl.vouchers = response.data;
		  console.log(ctrl.vouchers + " hi");
	  });
  };
  
  ctrl.findJournalVouchersWithoutAdjustments = function() {
	  JournalVouchersService.getJvWithoutAdjustmentsByCompanyAndVendorAndStatus(ctrl.company.id, ctrl.vp.vendor.id, 'Approved').then(function(response){
		  ctrl.vouchers = response.data;
		  console.log(ctrl.vouchers + " hi");
	  });
  };
  
  ctrl.selectMultipleVouchers = function (v){
	  if(ctrl.vp.vouchers.indexOf(v) !== -1){
		  var index = ctrl.vp.vouchers.indexOf(v);
		  ctrl.vp.vouchers.splice(index, 1);
		  ctrl.totalAmount -= v.totalAmount;
	  }else{
		  ctrl.vp.vouchers.push(v);
		  ctrl.totalAmount += v.totalAmount;
	  }
  };

  ctrl.selectVoucher = function (v){
	  ctrl.vp.voucher = v;
	  /*
	  ctrl.vp.siNumber = v.siNumber;
	  ctrl.vp.drNumber = v.drNumber;
	  ctrl.vp.poNumber = v.poNumber;
	  ctrl.vp.rrNumber = v.rrNumber;*/
	  ctrl.vp.vendor = v.vendor;
	  //ctrl.vp.rrDate = v.rrDate;
	  ctrl.totalAmount = 0;
	  JournalVouchersService.listAdjustmentsOfVoucherByCompany(v.id, ctrl.company.id).then(function(response){
		  ctrl.adjustments = response.data;
		  for(var i = 0; i < ctrl.adjustments.length; i++){
			  ctrl.totalAmount += ctrl.adjustments[i].totalAmount;
		  }
		  ctrl.totalAmount += ctrl.vp.voucher.totalAmount;
	  });
  };
  
  ctrl.submitForm = function () {
    ctrl.onSubmit({
      $event: {
    	  vp: ctrl.vp
      }
    });
  };

  

}

angular
  .module('admin.accounting')
  .controller('VouchersPayableFormController', VouchersPayableFormController);
})(window.angular);
(function(angular){
'use strict';

var vouchersPayable = {
  templateUrl: './vouchers-payables.html',
  controller: 'VouchersPayableController'
};

angular
  .module('admin.accounting')
  .component('vouchersPayable', vouchersPayable)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('vouchers-payables', {
        parent: 'app',
        url: '/admin/accounting/vouchers-payable',
        component: 'vouchersPayable'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

VouchersPayableController.$inject = ["$state", "VouchersPayablesService", "ReportsService", "$rootScope"];
function VouchersPayableController($state, VouchersPayablesService, ReportsService, $rootScope) {
  var ctrl = this;
  
  ctrl.vouchersPayables = [];

  ctrl.searchNumber = '';
  ctrl.searchRRNumber = '';
  ctrl.sortType = 'number';
  ctrl.sortReverse = false;
  
  
  ctrl.$onInit = function () {
	  ctrl.addJournalRequest = false;
	  ctrl.error = null;
	  loadVouchersPayables();
  };
  
  ctrl.exportReport = function (){
	  var reportTitle = {title: 'Report : Vouchers Payable Report'};
	  var dates = {dates: 'Date Range:' + ctrl.startDate.getFullYear() + "-" + (ctrl.startDate.getMonth() + 1) + "-" + ctrl.startDate.getDate() + " to "+
		  ctrl.endDate.getFullYear() + "-" + (ctrl.endDate.getMonth() + 1) + "-" + ctrl.endDate.getDate()}
	  var headers = {
			    number: 'VP No'.replace(/,/g, ''), // remove commas to avoid errors
			    date: "Date",
			    payee: "Payee",
			    amount: "Amount",
			    status: "Status"
	  };
	  
	  VouchersPayablesService.getByCompanyAndDates(ctrl.company.id, ctrl.startDate, ctrl.endDate).then(function(response){
		  console.log(response.data);
		  ReportsService.exportCSVFile(headers, reportTitle, dates, response.data, "print");
	  });
  };
  
  function loadVouchersPayables(){
	ctrl.company = $rootScope.selectedCompany;
	VouchersPayablesService.listByCompany(ctrl.company.id).then((response) => {
      ctrl.vouchersPayables = response.data;
      console.log("response v" + JSON.stringify(ctrl.vouchersPayables));
    });
	  
  }

  ctrl.openModal = function(vouchersPayable){
	  console.log("openModal");
    ctrl.vp = vouchersPayable;
  };
  
  ctrl.approve = function(event){
	  ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
	  VouchersPayablesService.approve(event.vpId, ctrl.user.id).then(function(response){
		  if(response.data){
			  alert("Approved");
			  loadVouchersPayables();
		  }
	  });
  };
  
  ctrl.print = function(){
	  window.print();
  };
  
  ctrl.goToEdit = function (id) {
	    $state.go('vouchers-payable-edit', { 'vouchersPayableId': id });
   }
/*
  ctrl.openModalApprovedItem = function(approvedItem) {
    console.log("openModalApprovedItem");
    ctrl.approvedItem = approvedItem;
  };*/
  
}

angular
  .module('admin.accounting')
  .controller('VouchersPayableController', VouchersPayableController);
})(window.angular);
(function(angular){
'use strict';
var purchaseOrderForm = {
  bindings: {
    po: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './purchase-order-form.html',
  controller: 'PurchaseOrderFormController'
};

angular
  .module('admin.purchasing')
  .component('purchaseOrderForm', purchaseOrderForm);
})(window.angular);
(function(angular){
'use strict';

PurchaseOrderFormController.$inject = ["$state", "PurchaseOrdersService", "AreasService", "DepartmentsService"];
function PurchaseOrderFormController($state, PurchaseOrdersService, AreasService, DepartmentsService) {
  var ctrl = this;
  
  ctrl.$onChanges = function (changes) {
    if (changes.po) {
      ctrl.po = angular.copy(ctrl.po);
    }
  };
  
  ctrl.$onInit = function() {
	  DepartmentsService.list().then(function(response){
		  ctrl.departments = response.data;
	  });
	  AreasService.list().then(function(response){
		  ctrl.areas = response.data;
		  ctrl.po.area = ctrl.areas[0];
	  });
	  ctrl.po.purchaseRequests = [];
	  ctrl.po.orderedItems = [];
	  

  };

  ctrl.computeTotalAmount = function(value, index){
	  ctrl.po.orderedItems[index].amount = value;
	  ctrl.po.totalAmount = 0;
	  for(var i = 0; i < ctrl.po.orderedItems.length; i++){
		  ctrl.po.totalAmount += ctrl.po.orderedItems[i].quantity * ctrl.po.orderedItems[i].unitPrice ;
	  }
  };
  
  ctrl.addVat = function(){
	  if(ctrl.po.vat){
		 ctrl.po.totalAmount = ctrl.po.totalAmount + (ctrl.po.totalAmount * 0.12);
	  }else{
		 ctrl.po.totalAmount = ctrl.po.totalAmount - (ctrl.po.totalAmount * 0.12);
	  }
  };
  
  ctrl.submitForm = function () {
    console.log('submitForm: ' + JSON.stringify(ctrl.po));
    ctrl.onSubmit({
      $event: {
    	  po: ctrl.po
      }
    });
  };
  
}

angular
  .module('admin.purchasing')
  .controller('PurchaseOrderFormController', PurchaseOrderFormController);
})(window.angular);
(function(angular){
'use strict';
var purchaseOrderNew = {
  templateUrl: './purchase-order-new.html',
  controller: 'PurchaseOrderNewController'
};

angular
  .module('admin.purchasing')
  .component('purchaseOrderNew', purchaseOrderNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('purchase-order-new-new', {
        parent: 'app',
        url: '/admin/purchasing/new',
        component: 'purchaseOrderNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

PurchaseOrderNewController.$inject = ["$state", "PurchaseOrdersService", "$rootScope"];
function PurchaseOrderNewController($state, PurchaseOrdersService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    ctrl.po = {
    		company: $rootScope.selectedCompany,
    		department: ctrl.user.department
    };
  };

  ctrl.createPurchaseOrder = function (event) {
    PurchaseOrdersService.save(event.po).then(function (response) {
    	  console.log("create " + JSON.stringify(response.data));
      $state.go('purchase-orders');
    });

  };
}

angular
  .module('admin.purchasing')
  .controller('PurchaseOrderNewController', PurchaseOrderNewController);
})(window.angular);
(function(angular){
'use strict';

var purchaseOrders = {
  bindings: {
  },
  templateUrl: './purchase-orders.html',
  controller: 'PurchaseOrdersController'
};

angular
  .module('admin.purchasing')
  .component('purchaseOrders', purchaseOrders)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('purchase-orders', {
        parent: 'app',
        url: '/admin/purchasing',
        component: 'purchaseOrders'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

PurchaseOrdersController.$inject = ["$state", "PurchaseOrdersService", "CompanyService", "ReceivingReceiptsService", "$rootScope", "_"];
function PurchaseOrdersController($state, PurchaseOrdersService, CompanyService, ReceivingReceiptsService, $rootScope, _) {
  var ctrl = this;
  ctrl.purchaseOrders = [];
  ctrl.companies = [];
  
  ctrl.searchPoNumber = '';
  ctrl.searchDueDate = '';
  ctrl.sortType = 'number';
  ctrl.sortReverse = false;
  

  ctrl.$onInit = function () {
	  ctrl.error = null;
	  loadPurchaseOrders();
  };
  
  function loadPurchaseOrders(){
	  ctrl.company = $rootScope.selectedCompany;
	  PurchaseOrdersService.listByCompany(ctrl.company.id).then(function(response){
		  console.log("list response: " + JSON.stringify(response.data));
		  ctrl.purchaseOrders = response.data;
	  });

  }
  
  ctrl.openModal = function(purchaseOrder){
	  console.log("show modal" +  ctrl.showModal);
	  console.log("purchaseRequest" + JSON.stringify(purchaseOrder));
	  ctrl.po = purchaseOrder;
	  ReceivingReceiptsService.listByCompanyForPo(ctrl.company.id, ctrl.po.id).then(function(response){
		  ctrl.receivingReceipts = response.data;
	  });
  };
  
  ctrl.viewPrf = function(prf){
	  ctrl.prf = prf;
	  $('#prfInfoModal').modal('show');
  };
  
  ctrl.viewRr = function(rr){
	  ctrl.rr = rr;
  };
}

angular
  .module('admin.purchasing')
  .controller('PurchaseOrdersController', PurchaseOrdersController);
})(window.angular);
(function(angular){
'use strict';
var accountTitleForm = {
  bindings: {
    accounttitle: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './account-title-form.html',
  controller: 'AccountTitleFormController'
};

angular
  .module('admin.maintenance')
  .component('accountTitleForm', accountTitleForm);
})(window.angular);
(function(angular){
'use strict';

AccountTitleFormController.$inject = ["$state", "AccountTitlesService"];
function AccountTitleFormController($state, AccountTitlesService) {
  var ctrl = this;

  ctrl.$onChanges = function (changes) {
    if (changes.accounttitle) {
      ctrl.accounttitle = angular.copy(ctrl.accounttitle);
    }
  };

  ctrl.submitForm = function () {
    console.log('submitForm: ' + JSON.stringify(ctrl.accounttitle));
    ctrl.onSubmit({
      $event: {
        accounttitle: ctrl.accounttitle
      }
    });
  };
}

angular
  .module('admin.maintenance')
  .controller('AccountTitleFormController', AccountTitleFormController);
})(window.angular);
(function(angular){
'use strict';

var accountTitle = {
		bindings : {
			maintenance : '<'
		},
  templateUrl: './account-titles.html',
  controller: 'AccountTitleController'
};

angular
  .module('admin.maintenance')
  .component('accountTitle', accountTitle)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('account-titles', {
        parent: 'app',
        url: '/admin/maintenance/account-title',
        component: 'accountTitle'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

AccountTitleController.$inject = ["$state", "AccountTitlesService", "_"];
function AccountTitleController($state, AccountTitlesService, _) {
  var ctrl = this;
  ctrl.accountTitles = [];
  ctrl.searchCode = '';
  ctrl.searchName = '';
  ctrl.searchArea = '';
  ctrl.sortType = 'id';
  ctrl.sortReverse = false;
  ctrl.level = 1;
  ctrl.accountTitleHistory = [];
  ctrl.parentId = null;
  
  ctrl.$onInit = function () {
	  ctrl.addAccountTitle = false;
	  ctrl.error = null;
	  loadAccountTitles(1, -1);
  };
  
  function loadAccountTitles(level, parentId){
	  AccountTitlesService.listByLevelAndParentId(level, parentId).then(function(response){
		  console.log("list response: " + JSON.stringify(response.data));
		  ctrl.accountTitles = response.data;
	  });
  }
  
  ctrl.showAddAccountTitle = function (show){
	  ctrl.addAccountTitle = show;
  };
  
  ctrl.editAccountTitle = function (id) {
	  AccountTitlesService.get(id).then(function(response){
		  ctrl.accountTitle = response.data;
	  });
	  ctrl.addAccountTitle = true;
  };
  
  ctrl.saveAccountTitle = function (event) {
	    AccountTitlesService.save(event.accounttitle).then(function () {
	          loadAccountTitles(event.accounttitle.level, event.accounttitle.parent.id);
	    	  ctrl.showAddAccountTitle(false);
	    	  ctrl.accountTitle = null;
	    });
  };
  
  ctrl.digAccountTitle = function(id, title, level, parentId){
	  if(level == 1){
		  id = -1;
		  ctrl.accountTitle = {level: 1};
	  }
	  AccountTitlesService.listByLevelAndParentId(level, id).then(function(response){
		  console.log("list response: " + JSON.stringify(response.data));
		  ctrl.accountTitles = response.data;
		  
		  console.log(level + " " + ctrl.level);
		  if(level < ctrl.level){
			  console.log("splice");
			  ctrl.accountTitleHistory.splice(level-1, ctrl.accountTitleHistory.length);
		  }else if(level > ctrl.level){
			  ctrl.parentId = id; 
			  ctrl.accountTitleHistory.push({id:parentId, title: title, level: ctrl.level});
		  }
		  
		  ctrl.level = level;
	  });
	  
	  if(level != 1){
		  AccountTitlesService.get(id).then(function(response){
			  ctrl.accountTitle = {parent: response.data, level: level};
			  console.log("get resp" + JSON.stringify(ctrl.accountTitle));
		  });
	  }
  };
  
  ctrl.deleteAccountTitle = function (id){
	  AccountTitlesService.delete(id).then(function(response){
		  ctrl.accountTitleHistory = [];
		  loadAccountTitles(1, -1);
	  });
  };
}

angular
  .module('admin.maintenance')
  .controller('AccountTitleController', AccountTitleController);
})(window.angular);
(function(angular){
'use strict';
var classificationForm = {
  bindings: {
    classification: '=',
    company: '<',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './classification-form.html',
  controller: 'ClassificationFormController'
};

angular
  .module('admin.maintenance')
  .component('classificationForm', classificationForm);
})(window.angular);
(function(angular){
'use strict';

ClassificationFormController.$inject = ["$state", "ClassificationsService"];
function ClassificationFormController($state, ClassificationsService) {
  var ctrl = this;

  ctrl.$onChanges = function (changes) {
    if (changes.classification) {
      ctrl.classification = angular.copy(ctrl.classification);
    }
  };
  
  ctrl.$onInit = function() {
	  //ClassificationsService.listTypes().then(function(response){
//		  ctrl.types = response.data;
//	  });
  };

  ctrl.submitForm = function () {
    console.log('submitForm: ' + JSON.stringify(ctrl.classification));
    ctrl.onSubmit({
      $event: {
        classification: ctrl.classification
      }
    });
  };
}

angular
  .module('admin.maintenance')
  .controller('ClassificationFormController', ClassificationFormController);
})(window.angular);
(function(angular){
'use strict';

var classification = {
  templateUrl: './classifications.html',
  controller: 'ClassificationController'
};

angular
  .module('admin.maintenance')
  .component('classification', classification)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('classifications', {
        parent: 'app',
        url: '/admin/maintenance/classification',
        component: 'classification'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

ClassificationController.$inject = ["$state", "ClassificationsService", "$rootScope", "_"];
function ClassificationController($state, ClassificationsService, $rootScope, _) {
  var ctrl = this;
  ctrl.classifications = [];
  ctrl.companies = [];

  ctrl.searchCode = '';
  ctrl.searchName = '';

  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addClassification = false;
	  ctrl.error = null;
	  loadClassifications();
  };
  
  function loadClassifications(){
	  ClassificationsService.list().then(function(response){
		  console.log("list response: " + JSON.stringify(response.data));
		  ctrl.classifications = response.data;
	  });
  }
  
  ctrl.showAddClassification = function (show){
	  ctrl.addClassification = show;
  };
  
  ctrl.editClassification = function (id) {
	  ClassificationsService.get(id).then(function(response){
		  ctrl.classification = response.data;
	  });
	  ctrl.addClassification = true;
  };
  
  ctrl.saveClassification = function (event) {
	    ClassificationsService.save(event.classification).then(function () {
	    	  loadClassifications();
	    	  ctrl.showAddClassification(false);
	    });
  };
  
  ctrl.deleteClassification = function (id){
	  ClassificationsService.delete(id).then(function(response){
		  loadClassifications();
	  });
  };
}

angular
  .module('admin.maintenance')
  .controller('ClassificationController', ClassificationController);
})(window.angular);
(function(angular){
'use strict';

var bankAccount = {
  templateUrl: './bank-accounts.html',
  controller: 'BankAccountController'
};

angular
  .module('admin.maintenance')
  .component('bankAccount', bankAccount)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('bankAccounts', {
        parent: 'app',
        url: '/admin/maintenance/bank-account',
        component: 'bankAccount'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

BankAccountController.$inject = ["$state", "BankAccountsService", "_"];
function BankAccountController($state, BankAccountsService, _) {
  var ctrl = this;
  ctrl.bankAccounts = [];

  ctrl.searchCode = '';
  ctrl.searchName = '';
  ctrl.sortType = 'id';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addBankAccount = false;
	  ctrl.error = null;
    ctrl.getData(ctrl.currentPage);
  };
  
  function loadBankAccounts(){
	  BankAccountsService.list().then(function(response){
		  console.log("list response: " + JSON.stringify(response.data));
		  ctrl.bankAccounts = response.data;
	  });
  }

  ctrl.totalCount = 0;
  ctrl.itemsPerPage = 30;
  ctrl.currentPage = 1;

  ctrl.getData = function(page) {
    BankAccountsService.paginate(ctrl.itemsPerPage, (page - 1) * ctrl.itemsPerPage).then((res) => {
      var data = res.data;
      ctrl.currentPage = page;
      ctrl.totalCount = data.totalElements;
      ctrl.bankAccounts = data.content;
    });
  }
  
  ctrl.showAddBankAccount = function (show){
	  ctrl.addBankAccount = show;
  };
  
  ctrl.editBankAccount = function (id) {
	  BankAccountsService.get(id).then(function(response){
		  ctrl.bankaccount = response.data;
	  });
	  ctrl.addBankAccount = true;
  };
  
  ctrl.saveBankAccount = function (event) {
	    BankAccountsService.save(event.bankaccount).then(function () {
          ctrl.getData(ctrl.currentPage);
	    	  ctrl.showAddBankAccount(false);
	    	  ctrl.bankaccount = null;
	    });
  };
  
  ctrl.deleteBankAccount = function (id){
	  BankAccountsService.delete(id).then(function(response){
		  ctrl.getData(ctrl.currentPage);
	  });
  };
}

angular
  .module('admin.maintenance')
  .controller('BankAccountController', BankAccountController);
})(window.angular);
(function(angular){
'use strict';
var clientInformationEdit = {
  templateUrl: './client-information-edit.html',
  controller: 'ClientInformationEditController'
};

angular
  .module('admin.maintenance')
  .component('clientInformationEdit', clientInformationEdit)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('client-information-edit', {
        parent: 'app',
        url: '/admin/maintenance/client-information/edit/:clientId',
        component: 'clientInformationEdit'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';
ClientInformationEditController.$inject = ["$state", "$stateParams", "ClientsService", "$rootScope"];
function ClientInformationEditController(
  $state,
  $stateParams,
  ClientsService,
  $rootScope
) {
  var ctrl = this;
  ctrl.client = {};
  ctrl.$onInit = function () {
    ctrl.error = null;

    console.log('clientId: ' + JSON.stringify($stateParams.clientId));

    ClientsService.get($stateParams.clientId).then(function (response) {
      ctrl.client = response.data;
    });
  };

  ctrl.edit = function (event) {
    ctrl.client = event;
    var client = JSON.parse(JSON.stringify(event.client));
    console.log(client, 'EDIT');
    $('#confirmAction').modal('hide');
    $('#confirmAction').detach();
    ClientsService.update(client).then(function () {
      $state.go('client-informations');
    });
  };

  ctrl.confirmEdit = function (event) {
    ctrl.event = event;
    $('#confirmAction').appendTo('body').modal('show');
  };

  ctrl.cancel = function () {
    $('#confirmAction').modal('hide');
  };
}

angular
  .module('admin.maintenance')
  .controller(
    'ClientInformationEditController',
    ClientInformationEditController
  );
})(window.angular);
(function(angular){
'use strict';
var bankAccountForm = {
  bindings: {
    bankaccount: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './bank-account-form.html',
  controller: 'BankAccountFormController'
};

angular
  .module('admin.maintenance')
  .component('bankAccountForm', bankAccountForm);
})(window.angular);
(function(angular){
'use strict';

BankAccountFormController.$inject = ["$state", "BankAccountsService"];
function BankAccountFormController($state, BankAccountsService) {
  var ctrl = this;
  ctrl.$onChanges = function (changes) {
    if (changes.bankaccount) {
      ctrl.bankaccount = angular.copy(ctrl.bankaccount);
    }
  };

  ctrl.submitForm = function () {
    console.log('submitForm: ' + JSON.stringify(ctrl.bankaccount));
    ctrl.onSubmit({
      $event: {
    	  bankaccount: ctrl.bankaccount
      }
    });
  };
}

angular
  .module('admin.maintenance')
  .controller('BankAccountFormController', BankAccountFormController);
})(window.angular);
(function(angular){
'use strict';
var clientInformationForm = {
  bindings: {
    client: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './client-information-form.html',
  controller: 'ClientInformationFormController'
};

angular
  .module('admin.maintenance')
  .component('clientInformationForm', clientInformationForm);
})(window.angular);
(function(angular){
'use strict';
ClientInformationFormController.$inject = ["$state", "ClusterCodesService", "SalesRepsService", "InstitutionalCodesService", "DepotsService"];
function ClientInformationFormController(
  $state,
  ClusterCodesService,
  SalesRepsService,
  InstitutionalCodesService,
  DepotsService
) {
  var ctrl = this;

  var currentUser = localStorage.getItem('currentUser');
  if (currentUser != null) {
    ctrl.currentUser = JSON.parse(currentUser);
  }

  ctrl.$onInit = function () {
    console.log(this);
    ClusterCodesService.list().then(function (response) {
      ctrl.clusters = response.data;
    });
    SalesRepsService.list().then(function (response) {
      ctrl.salesReps = response.data;
    });

    InstitutionalCodesService.list().then(function (response) {
      ctrl.institutionalCodes = response.data;
    });

    DepotsService.list().then(function (response) {
      ctrl.depot = response.data;
      console.log(ctrl.deliveryDepots);
    });

    ctrl.status = [
      { value: 'Active', name: 'Active' },
      { value: 'Not Active', name: 'Not Active' },
    ];
  };

  ctrl.$onChanges = function (changes) {
    if (changes.client) {
      ctrl.client = angular.copy(ctrl.client);
    }
  };

  ctrl.addReference = function () {
    console.log('addReference clicked');
    ctrl.client.clientReferencesList.push({
      name: '',
      type: '',
      branch: '',
      telephoneNumber: '',
    });
  };

  ctrl.submitForm = function () {
    console.log('test');
    ctrl.onSubmit({
      $event: {
        client: ctrl.client,
      },
    });
  };
}

angular
  .module('admin.maintenance')
  .controller(
    'ClientInformationFormController',
    ClientInformationFormController
  );
})(window.angular);
(function(angular){
'use strict';

var clientInformation = {
  templateUrl: './client-informations.html',
  controller: 'ClientInformationsController'
};

angular
  .module('admin.maintenance')
  .component('clientInformation', clientInformation)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('client-informations', {
        parent: 'app',
        url: '/admin/maintenance/client-information',
        component: 'clientInformation'
      });
  }]);})(window.angular);
(function(angular){
'use strict';
ClientInformationsController.$inject = ["$state", "$rootScope", "_", "ClientsService"];
function ClientInformationsController($state, $rootScope, _, ClientsService) {
  var ctrl = this;
  ctrl.clientInformations = [];
  ctrl.totalClients = 0;
  ctrl.clientsPerPage = 5;
  ctrl.sortType = 'code';
  ctrl.sortReverse = false;

  ctrl.company = $rootScope.selectedCompany;
  getResultsPage(1);

  ctrl.pagination = {
    current: 1,
  };

  ctrl.pageChanged = function (newPage) {
    getResultsPage(newPage);
  };

  function getResultsPage(pageNumber) {
    // this is just an example, in reality this stuff should be in a service
    ClientsService.paginateByCompany(
      ctrl.company.id,
      ctrl.clientsPerPage,
      pageNumber - 1
    ).then(function (result) {
      console.log('hi', result.data);
      ctrl.clients = result.data.content;
      ctrl.totalClients = result.data.totalElements;
    });
  }

  ctrl.$onInit = function () {
    ctrl.addPurchaseRequest = false;
    ctrl.error = null;
  };

  function loadClients() {
    ClientsService.list().then((response) => {
      ctrl.clientInformations = response.data;
    });
  }

  ctrl.confirmDelete = function (id) {
    $('#confirmDeleteAction').modal('show');
    ctrl.itemName = 'Are you sure you want to delete ?';
    ctrl.id = id;
  };

  // ctrl.cancelDelete = function () {
  //   $('#confirmDeleteAction').modal('hide');
  // };

  // ctrl.deleteFinishedGood = function (id) {
  //   $('#confirmDeleteAction').modal('hide');
  //   ClientsService.delete(id)
  //     .then(function (response) {
  //       ctrl.getData(ctrl.currentPage);
  //       ctrl.actionTitle = 'Confirmation';
  //       ctrl.actionMessage = 'You have successfully deleted the item';
  //     })
  //     .catch(function (error) {
  //       ctrl.actionTitle = 'Error';
  //       ctrl.actionMessage = 'The item was not deleted';
  //     });

  //   $('#confirmAction').modal('hide');
  //   $('#actionDialog').modal('show');
  // };

  ctrl.goToEdit = function (id) {
    $state.go('client-information-edit', { clientId: id });
  };
}

angular
  .module('admin.maintenance')
  .controller('ClientInformationsController', ClientInformationsController);
})(window.angular);
(function(angular){
'use strict';
var clientInformationNew = {
  templateUrl: './client-information-new.html',
  controller: 'ClientInformationNewController'
};

angular
  .module('admin.maintenance')
  .component('clientInformationNew', clientInformationNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('client-information-new', {
        parent: 'app',
        url: '/admin/maintenance/client-information/new',
        component: 'clientInformationNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';
ClientInformationNewController.$inject = ["$state", "ClientsService", "$rootScope"];
function ClientInformationNewController($state, ClientsService, $rootScope) {
  var ctrl = this;

  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
    ctrl.client = {
      company: $rootScope.selectedCompany,
      clientReferencesList: [],
    };
  };

  ctrl.confirmCreate = function (event) {
    ctrl.event = event;
    $('#confirmAction').appendTo('body').modal('show');
  };
  ctrl.cancel = function () {
    $('#confirmAction').modal('hide');
  };

  ctrl.addClient = function (event) {
    ctrl.client = event;
    var client = JSON.parse(JSON.stringify(event.client));
    console.log(client, 'add');
    $('#confirmAction').modal('hide');
    $('#confirmAction').detach();
    ClientsService.save(client).then(function () {
      $state.go('client-informations');
    });
  };
}

angular
  .module('admin.maintenance')
  .controller('ClientInformationNewController', ClientInformationNewController);
})(window.angular);
(function(angular){
'use strict';
var clientForm = {
  bindings: {
    client: '=',
    company: '<',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './client-form.html',
  controller: 'ClientFormController'
};

angular
  .module('admin.maintenance')
  .component('clientForm', clientForm);
})(window.angular);
(function(angular){
'use strict';

ClientFormController.$inject = ["$state", "ClientsService"];
function ClientFormController($state, ClientsService) {
  var ctrl = this;

  ctrl.$onChanges = function (changes) {
    if (changes.client) {
      ctrl.client = angular.copy(ctrl.client);
    }
  };

  ctrl.submitForm = function () {
    console.log('submitForm: ' + JSON.stringify(ctrl.client));
    ctrl.onSubmit({
      $event: {
        client: ctrl.client
      }
    });
  };
}

angular
  .module('admin.maintenance')
  .controller('ClientFormController', ClientFormController);
})(window.angular);
(function(angular){
'use strict';

var client = {
  templateUrl: './clients.html',
  controller: 'ClientController'
};

angular
  .module('admin.maintenance')
  .component('client', client)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('clients', {
        parent: 'app',
        url: '/admin/maintenance/client',
        component: 'client'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

ClientController.$inject = ["$state", "ClientsService", "CompanyService", "$rootScope", "_"];
function ClientController($state, ClientsService, CompanyService, $rootScope, _) {
  var ctrl = this;
  ctrl.clients = [];
  ctrl.companies = [];

  ctrl.searchCode = '';
  ctrl.searchName = '';
  ctrl.searchTin = '';
  ctrl.sortType = 'id';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addClient = false;
	  ctrl.error = null;
	  ctrl.getData(ctrl.currentPage);
  };
  
  function loadClients(){
	  ctrl.company = $rootScope.selectedCompany;
	  ClientsService.listByCompany(ctrl.company.id).then(function(response){
		  console.log("list response: " + JSON.stringify(response.data));
		  ctrl.clients = response.data;
	  });
  }
  
  ctrl.totalCount = 0;
  ctrl.itemsPerPage = 5;
  ctrl.currentPage = 1;
  
  ctrl.getData = function(page) {
	  ctrl.company = $rootScope.selectedCompany;
	    ClientsService.paginateByCompany(ctrl.company.id, ctrl.itemsPerPage, (page - 1) * ctrl.itemsPerPage).then((res) => {
	      var data = res.data;
	      ctrl.currentPage = page;
	      ctrl.totalCount = data.totalElements;
	      ctrl.finishedGoods = data.content;
	    });
	  }
  
  ctrl.showAddClient = function (show){
	  ctrl.addClient = show;
  };
  
  ctrl.editClient = function (id) {
	  ClientsService.get(id).then(function(response){
		  ctrl.client = response.data;
	  });
	  ctrl.addClient = true;
  };
  
  ctrl.saveClient = function (event) {
	    event.client.company = $rootScope.selectedCompany;
	    console.log(event.client.company);
	    ClientsService.save(event.client).then(function () {
	    	  loadClients();
	    	  ctrl.showAddClient(false);
	    });
  };
  
  ctrl.deleteClient = function (id){
	  ClientsService.delete(id).then(function(response){
		  loadClients();
	  });
  };
}

angular
  .module('admin.maintenance')
  .controller('ClientController', ClientController);
})(window.angular);
(function(angular){
'use strict';
var areaForm = {
  bindings: {
    area: '=',
    company: '<',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './area-form.html',
  controller: 'AreaFormController'
};

angular
  .module('admin.maintenance')
  .component('areaForm', areaForm);
})(window.angular);
(function(angular){
'use strict';

AreaFormController.$inject = ["$state", "AreasService"];
function AreaFormController($state, AreasService) {
  var ctrl = this;

  ctrl.$onChanges = function (changes) {
    if (changes.area) {
      ctrl.area = angular.copy(ctrl.area);
    }
  };

  ctrl.submitForm = function () {
    console.log('submitForm: ' + JSON.stringify(ctrl.area));
    ctrl.onSubmit({
      $event: {
        area: ctrl.area
      }
    });
  };
}

angular
  .module('admin.maintenance')
  .controller('AreaFormController', AreaFormController);
})(window.angular);
(function(angular){
'use strict';
var departmentForm = {
  bindings: {
    department: '=',
    company: '<',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './department-form.html',
  controller: 'DepartmentFormController'
};

angular
  .module('admin.maintenance')
  .component('departmentForm', departmentForm);
})(window.angular);
(function(angular){
'use strict';

DepartmentFormController.$inject = ["$state", "DepartmentsService"];
function DepartmentFormController($state, DepartmentsService) {
  var ctrl = this;

  ctrl.$onChanges = function (changes) {
    if (changes.department) {
      ctrl.department = angular.copy(ctrl.department);
    }
  };

  ctrl.submitForm = function () {
    console.log('submitForm: ' + JSON.stringify(ctrl.department));
    ctrl.onSubmit({
      $event: {
    	  department: ctrl.department
      }
    });
  };
}

angular
  .module('admin.maintenance')
  .controller('DepartmentFormController', DepartmentFormController);
})(window.angular);
(function(angular){
'use strict';

var departmentAndArea = {
  bindings: {
    departments: '<',
    areas: '<'
  },
  templateUrl: './departments-and-areas.html',
  controller: 'DepartmentsAndAreasController'
};

angular
  .module('admin.maintenance')
  .component('departmentAndArea', departmentAndArea)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('department-and-area', {
        parent: 'app',
        url: '/admin/maintenance/department-and-area',
        component: 'departmentAndArea'
      });
  }]);})(window.angular);
(function(angular){
'use strict';
DepartmentsAndAreasController.$inject = ["$state", "DepartmentsService", "AreasService", "$rootScope", "_"];
function DepartmentsAndAreasController($state, DepartmentsService,
		AreasService, $rootScope, _) {
	var ctrl = this;

	ctrl.departments = [];
	ctrl.areas = [];
	ctrl.addAreaForm = false;
	ctrl.addDepartmentForm = false;
	
	ctrl.$onInit = function() {
		ctrl.company = $rootScope.selectedCompany;
		loadDepartments();
		loadAreas();
	};
	
	function loadDepartments(){
		DepartmentsService.listByCompany(ctrl.company.id).then(
				function(response) {
					console.log("list response: "
							+ JSON.stringify(response.data));
					ctrl.departments = response.data;
				});
		ctrl.addDepartmentForm = false;
	}
	
	function loadAreas(){
		AreasService.listByCompany(ctrl.company.id).then(function(response) {
			console.log("list response area: " + JSON.stringify(response.data));
			ctrl.areas = response.data;
		});
		ctrl.addAreaForm = false;
	}
	
	ctrl.deleteDepartment = function(id){
		DepartmentsService.delete(id).then(function(response){
			if(response.data == true){
				loadDepartments();
			}
		});
	};
	
	ctrl.deleteArea = function(id){
		AreasService.delete(id).then(function(response){
			if(response.data == true){
				loadAreas();
			}
		});
	};
	
	ctrl.showAddArea = function(show){
		ctrl.addAreaForm = show;
	};
	
	ctrl.showAddDepartment = function(show){
		ctrl.addDepartmentForm = show;
	};
	
	ctrl.saveArea = function(event){
		event.area.company = $rootScope.selectedCompany;
	    console.log(event.area.company);
	    AreasService.save(event.area).then(function () {
	    		loadAreas();
	    });
	};
	
	ctrl.saveDepartment = function(event){
		event.department.company = $rootScope.selectedCompany;
		DepartmentsService.save(event.department).then(function(){
			loadDepartments();
		});
	};
	
	
	
}

angular.module('admin.maintenance').controller('DepartmentsAndAreasController', DepartmentsAndAreasController);
})(window.angular);
(function(angular){
'use strict';
var finishedGoodForm = {
  bindings: {
    finishedgood: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './finished-good-form.html',
  controller: 'FinishedGoodFormController'
};

angular
  .module('admin.maintenance')
  .component('finishedGoodForm', finishedGoodForm);
})(window.angular);
(function(angular){
'use strict';

FinishedGoodFormController.$inject = ["$state", "FinishedGoodsService"];
function FinishedGoodFormController($state, FinishedGoodsService) {
  var ctrl = this;
  ctrl.$onChanges = function (changes) {
    if (changes.finishedgood) {
      ctrl.finishedgood = angular.copy(ctrl.finishedgood);
    }
  };

  ctrl.submitForm = function () {
    console.log('submitForm: ' + JSON.stringify(ctrl.finishedgood));
    ctrl.onSubmit({
      $event: {
    	  finishedgood: ctrl.finishedgood
      }
    });
  };
}

angular
  .module('admin.maintenance')
  .controller('FinishedGoodFormController', FinishedGoodFormController);
})(window.angular);
(function(angular){
'use strict';

var finishedGood = {
  templateUrl: './finished-goods.html',
  controller: 'FinishedGoodController'
};

angular
  .module('admin.maintenance')
  .component('finishedGood', finishedGood)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('finishedGoods', {
        parent: 'app',
        url: '/admin/maintenance/finished-good',
        component: 'finishedGood'
      });
  }]);})(window.angular);
(function(angular){
'use strict';
FinishedGoodController.$inject = ["$state", "FinishedGoodsService", "_"];
function FinishedGoodController($state, FinishedGoodsService, _) {
  var ctrl = this;
  ctrl.finishedGoods = [];

  ctrl.searchCode = '';
  ctrl.searchName = '';
  ctrl.sortType = 'id';
  ctrl.sortReverse = false;
  ctrl.isSelected = false;

  ctrl.$onInit = function () {
    ctrl.addFinishedGood = false;
    ctrl.error = null;
    ctrl.getData(ctrl.currentPage);
  };

  function loadFinishedGoods() {
    FinishedGoodsService.list().then(function (response) {
      console.log('list response: ' + JSON.stringify(response.data));
      ctrl.finishedGoods = response.data;
    });
  }

  ctrl.totalCount = 0;
  ctrl.itemsPerPage = 30;
  ctrl.currentPage = 1;

  ctrl.getData = function (page) {
    FinishedGoodsService.paginate(
      ctrl.itemsPerPage,
      (page - 1) * ctrl.itemsPerPage
    ).then((res) => {
      var data = res.data;
      ctrl.currentPage = page;
      ctrl.totalCount = data.totalElements;
      ctrl.finishedGoods = data.content;
    });
  };

  ctrl.selectedId = 0;

  ctrl.showAddFinishedGood = function (show) {
    ctrl.addFinishedGood = show;
  };

  ctrl.confirmDelete = function (id, name) {
    $('#confirmDeleteAction').modal('show');
    ctrl.itemName = 'Are you sure you want to delete' + name + '?';
    ctrl.id = id;
  };

  ctrl.confirmEdit = function (event) {
    $('#confirmEditAction').modal('show');
    ctrl.itemName = 'Are you sure you want to save changes ?';
    ctrl.event = event;
  };

  ctrl.cancelDelete = function () {
    $('#confirmDeleteAction').modal('hide');
  };

  ctrl.cancelEdit = function () {
    $('#confirmEditAction').modal('hide');
  };

  ctrl.confirm = function () {
    $('#actionDialog').modal('hide');
  };

  ctrl.editFinishedGood = function (id) {
    ctrl.selectedId = id;
    console.log(ctrl.selectedId);
    FinishedGoodsService.get(id).then(function (response) {
      ctrl.finishedgood = response.data;
    });
    ctrl.addFinishedGood = true;
  };

  ctrl.saveFinishedGood = function (event) {
    $('#confirmEditAction').modal('hide');
    FinishedGoodsService.save(event.finishedgood).then(function (response) {
      console.log(response);
      if (response.data === '') {
        ctrl.actionTitle = 'Error';
        ctrl.actionMessage = 'The item code/name exists';
      } else {
        ctrl.actionTitle = 'Confirmation';
        ctrl.actionMessage = 'You have successfully updated the list';
        ctrl.getData(ctrl.currentPage);
        ctrl.showAddFinishedGood(false);
        ctrl.finishedgood = null;
      }
      $('#actionDialog').modal('show');
    });
  };

  ctrl.deleteFinishedGood = function (id) {
    $('#confirmDeleteAction').modal('hide');
    FinishedGoodsService.delete(id)
      .then(function (response) {
        ctrl.getData(ctrl.currentPage);
        ctrl.actionTitle = 'Confirmation';
        ctrl.actionMessage = 'You have successfully deleted the item';
      })
      .catch(function (error) {
        ctrl.actionTitle = 'Error';
        ctrl.actionMessage = 'The item was not deleted';
      });

    $('#confirmAction').modal('hide');
    $('#actionDialog').modal('show');
  };
}

angular
  .module('admin.maintenance')
  .controller('FinishedGoodController', FinishedGoodController);
})(window.angular);
(function(angular){
'use strict';
var depotForm = {
  bindings: {
    depot: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './depot-form.html',
  controller: 'DepotFormController'
};

angular
  .module('admin.maintenance')
  .component('depotForm', depotForm);
})(window.angular);
(function(angular){
'use strict';

DepotFormController.$inject = ["$state", "DepotsService", "AreasService", "$rootScope"];
function DepotFormController($state, DepotsService, AreasService, $rootScope) {
  var ctrl = this;

  ctrl.$onChanges = function (changes) {
    if (changes.depot) {
      ctrl.depot = angular.copy(ctrl.depot);
    }
  };
  
  ctrl.$onInit = function(){
	  ctrl.company = $rootScope.selectedCompany;
	  AreasService.listByCompany(ctrl.company.id).then(function(response){
		  console.log(JSON.stringify(response.data));
		  ctrl.areas = response.data;
	  });
  };

  ctrl.submitForm = function () {
    console.log('submitForm: ' + JSON.stringify(ctrl.depot));
    ctrl.onSubmit({
      $event: {
    	  depot: ctrl.depot
      }
    });
  };
}

angular
  .module('admin.maintenance')
  .controller('DepotFormController', DepotFormController);
})(window.angular);
(function(angular){
'use strict';

var depot = {
  templateUrl: './depots.html',
  controller: 'DepotController'
};

angular
  .module('admin.maintenance')
  .component('depot', depot)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('depots', {
        parent: 'app',
        url: '/admin/maintenance/depots',
        component: 'depot'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

DepotController.$inject = ["$state", "DepotsService", "_"];
function DepotController($state, DepotsService, _) {
  var ctrl = this;
  ctrl.depots = [];
  ctrl.searchCode = '';
  ctrl.searchName = '';
  ctrl.searchArea = '';
  ctrl.sortType = 'id';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addDepot = false;
	  ctrl.error = null;
	  loadDepots();
  };
  
  function loadDepots(){
	  DepotsService.list().then(function(response){
		  console.log("list response: " + JSON.stringify(response.data));
		  ctrl.depots = response.data;
	  });
  }
  
  ctrl.showAddDepot = function (show){
	  ctrl.addDepot = show;
  };
  
  ctrl.editDepot = function (id) {
	  DepotsService.get(id).then(function(response){
		  ctrl.depot = response.data;
	  });
	  ctrl.addDepot = true;
  };
  
  ctrl.saveDepot = function (event) {
	    DepotsService.save(event.depot).then(function () {
	    	  loadDepots();
	    	  ctrl.showAddDepot(false);
	    	  ctrl.depot = null;
	    });
  };
  
  ctrl.deleteDepot = function (id){
	  DepotsService.delete(id).then(function(response){
		  loadDepots();
	  });
  };
}

angular
  .module('admin.maintenance')
  .controller('DepotController', DepotController);
})(window.angular);
(function(angular){
'use strict';
var itemTypeForm = {
  bindings: {
    itemtype: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './item-type-form.html',
  controller: 'ItemTypeFormController'
};

angular
  .module('admin.maintenance')
  .component('itemTypeForm', itemTypeForm);
})(window.angular);
(function(angular){
'use strict';

ItemTypeFormController.$inject = ["$state", "ItemTypesService"];
function ItemTypeFormController($state, ItemTypesService) {
  var ctrl = this;

  ctrl.$onChanges = function (changes) {
    if (changes.itemtype) {
      ctrl.itemtype = angular.copy(ctrl.itemtype);
    }
  };

  ctrl.submitForm = function () {
    console.log('submitForm: ' + JSON.stringify(ctrl.itemtype));
    ctrl.onSubmit({
      $event: {
    	  itemtype: ctrl.itemtype
      }
    });
  };
}

angular
  .module('admin.maintenance')
  .controller('ItemTypeFormController', ItemTypeFormController);
})(window.angular);
(function(angular){
'use strict';

var itemType = {
  templateUrl: './item-types.html',
  controller: 'ItemTypeController'
};

angular
  .module('admin.maintenance')
  .component('itemType', itemType)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('item-types', {
        parent: 'app',
        url: '/admin/maintenance/item-type',
        component: 'itemType'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

ItemTypeController.$inject = ["$state", "ItemTypesService", "_"];
function ItemTypeController($state, ItemTypesService, _) {
  var ctrl = this;
  ctrl.itemTypes = [];
  ctrl.searchCode = '';
  ctrl.searchName = '';
  ctrl.sortType = 'id';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addItemType = false;
	  ctrl.error = null;
	  loadItemTypes();
  };
  
  function loadItemTypes(){
	  ItemTypesService.list().then(function(response){
		  console.log("list response: " + JSON.stringify(response.data));
		  ctrl.itemTypes = response.data;
	  });
  }
  
  ctrl.showAddItemType = function (show){
	  ctrl.addItemType = show;
  };
  
  ctrl.editItemType = function (id) {
	  ItemTypesService.get(id).then(function(response){
		  ctrl.itemType = response.data;
	  });
	  ctrl.addItemType = true;
  };
  
  ctrl.saveItemType = function (event) {
	    ItemTypesService.save(event.itemtype).then(function () {
	    	  loadItemTypes();
	    	  ctrl.showAddItemType(false);
	    	  ctrl.itemtype = null;
	    });
  };
  
  ctrl.deleteItemType = function (id){
	  ItemTypesService.delete(id).then(function(response){
		  loadItemTypes();
	  });
  };
}

angular
  .module('admin.maintenance')
  .controller('ItemTypeController', ItemTypeController);
})(window.angular);
(function(angular){
'use strict';
var itemForm = {
  bindings: {
    item: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './item-form.html',
  controller: 'ItemFormController'
};

angular
  .module('admin.maintenance')
  .component('itemForm', itemForm);
})(window.angular);
(function(angular){
'use strict';

ItemFormController.$inject = ["$state", "ItemsService", "ItemTypesService", "UnitsService"];
function ItemFormController($state, ItemsService, ItemTypesService, UnitsService) {
  var ctrl = this;
  ctrl.itemTypes = [];
  ctrl.$onChanges = function (changes) {
    if (changes.item) {
      ctrl.item = angular.copy(ctrl.item);
    }
  };
  
  ctrl.$onInit = function(){
	  ItemTypesService.list().then(function(response){
		  ctrl.itemTypes = response.data;
	  });
	  UnitsService.list().then(function(response){
		  ctrl.units = response.data;
	  });
  };
  ctrl.submitForm = function () {
    console.log('submitForm: ' + JSON.stringify(ctrl.item));
    ctrl.onSubmit({
      $event: {
    	  item: ctrl.item
      }
    });
  };
}

angular
  .module('admin.maintenance')
  .controller('ItemFormController', ItemFormController);
})(window.angular);
(function(angular){
'use strict';

var item = {
  templateUrl: './items.html',
  controller: 'ItemController'
};

angular
  .module('admin.maintenance')
  .component('item', item)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('items', {
        parent: 'app',
        url: '/admin/maintenance/item',
        component: 'item'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

ItemController.$inject = ["$state", "ItemsService", "_"];
function ItemController($state, ItemsService, _) {
  var ctrl = this;
  ctrl.items = [];
  ctrl.searchCode = '';
  ctrl.searchName = '';
  ctrl.sortType = '';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addItem = false;
	  ctrl.error = null;
	  loadItems();
  };
  
  function loadItems(){
	  ItemsService.listRmPm().then(function(response){
		  console.log("list response: " + JSON.stringify(response.data));
		  ctrl.items = response.data;
	  });
  }
  
  ctrl.showAddItem = function (show){
	  ctrl.addItem = show;
  };
  
  ctrl.editItem = function (id) {
	  ItemsService.get(id).then(function(response){
		  ctrl.item = response.data;
	  });
	  ctrl.addItem = true;
  };
  
  ctrl.saveItem = function (event) {
	    ItemsService.save(event.item).then(function () {
	    	  loadItems();
	    	  ctrl.showAddItem(false);
	    	  ctrl.item = null;
	    });
  };
  
  ctrl.deleteItem = function (id){
	  ItemsService.delete(id).then(function(response){
		  loadItems();
	  });
  };
}

angular
  .module('admin.maintenance')
  .controller('ItemController', ItemController);
})(window.angular);
(function(angular){
'use strict';
var memoTypeForm = {
  bindings: {
    memotype: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './memo-type-form.html',
  controller: 'MemoTypeFormController'
};

angular
  .module('admin.maintenance')
  .component('memoTypeForm', memoTypeForm);
})(window.angular);
(function(angular){
'use strict';

MemoTypeFormController.$inject = ["$state", "MemoTypesService"];
function MemoTypeFormController($state, MemoTypesService) {
  var ctrl = this;

  ctrl.$onChanges = function (changes) {
    if (changes.memotype) {
      ctrl.memotype = angular.copy(ctrl.memotype);
    }
  };

  ctrl.submitForm = function () {
    console.log('submitForm: ' + JSON.stringify(ctrl.memotype));
    ctrl.onSubmit({
      $event: {
    	  memotype: ctrl.memotype
      }
    });
  };
}

angular
  .module('admin.maintenance')
  .controller('MemoTypeFormController', MemoTypeFormController);
})(window.angular);
(function(angular){
'use strict';

var memoType = {
  templateUrl: './memo-types.html',
  controller: 'MemoTypeController'
};

angular
  .module('admin.maintenance')
  .component('memoType', memoType)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('memo-types', {
        parent: 'app',
        url: '/admin/maintenance/memo-type',
        component: 'memoType'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

MemoTypeController.$inject = ["$state", "MemoTypesService", "_"];
function MemoTypeController($state, MemoTypesService, _) {
  var ctrl = this;
  ctrl.memoTypes = [];
  ctrl.searchCode = '';
  ctrl.searchName = '';
  ctrl.sortType = 'id';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addMemoType = false;
	  ctrl.error = null;
	  loadMemoTypes();
  };
  
  function loadMemoTypes(){
	  MemoTypesService.list().then(function(response){
		  console.log("list response: " + JSON.stringify(response.data));
		  ctrl.memoTypes = response.data;
	  });
  }
  
  ctrl.showAddMemoType = function (show){
	  ctrl.addMemoType = show;
  };
  
  ctrl.editMemoType = function (id) {
	  MemoTypesService.get(id).then(function(response){
		  ctrl.memotype = response.data;
	  });
	  ctrl.addMemoType = true;
  };
  
  ctrl.saveMemoType = function (event) {
	    MemoTypesService.save(event.memotype).then(function () {
	    	  loadMemoTypes();
	    	  ctrl.showAddMemoType(false);
	    	  ctrl.memotype = null;
	    });
  };
  
  ctrl.deleteMemoType = function (id){
	  MemoTypesService.delete(id).then(function(response){
		  loadMemoTypes();
	  });
  };
}

angular
  .module('admin.maintenance')
  .controller('MemoTypeController', MemoTypeController);
})(window.angular);
(function(angular){
'use strict';
var procedureAreaForm = {
  bindings: {
    procedurearea: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './procedure-area-form.html',
  controller: 'ProcedureAreaFormController'
};

angular
  .module('admin.maintenance')
  .component('procedureAreaForm', procedureAreaForm);
})(window.angular);
(function(angular){
'use strict';

ProcedureAreaFormController.$inject = ["$state", "ProcedureAreasService"];
function ProcedureAreaFormController($state, ProcedureAreasService) {
  var ctrl = this;
  ctrl.$onChanges = function (changes) {
    if (changes.procedurearea) {
      ctrl.procedurearea = angular.copy(ctrl.procedurearea);
    }
  };

  ctrl.submitForm = function () {
    console.log('submitForm: ' + JSON.stringify(ctrl.procedurearea));
    ctrl.onSubmit({
      $event: {
    	  procedurearea: ctrl.procedurearea
      }
    });
  };
}

angular
  .module('admin.maintenance')
  .controller('ProcedureAreaFormController', ProcedureAreaFormController);
})(window.angular);
(function(angular){
'use strict';

var procedureArea = {
  templateUrl: './procedure-areas.html',
  controller: 'ProcedureAreaController'
};

angular
  .module('admin.maintenance')
  .component('procedureArea', procedureArea)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('procedureAreas', {
        parent: 'app',
        url: '/admin/maintenance/procedure-area',
        component: 'procedureArea'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

ProcedureAreaController.$inject = ["$state", "ProcedureAreasService", "_"];
function ProcedureAreaController($state, ProcedureAreasService, _) {
  var ctrl = this;
  ctrl.procedureAreas = [];

  ctrl.searchCode = '';
  ctrl.searchName = '';
  ctrl.sortType = 'id';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addProcedureArea = false;
	  ctrl.error = null;
	  loadProcedureAreas();
  };
  
  function loadProcedureAreas(){
	  ProcedureAreasService.list().then(function(response){
		  console.log("list response: " + JSON.stringify(response.data));
		  ctrl.procedureAreas = response.data;
	  });
  }
  
  ctrl.showAddProcedureArea = function (show){
	  ctrl.addProcedureArea = show;
  };
  
  ctrl.editProcedureArea = function (id) {
	  ProcedureAreasService.get(id).then(function(response){
		  ctrl.procedurearea = response.data;
	  });
	  ctrl.addProcedureArea = true;
  };
  
  ctrl.saveProcedureArea = function (event) {
	    ProcedureAreasService.save(event.procedurearea).then(function () {
	    	  loadProcedureAreas();
	    	  ctrl.showAddProcedureArea(false);
	    	  ctrl.procedurearea = null;
	    });
  };
  
  ctrl.deleteProcedureArea = function (id){
	  ProcedureAreasService.delete(id).then(function(response){
		  loadProcedureAreas();
	  });
  };
}

angular
  .module('admin.maintenance')
  .controller('ProcedureAreaController', ProcedureAreaController);
})(window.angular);
(function(angular){
'use strict';
var procedureForm = {
  bindings: {
    procedure: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './procedure-form.html',
  controller: 'ProcedureFormController'
};

angular
  .module('admin.maintenance')
  .component('procedureForm', procedureForm);
})(window.angular);
(function(angular){
'use strict';

ProcedureFormController.$inject = ["$state", "ProceduresService", "ProcedureAreasService"];
function ProcedureFormController($state, ProceduresService, ProcedureAreasService) {
  var ctrl = this;
  ctrl.procedureTypes = [];
  ctrl.$onChanges = function (changes) {
    if (changes.procedure) {
      ctrl.procedure = angular.copy(ctrl.procedure);
    }
  };
  
  ctrl.$onInit = function(){
	  ProcedureAreasService.list().then(function(response){
		  ctrl.procedureAreas = response.data;
	  });
  };
  ctrl.submitForm = function () {
    console.log('submitForm: ' + JSON.stringify(ctrl.procedure));
    ctrl.onSubmit({
      $event: {
    	  procedure: ctrl.procedure
      }
    });
  };
}

angular
  .module('admin.maintenance')
  .controller('ProcedureFormController', ProcedureFormController);
})(window.angular);
(function(angular){
'use strict';

var procedure = {
  templateUrl: './procedures.html',
  controller: 'ProcedureController'
};

angular
  .module('admin.maintenance')
  .component('procedure', procedure)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('procedures', {
        parent: 'app',
        url: '/admin/maintenance/procedure',
        component: 'procedure'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

ProcedureController.$inject = ["$state", "ProceduresService", "_"];
function ProcedureController($state, ProceduresService, _) {
  var ctrl = this;
  ctrl.procedures = [];
  ctrl.searchCode = '';
  ctrl.searchName = '';
  ctrl.sortType = '';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addProcedure = false;
	  ctrl.error = null;
	  loadProcedures();
  };
  
  function loadProcedures(){
	  ProceduresService.list().then(function(response){
		  console.log("list response: " + JSON.stringify(response.data));
		  ctrl.procedures = response.data;
	  });
  }
  
  ctrl.showAddProcedure = function (show){
	  ctrl.addProcedure = show;
  };
  
  ctrl.editProcedure = function (id) {
	  ProceduresService.get(id).then(function(response){
		  ctrl.procedure = response.data;
	  });
	  ctrl.addProcedure = true;
  };
  
  ctrl.saveProcedure = function (event) {
	    ProceduresService.save(event.procedure).then(function () {
	    	  loadProcedures();
	    	  ctrl.showAddProcedure(false);
	    	  ctrl.procedure = null;
	    });
  };
  
  ctrl.deleteProcedure = function (id){
	  ProceduresService.delete(id).then(function(response){
		  loadProcedures();
	  });
  };
}

angular
  .module('admin.maintenance')
  .controller('ProcedureController', ProcedureController);
})(window.angular);
(function(angular){
'use strict';
var productForm = {
  bindings: {
    product: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './product-form.html',
  controller: 'ProductFormController'
};

angular
  .module('admin.maintenance')
  .component('productForm', productForm);
})(window.angular);
(function(angular){
'use strict';

ProductFormController.$inject = ["$state", "ProductsService", "ProductDivisionCodesService", "ProductCategoriesService", "UnitsService", "PurchaseOrdersService", "UsersService", "ClassificationsService"];
function ProductFormController($state, ProductsService, ProductDivisionCodesService, ProductCategoriesService, UnitsService, PurchaseOrdersService, UsersService, ClassificationsService) {
  var ctrl = this;
  ctrl.$onChanges = function (changes) {
    if (changes.product) {
      ctrl.product = angular.copy(ctrl.product);
    }
  };
  
  ctrl.$onInit = function(){
	  ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
	  ClassificationsService.list().then(function(response){
		  ctrl.classifications = response.data;
	  });
	  ProductCategoriesService.list().then(function(response){
		  ctrl.categories = response.data;
	  });
	  
	  ProductDivisionCodesService.list().then(function(response){
		  ctrl.divisions = response.data;
	  });
	  UnitsService.list().then(function(response){
		  ctrl.units = response.data;
	  });
	  UsersService.get(ctrl.user.id).then(function(response){
		  ctrl.depots = response.data.depots;
	  });
  };
  
  ctrl.submitForm = function () {
    console.log('submitForm: ' + JSON.stringify(ctrl.product));
    
    ctrl.onSubmit({
      $event: {
    	  product: ctrl.product
      }
    });
  };



  
}

angular
  .module('admin.maintenance')
  .controller('ProductFormController', ProductFormController);
})(window.angular);
(function(angular){
'use strict';
var productNew = {
  templateUrl: './product-new.html',
  controller: 'ProductNewController'
};

angular
  .module('admin.maintenance')
  .component('productNew', productNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('product-new', {
        parent: 'app',
        url: '/admin/maintenance/products/new',
        component: 'productNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

ProductNewController.$inject = ["$state", "ProductsService", "CompanyService", "DepartmentsService", "PermissionsService"];
function ProductNewController($state, ProductsService, CompanyService, DepartmentsService, PermissionsService) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    ctrl.product = {
    		company: ctrl.user.company
    };
  };

  ctrl.createProduct = function (event) {
	console.log("create " + JSON.stringify(event.product));
    ProductsService.save(event.product).then(function () {
      $state.go('products');
    });

  };
}

angular
  .module('admin.maintenance')
  .controller('ProductNewController', ProductNewController);
})(window.angular);
(function(angular){
'use strict';

var product = {
  templateUrl: './products.html',
  controller: 'ProductController'
};

angular
  .module('admin.maintenance')
  .component('product', product)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('products', {
        parent: 'app',
        url: '/admin/maintenance/products',
        component: 'product'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

ProductController.$inject = ["$state", "ProductsService", "$rootScope", "_"];
function ProductController($state, ProductsService, $rootScope, _) {
  var ctrl = this;
  ctrl.products = [];

  
  ctrl.sortType = 'date';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addProduct = false;
	  ctrl.error = null;
	  loadProducts();
  };
  
  function loadProducts(){
	  ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
	  ctrl.company = $rootScope.selectedCompany;
	  ProductsService.listByCompany(ctrl.company.id).then(function(response){
	  	  console.log("list response: {}", response.data);
		  ctrl.products = response.data;
	  });
  }
  
  ctrl.searchPrf = function(event){
	  ctrl.productTable.DataTable.search(event).draw();
  };
  
  ctrl.createNewProduct = function (event) {
	    console.log('createNewProduct');
	    $state.go('product-new');
  };
  
  ctrl.openModal = function(product){
	  console.log("show modal" +  ctrl.showModal);
	  console.log("product" + JSON.stringify(product));
	  ctrl.product = product;
	  $('#productInfoModal').modal('show');
	  
  };
  
  ctrl.editProduct = function (id) {
	  $state.go('product-edit', { 'productId': id });
  };
  /*
  ctrl.showAddProduct = function (show){
	  ctrl.addProduct = show;
  };
  
  
  
  ctrl.saveProduct = function (event) {
	    ProductsService.save(event.purchaserequest).then(function () {
	    	  loadProducts();
	    	  ctrl.showAddProduct(false);
	    	  ctrl.purchaserequest = null;
	    });
  };
  */
  
  ctrl.deleteProduct = function (id){
	  ProductsService.delete(id).then(function(response){
		  loadProducts();
	  });
  };
  
  ctrl.approve = function(id){
	  ProductsService.approve(id).then(function(response){
		  console.log("Approved" + id);
	  });
  };
  
  ctrl.reject = function(id){
	  ProductsService.reject(id).then(function(response){
		  console.log("Rejected" + id);
	  });
  };
}

angular
  .module('admin.maintenance')
  .controller('ProductController', ProductController);
})(window.angular);
(function(angular){
'use strict';
var vendorEdit = {
    templateUrl: './vendor-edit.html',
    controller: 'VendorEditController'
  };
  
  angular
    .module('admin.maintenance')
    .component('vendorEdit', vendorEdit)
    .config(["$stateProvider", function ($stateProvider) {
      $stateProvider
        .state('vendor-edit', {
          parent: 'app',
          url: '/admin/maintenance/vendor/edit/:vendorId',
          component: 'vendorEdit'
        });
    }]);
  })(window.angular);
(function(angular){
'use strict';
VendorEditController.$inject = ["$state", "$stateParams", "VendorsService", "$rootScope"];
function VendorEditController(
  $state,
  $stateParams,
  VendorsService,
  $rootScope
) {
  var ctrl = this;
  ctrl.vendor = {};
  ctrl.$onInit = function () {
    ctrl.error = null;

    console.log('vendorId: ' + JSON.stringify($stateParams.vendorId));

    VendorsService.get($stateParams.vendorId).then(function (response) {
      ctrl.vendor = response.data;
    });
  };
  ctrl.edit = function (event) {
    console.log('VendorEditController edit');
    var vendor = JSON.parse(JSON.stringify(event.vendor));
    $('#confirmAction').modal('hide');
    $('#confirmAction').detach();
    VendorsService.update(vendor).then(function () {
      $state.go('vendors');
    });
  };

  ctrl.confirmEdit = function (event) {
    ctrl.event = event;
    $('#confirmAction').appendTo('body').modal('show');
  };

  ctrl.cancel = function () {
    $('#confirmAction').modal('hide');
  };
}

angular
  .module('admin.maintenance')
  .controller('VendorEditController', VendorEditController);
})(window.angular);
(function(angular){
'use strict';
var vendorForm = {
  bindings: {
    vendor: '=',
    company: '<',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './vendor-form.html',
  controller: 'VendorFormController'
};

angular
  .module('admin.maintenance')
  .component('vendorForm', vendorForm);
})(window.angular);
(function(angular){
'use strict';
VendorFormController.$inject = ["$state", "AreasService", "GroupService", "DepartmentsService", "_"];
function VendorFormController(
  $state,
  AreasService,
  GroupService,
  DepartmentsService,
  _
) {
  var ctrl = this;

  var currentUser = localStorage.getItem('currentUser');
  if (currentUser != null) {
    ctrl.currentUser = JSON.parse(currentUser);
  }

  ctrl.$onInit = function () {
    AreasService.list().then(function (response) {
      ctrl.areas = response.data;
    });
    GroupService.list().then(function (response) {
      ctrl.groups = response.data;
    });

    DepartmentsService.list().then(function (response) {
      ctrl.departments = response.data;
    });
  };

  ctrl.$onChanges = function (changes) {
    if (changes.vendor) {
      ctrl.vendor = angular.copy(ctrl.vendor);
    }
  };

  ctrl.isActive = [
    { value: true, name: 'Active' },
    { value: false, name: 'Not Active' },
  ];

  ctrl.type = [
    { value: 'V', name: 'Vendor Only' },
    { value: 'P', name: 'Payee Only' },
    { value: 'B', name: 'Both' },
  ];

  ctrl.submitForm = function () {
    console.log(ctrl.vendor);
    ctrl.onSubmit({
      $event: {
        vendor: ctrl.vendor,
      },
    });
  };

  ctrl.cancelEdit = function () {
    $('#confirmEditAction').modal('hide');
  };
}

angular
  .module('admin.maintenance')
  .controller('VendorFormController', VendorFormController);
})(window.angular);
(function(angular){
'use strict';
var vendorNew = {
    templateUrl: './vendor-new.html',
    controller: 'VendorNewController'
  };
  
  angular
    .module('admin.maintenance')
    .component('vendorNew', vendorNew)
    .config(["$stateProvider", function ($stateProvider) {
      $stateProvider
        .state('vendor-new', {
          parent: 'app',
          url: '/admin/maintenance/vendor/new',
          component: 'vendorNew'
        });
    }]);
  })(window.angular);
(function(angular){
'use strict';
VendorNewController.$inject = ["$state", "VendorsService", "$rootScope"];
function VendorNewController($state, VendorsService, $rootScope) {
  var ctrl = this;

  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
    ctrl.vendor = {
      company: $rootScope.selectedCompany,
    };
  };

  ctrl.confirmCreate = function (event) {
    ctrl.event = event;
    $('#confirmAction').appendTo('body').modal('show');
  };

  ctrl.cancel = function () {
    $('#confirmAction').modal('hide');
  };

  ctrl.addVendor = function (event) {
    $('#confirmAction').modal('hide');
    $('#confirmAction').detach();

    VendorsService.save(event.vendor).then(function (response) {
      console.log('createClient ' + JSON.stringify(response.data));
      $state.go('vendors');
    });
  };
}

angular
  .module('admin.maintenance')
  .controller('VendorNewController', VendorNewController);
})(window.angular);
(function(angular){
'use strict';

var vendor = {
  templateUrl: './vendors.html',
  controller: 'VendorController'
};

angular
  .module('admin.maintenance')
  .component('vendor', vendor)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('vendors', {
        parent: 'app',
        url: '/admin/maintenance/vendor',
        component: 'vendor'
      });
  }]);})(window.angular);
(function(angular){
'use strict';
VendorController.$inject = ["$state", "VendorsService", "CompanyService", "$rootScope", "_"];
function VendorController(
  $state,
  VendorsService,
  CompanyService,
  $rootScope,
  _
) {
  var ctrl = this;
  ctrl.vendors = [];
  ctrl.companies = [];

  ctrl.searchCode = '';
  ctrl.searchName = '';
  ctrl.searchTin = '';
  ctrl.sortType = 'id';
  ctrl.sortReverse = false;

  ctrl.totalCount = 0;
  ctrl.itemsPerPage = 30;
  ctrl.currentPage = 1;

  ctrl.$onInit = function () {
    ctrl.addVendor = false;
    ctrl.error = null;
    loadVendors(ctrl.currentPage);
  };

  // function loadVendors() {
  //   ctrl.company = $rootScope.selectedCompany;
  //   VendorsService.listByCompany(ctrl.company.id).then(function (response) {
  //     console.log('list response: ' + JSON.stringify(response.data));
  //     ctrl.vendors = response.data;
  //   });
  // }

  function loadVendors(page) {
    ctrl.company = $rootScope.selectedCompany;

    VendorsService.paginate(
      ctrl.itemsPerPage,
      (page - 1) * ctrl.itemsPerPage,
      ctrl.company.id
    ).then(function (response) {
      var data = response.data;
      console.log(data);
      ctrl.currentPage = page;
      ctrl.totalCount = data.totalElements;
      ctrl.vendors = data.content;
    });
  }

  ctrl.goToEdit = function (id) {
    $state.go('vendor-edit', { vendorId: id });
  };

  /*
  ctrl.showAddVendor = function (show){
	  ctrl.addVendor = show;
  };
  
  ctrl.editVendor = function (id) {
	  VendorsService.get(id).then(function(response){
		  ctrl.vendor = response.data;
	  });
	  ctrl.addVendor = true;
  };
  
  ctrl.saveVendor = function (event) {
	    event.vendor.company = $rootScope.selectedCompany;
	    console.log(event.vendor.company);
	    VendorsService.save(event.vendor).then(function () {
	    	
	    	  loadVendors();
	    	  ctrl.showAddVendor(false);
	    	  ctrl.vendor = null;
	    });
  };
  
  ctrl.deleteVendor = function (id){
	  VendorsService.delete(id).then(function(response){
		  loadVendors();
	  });
  };*/
}

angular
  .module('admin.maintenance')
  .controller('VendorController', VendorController);
})(window.angular);
(function(angular){
'use strict';
var unitForm = {
  bindings: {
    unit: '=',
    company: '<',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './unit-form.html',
  controller: 'UnitFormController'
};

angular
  .module('admin.maintenance')
  .component('unitForm', unitForm);
})(window.angular);
(function(angular){
'use strict';

UnitFormController.$inject = ["$state", "UnitsService"];
function UnitFormController($state, UnitsService) {
  var ctrl = this;

  ctrl.$onChanges = function (changes) {
    if (changes.unit) {
      ctrl.unit = angular.copy(ctrl.unit);
    }
  };

  ctrl.submitForm = function () {
    console.log('submitForm: ' + JSON.stringify(ctrl.unit));
    ctrl.onSubmit({
      $event: {
        unit: ctrl.unit
      }
    });
  };
}

angular
  .module('admin.maintenance')
  .controller('UnitFormController', UnitFormController);
})(window.angular);
(function(angular){
'use strict';

var unit = {
  templateUrl: './units.html',
  controller: 'UnitController'
};

angular
  .module('admin.maintenance')
  .component('unit', unit)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('units', {
        parent: 'app',
        url: '/admin/maintenance/unit',
        component: 'unit'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

UnitController.$inject = ["$state", "UnitsService", "$rootScope", "_"];
function UnitController($state, UnitsService, $rootScope, _) {
  var ctrl = this;
  ctrl.units = [];
  ctrl.companies = [];

  ctrl.searchCode = '';
  ctrl.searchName = '';

  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addUnit = false;
	  ctrl.error = null;
	  loadUnits();
  };
  
  function loadUnits(){
	  UnitsService.list().then(function(response){
		  console.log("list response: " + JSON.stringify(response.data));
		  ctrl.units = response.data;
	  });
  }
  
  ctrl.showAddUnit = function (show){
	  ctrl.addUnit = show;
  };
  
  ctrl.editUnit = function (id) {
	  UnitsService.get(id).then(function(response){
		  ctrl.unit = response.data;
	  });
	  ctrl.addUnit = true;
  };
  
  ctrl.saveUnit = function (event) {
	    UnitsService.save(event.unit).then(function () {
	    	  loadUnits();
	    	  ctrl.showAddUnit(false);
	    });
  };
  
  ctrl.deleteUnit = function (id){
	  UnitsService.delete(id).then(function(response){
		  loadUnits();
	  });
  };
}

angular
  .module('admin.maintenance')
  .controller('UnitController', UnitController);
})(window.angular);
(function(angular){
'use strict';
var acknowledgementReceiptForm = {
  bindings: {
    ar: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './acknowledgement-receipt-form.html',
  controller: 'AcknowledgementReceiptFormController'
};

angular
  .module('admin.sales')
  .component('acknowledgementReceiptForm', acknowledgementReceiptForm);
})(window.angular);
(function(angular){
'use strict';
AcknowledgementReceiptFormController.$inject = ["$state", "AcknowledgementReceiptsService", "OrderSlipsService", "SalesInvoicesService", "UsersService", "SalesSlipsService", "$rootScope"];
function AcknowledgementReceiptFormController(
  $state,
  AcknowledgementReceiptsService,
  OrderSlipsService,
  SalesInvoicesService,
  UsersService,
  SalesSlipsService,
  $rootScope
) {
  var ctrl = this;

  ctrl.$onChanges = function(changes) {
    if (changes.ar) {
      ctrl.ar = angular.copy(ctrl.ar);
    }
  };

  ctrl.$onInit = function() {
    ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
    UsersService.get(ctrl.user.id).then(function(response) {
      ctrl.depots = response.data.depots;
    });
    ctrl.ar.date = new Date();
    ctrl.salesSlips = [];
    ctrl.selectedSalesSlips = [];
    ctrl.ar.payments = [];
  };

  ctrl.findSalesSlip = function() {
    SalesSlipsService.listByDepotAndClientAndStatus(
      ctrl.ar.depot.id,
      ctrl.ar.client.id,
      ['Pending', 'Incomplete']
    ).then(function(response) {
      ctrl.salesSlips = response.data;
      console.log(response.data);
      console.log('selected sales slip size' + ctrl.selectedSalesSlips.length);
      $('#salesSlipsModal').modal('show');
    });
  };

  ctrl.selectSalesSlip = function(os) {
    var index = ctrl.customizedIndexOf(ctrl.selectedSalesSlips, os);
    if (index !== -1) {
      ctrl.selectedSalesSlips.splice(index, 1);
      ctrl.ar.payments.splice(index, 1);
    } else {
      ctrl.selectedSalesSlips.push(os);
      ctrl.ar.payments.push({
        reference: os,
        appliedAmount: 0
      });
    }
  };

  ctrl.computeTotalPayment = function() {
    ctrl.totalAmount = 0;
    ctrl.siAmount = 0;
    for (var i = 0; i < ctrl.ar.payments.length; i++) {
      if (ctrl.ar.payments[i].reference.salesOrder.type === 'DR_SI') {
        ctrl.siAmount += ctrl.ar.payments[i].appliedAmount;
      } else {
        ctrl.totalAmount += ctrl.ar.payments[i].appliedAmount;
      }
    }
  };

  ctrl.clearPayments = function() {
    ctrl.ar.payments = [];
    ctrl.selectedSalesSlips = [];
    ctrl.salesSlips = [];
  };

  ctrl.customizedIndexOf = function(list, os) {
    for (var i = 0; i < list.length; i++) {
      if (list[i].id == os.id) return i;
    }
    return -1;
  };
  ctrl.submitForm = function() {
    console.log('submitForm: ' + JSON.stringify(ctrl.ar));
    for (var i = 0; i < ctrl.ar.payments.length; i++) {
      if (ctrl.ar.payments[i].reference.salesOrder.type === 'OS') {
        ctrl.ar.payments[i].reference.type = 'OS';
      } else if (ctrl.ar.payments[i].reference.salesOrder.type === 'DR_SI') {
        ctrl.ar.payments[i].reference.type = 'DR_SI';
      }
    }
    ctrl.onSubmit({
      $event: {
        ar: ctrl.ar
      }
    });
  };
}

angular
  .module('admin.sales')
  .controller(
    'AcknowledgementReceiptFormController',
    AcknowledgementReceiptFormController
  );
})(window.angular);
(function(angular){
'use strict';
var acknowledgementReceiptNew = {
  templateUrl: './acknowledgement-receipt-new.html',
  controller: 'AcknowledgementReceiptNewController'
};

angular
  .module('admin.sales')
  .component('acknowledgementReceiptNew', acknowledgementReceiptNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('acknowledgement-receipt-new', {
        parent: 'app',
        url: '/admin/sales/acknowledgement-receipt/new',
        component: 'acknowledgementReceiptNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

AcknowledgementReceiptNewController.$inject = ["$state", "AcknowledgementReceiptsService", "$rootScope"];
function AcknowledgementReceiptNewController($state, AcknowledgementReceiptsService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    ctrl.ar = {
    		company: $rootScope.selectedCompany,
    		preparedBy: ctrl.user,
    		releasedBy: ctrl.user,
    		checkedBy: ctrl.user,
    		approvedBy: ctrl.user
    };
  };

  ctrl.createAcknowledgementReceipt = function (event) {
    AcknowledgementReceiptsService.save(event.ar).then(function (response) {
    	  console.log("create " + JSON.stringify(response.data));
      $state.go('acknowledgement-receipts');
    });

  };
}

angular
  .module('admin.sales')
  .controller('AcknowledgementReceiptNewController', AcknowledgementReceiptNewController);
})(window.angular);
(function(angular){
'use strict';

var acknowledgementReceipt = {
  templateUrl: './acknowledgement-receipts.html',
  controller: 'AcknowledgementReceiptController'
};

angular
  .module('admin.sales')
  .component('acknowledgementReceipt', acknowledgementReceipt)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('acknowledgement-receipts', {
        parent: 'app',
        url: '/admin/sales/acknowledgement-receipt',
        component: 'acknowledgementReceipt'
      });
  }]);})(window.angular);
(function(angular){
'use strict';
AcknowledgementReceiptController.$inject = ["$state", "AcknowledgementReceiptsService", "UsersService", "$rootScope", "$location", "_"];
function AcknowledgementReceiptController(
  $state,
  AcknowledgementReceiptsService,
  UsersService,
  $rootScope,
  $location,
  _
) {
  var ctrl = this;
  ctrl.acknowledgementReceipts = [];

  ctrl.sortType = 'date';
  ctrl.sortReverse = false;

  ctrl.$onInit = function() {
    ctrl.addAcknowledgementReceipt = false;
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
    UsersService.get(ctrl.user.id).then(function(response) {
      ctrl.userAssignedDepots = response.data.depots;
    });
  };

  ctrl.selectDepot = function() {
    loadAcknowledgementReceipts();
  };

  function loadAcknowledgementReceipts() {
    ctrl.company = $rootScope.selectedCompany;
    AcknowledgementReceiptsService.listByDepot(ctrl.userAssignedDepot.id).then(
      function(response) {
        console.log('list response: {}', response.data);
        ctrl.acknowledgementReceipts = response.data;
      }
    );
  }

  ctrl.openModal = function(ar) {
    ctrl.ar = ar;
  };

  ctrl.createNewAcknowledgementReceipt = function(event) {
    console.log('createNewAcknowledgementReceipt');
    $state.go('acknowledgement-receipt-new');
  };
}

angular
  .module('admin.sales')
  .controller(
    'AcknowledgementReceiptController',
    AcknowledgementReceiptController
  );
})(window.angular);
(function(angular){
'use strict';
var orderReceiptForm = {
  bindings: {
    or: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './order-receipt-form.html',
  controller: 'OrderReceiptFormController'
};

angular
  .module('admin.sales')
  .component('orderReceiptForm', orderReceiptForm);
})(window.angular);
(function(angular){
'use strict';


OrderReceiptFormController.$inject = ["$state", "OrderReceiptsService", "OrderSlipsService", "AcknowledgementReceiptsService", "UsersService", "SalesSlipsService", "$rootScope"];
function OrderReceiptFormController($state, OrderReceiptsService, OrderSlipsService, AcknowledgementReceiptsService, UsersService, SalesSlipsService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onChanges = function (changes) {
    if (changes.or) {
      ctrl.or = angular.copy(ctrl.or);
    }
  };
  
  ctrl.$onInit = function() {
	  ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
	  UsersService.get(ctrl.user.id).then(function(response){
		  ctrl.depots = response.data.depots;
	  });
	  ctrl.or.date = new Date();
	  ctrl.or.acknowledgementReceipt = {};
	  ctrl.payments = [];
  };

  ctrl.findAcknowledgementReceipt = function(){
	  AcknowledgementReceiptsService.listByDepotWithSIAmount(ctrl.or.depot.id).then(function(response){
		  ctrl.acknowledgementReceipts = response.data;
		  console.log(response.data);
	  });
  };
  
  ctrl.selectAcknowledgementReceipt = function(ar){
	  ctrl.or.acknowledgementReceipt = ar;
	  for(let payment of ctrl.or.acknowledgementReceipt.payments){
		  if(payment.reference.salesOrder.type === "DR_SI"){
			  ctrl.payments.push(payment);
		  }
	  }
  };
  
  ctrl.submitForm = function () {
    ctrl.onSubmit({
      $event: {
    	  or: ctrl.or
      }
    });
  };
  
}

angular
  .module('admin.sales')
  .controller('OrderReceiptFormController', OrderReceiptFormController);
})(window.angular);
(function(angular){
'use strict';
var orderReceiptNew = {
  templateUrl: './order-receipt-new.html',
  controller: 'OrderReceiptNewController'
};

angular
  .module('admin.sales')
  .component('orderReceiptNew', orderReceiptNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('order-receipt-new', {
        parent: 'app',
        url: '/admin/sales/order-receipt/new',
        component: 'orderReceiptNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

OrderReceiptNewController.$inject = ["$state", "OrderReceiptsService", "$rootScope"];
function OrderReceiptNewController($state, OrderReceiptsService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    ctrl.or = {
    		preparedBy: ctrl.user,
    		date: new Date()
    };
  };

  ctrl.createOrderReceipt = function (event) {
    OrderReceiptsService.save(event.or).then(function (response) {
    	  console.log("create " + JSON.stringify(response.data));
      $state.go('order-receipts');
    });

  };
}

angular
  .module('admin.sales')
  .controller('OrderReceiptNewController', OrderReceiptNewController);
})(window.angular);
(function(angular){
'use strict';

var orderReceipt = {
  templateUrl: './order-receipts.html',
  controller: 'OrderReceiptController'
};

angular
  .module('admin.sales')
  .component('orderReceipt', orderReceipt)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('order-receipts', {
        parent: 'app',
        url: '/admin/sales/order-receipt',
        component: 'orderReceipt'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

OrderReceiptController.$inject = ["$state", "OrderReceiptsService", "UsersService", "$rootScope", "$location", "_"];
function OrderReceiptController($state, OrderReceiptsService, UsersService, $rootScope, $location, _) {
  var ctrl = this;
  ctrl.orderReceipts = [];

  
  ctrl.sortType = 'date';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addOrderReceipt = false;
	  ctrl.error = null;
	  ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
	  UsersService.get(ctrl.user.id).then(function(response){
		  ctrl.userAssignedDepots = response.data.depots;
	  });
  };
  
  ctrl.selectDepot = function (){
	  loadOrderReceipts();
  };
  
  function loadOrderReceipts(){
	  ctrl.company = $rootScope.selectedCompany;
	  OrderReceiptsService.listByDepot(ctrl.userAssignedDepot.id).then(function(response){
	  	  console.log("list response: {}", response.data);
		  ctrl.orderReceipts = response.data;
	  });
  }
  
  ctrl.openModal = function(or){
	  ctrl.or = or;
  };
  
  ctrl.createNewOrderReceipt = function (event) {
	    console.log('createNewOrderReceipt');
	    $state.go('order-receipt-new');
	    
  };
  
 
}

angular
  .module('admin.sales')
  .controller('OrderReceiptController', OrderReceiptController);
})(window.angular);
(function(angular){
'use strict';
var orderSlipForm = {
  bindings: {
    os: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './order-slip-form.html',
  controller: 'OrderSlipFormController'
};

angular
  .module('admin.sales')
  .component('orderSlipForm', orderSlipForm);
})(window.angular);
(function(angular){
'use strict';

OrderSlipFormController.$inject = ["$state", "OrderSlipsService", "SalesOrdersService", "ProductInventoryService", "UsersService", "$rootScope"];
function OrderSlipFormController($state, OrderSlipsService, SalesOrdersService, ProductInventoryService, UsersService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onChanges = function (changes) {
    if (changes.os) {
      ctrl.os = angular.copy(ctrl.os);
    }
  };
  
  ctrl.$onInit = function() {
	  ctrl.os.orderedProducts = [];
	  ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
	  UsersService.get(ctrl.user.id).then(function(response){
		  ctrl.depots = response.data.depots;
	  });
	  ctrl.type = "OS";
	  ctrl.os.date = new Date();
  };

  ctrl.computeTotalAmount = function(value, index){
	  ctrl.os.orderedProducts[index].amount = value;
	  ctrl.os.totalAmount = 0;
	  for(var i = 0; i < ctrl.os.orderedProducts.length; i++){
		  ctrl.os.totalAmount += ctrl.os.orderedProducts[i].quantity * ctrl.os.orderedProducts[i].unitPrice ;
	  }
  };
  

  
  ctrl.showSoProductModal = function(fg){
	  ctrl.company = $rootScope.selectedCompany;
	  console.log("SALES ORDER NUMBER" + ctrl.os.salesOrder.number);
	  ProductInventoryService.listByDepotAndFinishedGood(ctrl.os.depot.id, fg.id).then(function(response){
		  ctrl.inventorylist = response.data;
		  $("#findSoProductModal").modal('show');
		  
	  });
	  
	  
  };
  
  
  ctrl.getProductsOfFg = function (fg){
	  var array = [];
	  for(var i = 0; i < ctrl.os.orderedProducts.length ; i++){
		  if(fg.finishedGood.id == ctrl.os.orderedProducts[i].product.finishedGood.id){
			  array.push(ctrl.os.orderedProducts[i]);
		  }
	  }
	  return array;
  };
  
  ctrl.findSoModal = function(){
	  ctrl.company = $rootScope.selectedCompany;
	  SalesOrdersService.listNotCompletedByCompanyAndDepot(ctrl.company.id, ctrl.os.depot.id, ctrl.type).then(function(response){
		  ctrl.salesOrders = response.data;
		  console.log("ressonse" + JSON.stringify(ctrl.salesOrders));
		  $("#findSoModal").modal("show");
	  });
	  
  };
  
  ctrl.getTotalQuantity = function(fg){
	  var sum = 0;
	  for(var i = 0; i < ctrl.os.orderedProducts.length ; i++){
		  if(fg.finishedGood.id == ctrl.os.orderedProducts[i].product.finishedGood.id){
			  sum += ctrl.os.orderedProducts[i].quantity;
		  }
	  }
	  return sum;
  };
 
  
  ctrl.submitForm = function () {
    console.log('submitForm: ' + JSON.stringify(ctrl.os));
    for(var i = 0; i < ctrl.os.orderedProducts.length; i++){
    	ctrl.os.orderedProducts[i].orderSlipNo = ctrl.os.number;
    }
    
    ctrl.os.type ="OS";
    ctrl.onSubmit({
      $event: {
    	  os: ctrl.os
      }
    });
  };
  
}

angular
  .module('admin.sales')
  .controller('OrderSlipFormController', OrderSlipFormController);
})(window.angular);
(function(angular){
'use strict';
var orderSlipNew = {
  templateUrl: './order-slip-new.html',
  controller: 'OrderSlipNewController'
};

angular
  .module('admin.sales')
  .component('orderSlipNew', orderSlipNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('order-slip-new', {
        parent: 'app',
        url: '/admin/sales/order-slip/new',
        component: 'orderSlipNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

OrderSlipNewController.$inject = ["$state", "OrderSlipsService", "$rootScope"];
function OrderSlipNewController($state, OrderSlipsService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    ctrl.os = {
    		company: $rootScope.selectedCompany,
    		preparedBy: ctrl.user,
    		releasedBy: ctrl.user,
    		checkedBy: ctrl.user,
    		approvedBy: ctrl.user
    };
  };

  ctrl.createOrderSlip = function (event) {
    OrderSlipsService.save(event.os).then(function (response) {
    	  console.log("create " + JSON.stringify(response.data));
      $state.go('order-slips');
    });

  };
}

angular
  .module('admin.sales')
  .controller('OrderSlipNewController', OrderSlipNewController);
})(window.angular);
(function(angular){
'use strict';

var orderSlip = {
  templateUrl: './order-slips.html',
  controller: 'OrderSlipController'
};

angular
  .module('admin.sales')
  .component('orderSlip', orderSlip)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('order-slips', {
        parent: 'app',
        url: '/admin/sales/order-slip',
        component: 'orderSlip'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

OrderSlipController.$inject = ["$state", "OrderSlipsService", "UsersService", "$rootScope", "$location", "_"];
function OrderSlipController($state, OrderSlipsService, UsersService, $rootScope, $location, _) {
  var ctrl = this;
  ctrl.orderSlips = [];

  
  ctrl.sortType = 'date';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addOrderSlip = false;
	  ctrl.error = null;
	  ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
	  UsersService.get(ctrl.user.id).then(function(response){
		  ctrl.userAssignedDepots = response.data.depots;
	  });
  };
  
  ctrl.selectDepot = function (){
	  loadOrderSlips();
  };
  
  function loadOrderSlips(){
	  ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
	  ctrl.company = $rootScope.selectedCompany;
	  OrderSlipsService.listByDepot(ctrl.userAssignedDepot.id).then(function(response){
	  	  console.log("list response: {}", response.data);
		  ctrl.orderSlips = response.data;
	  });
  }
  
  ctrl.searchPrf = function(event){
	  ctrl.prfTable.DataTable.search(event).draw();
  };
  
  ctrl.createNewOrderSlip = function (event) {
	    console.log('createNewOrderSlip');
	    $state.go('order-slip-new');
	    
  };
  
  ctrl.openModal = function(orderSlip){
	  ctrl.os = orderSlip;
  };
  
  /*
  ctrl.showAddOrderSlip = function (show){
	  ctrl.addOrderSlip = show;
  };
  
  
  
  ctrl.saveOrderSlip = function (event) {
	    OrderSlipsService.save(event.purchaserequest).then(function () {
	    	  loadOrderSlips();
	    	  ctrl.showAddOrderSlip(false);
	    	  ctrl.purchaserequest = null;
	    });
  };
  */
  
  ctrl.deleteOrderSlip = function (id){
	  OrderSlipsService.delete(id).then(function(response){
		  loadOrderSlips();
	  });
  };
  
 
}

angular
  .module('admin.sales')
  .controller('OrderSlipController', OrderSlipController);
})(window.angular);
(function(angular){
'use strict';
var salesInvoiceForm = {
  bindings: {
    si: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './sales-invoice-form.html',
  controller: 'SalesInvoiceFormController'
};

angular
  .module('admin.sales')
  .component('salesInvoiceForm', salesInvoiceForm);
})(window.angular);
(function(angular){
'use strict';

SalesInvoiceFormController.$inject = ["$state", "SalesInvoicesService", "SalesOrdersService", "ProductInventoryService", "UsersService", "$rootScope"];
function SalesInvoiceFormController($state, SalesInvoicesService, SalesOrdersService, ProductInventoryService, UsersService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onChanges = function (changes) {
    if (changes.si) {
      ctrl.si = angular.copy(ctrl.si);
    }
  };
  
  ctrl.$onInit = function() {
	  ctrl.si.orderedProducts = [];
	  ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
	  UsersService.get(ctrl.user.id).then(function(response){
		  ctrl.depots = response.data.depots;
	  });
	  ctrl.type = "DR_SI";
	  ctrl.si.date = new Date();
  };

  ctrl.computeTotalAmount = function(value, index){
	  ctrl.si.orderedProducts[index].amount = value;
	  ctrl.si.totalAmount = 0;
	  for(var i = 0; i < ctrl.si.orderedProducts.length; i++){
		  ctrl.si.totalAmount += ctrl.si.orderedProducts[i].quantity * ctrl.si.orderedProducts[i].unitPrice ;
	  }
  };
  
  ctrl.addVat = function(){
	  if(ctrl.si.vat){
		 ctrl.si.totalAmount = ctrl.si.totalAmount + (ctrl.si.totalAmount * 0.12);
	  }else{
		 ctrl.si.totalAmount = ctrl.si.totalAmount - (ctrl.si.totalAmount * 0.12);
	  }
  };

  
  ctrl.showSoProductModal = function(fg){
	  ctrl.company = $rootScope.selectedCompany;
	  console.log("SALES ORDER NUMBER" + ctrl.si.salesOrder.number);
	  ProductInventoryService.listByDepotAndFinishedGood(ctrl.si.depot.id, fg.id).then(function(response){
		  ctrl.inventorylist = response.data;
		  $("#findSoProductModal").modal('show');
		  
	  });
	  
	  
  };
  
  
  ctrl.getProductsOfFg = function (fg){
	  var array = [];
	  for(var i = 0; i < ctrl.si.orderedProducts.length ; i++){
		  if(fg.finishedGood.id == ctrl.si.orderedProducts[i].product.finishedGood.id){
			  array.push(ctrl.si.orderedProducts[i]);
		  }
	  }
	  return array;
  };
  
  ctrl.findSoModal = function(){
	  ctrl.company = $rootScope.selectedCompany;
	  SalesOrdersService.listNotCompletedByCompanyAndDepot(ctrl.company.id, ctrl.si.depot.id, ctrl.type).then(function(response){
		  ctrl.salesOrders = response.data;
		  console.log("ressonse" + JSON.stringify(ctrl.salesOrders));
		  $("#findSoModal").modal("show");
	  });
	  
  };
  
  ctrl.getTotalQuantity = function(fg){
	  var sum = 0;
	  for(var i = 0; i < ctrl.si.orderedProducts.length ; i++){
		  if(fg.finishedGood.id == ctrl.si.orderedProducts[i].product.finishedGood.id){
			  sum += ctrl.si.orderedProducts[i].quantity;
		  }
	  }
	  return sum;
  };
 
  
  ctrl.submitForm = function () {
    console.log('submitForm: ' + JSON.stringify(ctrl.si));
    for(var i = 0; i < ctrl.si.orderedProducts.length; i++){
    	ctrl.si.orderedProducts[i].orderSlipNo = ctrl.si.number;
    }
    
    ctrl.si.type = "DR_SI";
    ctrl.onSubmit({
      $event: {
    	  si: ctrl.si
      }
    });
  };
  
}

angular
  .module('admin.sales')
  .controller('SalesInvoiceFormController', SalesInvoiceFormController);
})(window.angular);
(function(angular){
'use strict';
var salesInvoiceNew = {
  templateUrl: './sales-invoice-new.html',
  controller: 'SalesInvoiceNewController'
};

angular
  .module('admin.sales')
  .component('salesInvoiceNew', salesInvoiceNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('sales-invoice-new', {
        parent: 'app',
        url: '/admin/sales/sales-invoice/new',
        component: 'salesInvoiceNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

SalesInvoiceNewController.$inject = ["$state", "SalesInvoicesService", "$rootScope"];
function SalesInvoiceNewController($state, SalesInvoicesService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    ctrl.si = {
    		company: $rootScope.selectedCompany,
    		preparedBy: ctrl.user,
    		releasedBy: ctrl.user,
    		checkedBy: ctrl.user,
    		approvedBy: ctrl.user
    };
  };

  ctrl.createSalesInvoice = function (event) {
    SalesInvoicesService.save(event.si).then(function (response) {
    	  console.log("create " + JSON.stringify(response.data));
      $state.go('sales-invoices');
    });

  };
}

angular
  .module('admin.sales')
  .controller('SalesInvoiceNewController', SalesInvoiceNewController);
})(window.angular);
(function(angular){
'use strict';

var salesInvoice = {
  templateUrl: './sales-invoices.html',
  controller: 'SalesInvoiceController'
};

angular
  .module('admin.sales')
  .component('salesInvoice', salesInvoice)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('sales-invoices', {
        parent: 'app',
        url: '/admin/sales/sales-invoice',
        component: 'salesInvoice'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

SalesInvoiceController.$inject = ["$state", "SalesInvoicesService", "UsersService", "$rootScope", "$location", "_"];
function SalesInvoiceController($state, SalesInvoicesService, UsersService, $rootScope, $location, _) {
  var ctrl = this;
  ctrl.salesInvoices = [];

  
  ctrl.sortType = 'date';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addSalesInvoice = false;
	  ctrl.error = null;
	  ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
	  UsersService.get(ctrl.user.id).then(function(response){
		  ctrl.userAssignedDepots = response.data.depots;
	  });
	  
  };
  
  ctrl.selectDepot = function (){
	  loadSalesInvoices();
  };
  
  function loadSalesInvoices(){
	  ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
	  ctrl.company = $rootScope.selectedCompany;
	  SalesInvoicesService.listByDepot(ctrl.userAssignedDepot.id).then(function(response){
	  	  console.log("list response: {}", response.data);
		  ctrl.salesInvoices = response.data;
	  });
  }
  
  ctrl.searchPrf = function(event){
	  ctrl.prfTable.DataTable.search(event).draw();
  };
  
  ctrl.createNewSalesInvoice = function (event) {
	    console.log('createNewSalesInvoice');
	    $state.go('sales-invoice-new');
	    
  };
  
  ctrl.openModal = function(orderSlip){
	  ctrl.si = orderSlip;
  };
  
  /*
  ctrl.showAddSalesInvoice = function (show){
	  ctrl.addSalesInvoice = show;
  };
  
  
  
  ctrl.saveSalesInvoice = function (event) {
	    SalesInvoicesService.save(event.purchaserequest).then(function () {
	    	  loadSalesInvoices();
	    	  ctrl.showAddSalesInvoice(false);
	    	  ctrl.purchaserequest = null;
	    });
  };
  */
  
  ctrl.deleteSalesInvoice = function (id){
	  SalesInvoicesService.delete(id).then(function(response){
		  loadSalesInvoices();
	  });
  };
  
 
}

angular
  .module('admin.sales')
  .controller('SalesInvoiceController', SalesInvoiceController);
})(window.angular);
(function(angular){
'use strict';
var returnSlipForm = {
  bindings: {
    rs: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './return-slip-form.html',
  controller: 'ReturnSlipFormController'
};

angular
  .module('admin.sales')
  .component('returnSlipForm', returnSlipForm);
})(window.angular);
(function(angular){
'use strict';

ReturnSlipFormController.$inject = ["$state", "ReturnSlipsService", "SalesSlipsService", "ProductInventoryService", "PurchaseOrdersService", "UsersService", "$rootScope"];
function ReturnSlipFormController($state, ReturnSlipsService, SalesSlipsService, ProductInventoryService, PurchaseOrdersService, UsersService, $rootScope) {
  var ctrl = this;
  
  ctrl.stockOnHandList = [];
  ctrl.reserved= [];
  ctrl.$onInit = function(){
	  ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
	  
	  UsersService.get(ctrl.user.id).then(function(response){
		  ctrl.depots = response.data.depots;
	  });
	  
	  ctrl.rs.date = new Date();
  };
  ctrl.$onChanges = function (changes) {
    if (changes.rs) {
      ctrl.rs = angular.copy(ctrl.rs);
    }
  };
  
  
  ctrl.submitForm = function () {
    console.log('submitForm: ' + JSON.stringify(ctrl.rs));
    ctrl.onSubmit({
      $event: {
    	  rs: ctrl.rs
      }
    });
  };
  
  ctrl.computeTotalAmount = function(value, index){
	  ctrl.rs.returnSlipProducts[index].amount = value;
	  ctrl.rs.totalAmount = 0;
	  for(var i = 0; i < ctrl.rs.returnSlipProducts.length; i++){
		  ctrl.rs.totalAmount += ctrl.rs.returnSlipProducts[i].goodQuantity * ctrl.rs.returnSlipProducts[i].unitPrice ;
	  }
  };
  
  ctrl.findSalesSlip = function(){
	  SalesSlipsService.listByDepot(ctrl.rs.depot.id).then(function(response){
		  ctrl.salesSlips = response.data;
		  console.log(response.data);
		  $("#salesSlipsModal").modal("show");
	  });
  };
  
  ctrl.findProduct = function(){
	  ProductInventoryService.listByDepot(ctrl.rs.depot.id).then(function(response){
		  ctrl.productsInDepot = response.data;
		  console.log(JSON.stringify(response.data));
		  $("#findProductModal").modal('show');
	  });
  };
  


}

angular
  .module('admin.sales')
  .controller('ReturnSlipFormController', ReturnSlipFormController);
})(window.angular);
(function(angular){
'use strict';
var returnSlipNew = {
  templateUrl: './return-slip-new.html',
  controller: 'ReturnSlipNewController'
};

angular
  .module('admin.sales')
  .component('returnSlipNew', returnSlipNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('return-slip-new', {
        parent: 'app',
        url: '/admin/sales/return-slip/new',
        component: 'returnSlipNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

ReturnSlipNewController.$inject = ["$state", "$stateParams", "ReturnSlipsService", "CompanyService", "DepartmentsService", "PermissionsService"];
function ReturnSlipNewController($state, $stateParams, ReturnSlipsService, CompanyService, DepartmentsService, PermissionsService) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    ctrl.rs = {
    		company: ctrl.user.company,
    		returnSlipProducts: []
    };
  };

  ctrl.createReturnSlip = function (event) {
	console.log("create " + JSON.stringify(event.rs));
    ReturnSlipsService.save(event.rs).then(function () {
      $state.go('return-slips');
    });

  };
}

angular
  .module('admin.sales')
  .controller('ReturnSlipNewController', ReturnSlipNewController);
})(window.angular);
(function(angular){
'use strict';

var returnSlip = {
  templateUrl: './return-slips.html',
  controller: 'ReturnSlipController'
};

angular
  .module('admin.sales')
  .component('returnSlip', returnSlip)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('return-slips', {
        parent: 'app',
        url: '/admin/sales/return-slip',
        component: 'returnSlip'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

ReturnSlipController.$inject = ["$state", "ReturnSlipsService", "UsersService", "$rootScope", "$location", "_"];
function ReturnSlipController($state, ReturnSlipsService, UsersService, $rootScope, $location, _) {
  var ctrl = this;
  ctrl.returnSlips = [];

  
  ctrl.sortType = 'date';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addReturnSlip = false;
	  ctrl.error = null;
	  ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
	  UsersService.get(ctrl.user.id).then(function(response){
		  ctrl.userAssignedDepots = response.data.depots;
	  });
  };
  
  ctrl.selectDepot = function(){
	  loadReturnSlips();
  };
  
  function loadReturnSlips(){
	  ctrl.company = $rootScope.selectedCompany;
	  ReturnSlipsService.listByDepot(ctrl.userAssignedDepot.id).then(function(response){
	  	  console.log("list response: {}", response.data);
		  ctrl.returnSlips = response.data;
	  });
  }
  
  ctrl.searchPrf = function(event){
	  ctrl.prfTable.DataTable.search(event).draw();
  };
  
  ctrl.createNewReturnSlip = function (event) {
	    console.log('createNewReturnSlip');
	    $state.go('return-slip-new');
	    
  };
  
  /*
  ctrl.openModal = function(returnSlip){
	  console.log("show modal" +  ctrl.showModal);
	  ctrl.so = returnSlip;
	  ReturnSlipsService.getLatestCancelledReqs(ctrl.so.id).then(function(response){
		  ctrl.cancelreqs = response.data;
		  for(var i = 0; i < ctrl.so.products.length; i++){
			  for(var j = 0; j < ctrl.cancelreqs.length; j++){
				  if(ctrl.so.products[i].id == ctrl.cancelreqs[j].returnSlipProduct.id){
					  console.log("hi" + ctrl.cancelreqs);
					  ctrl.so.products[i].cancelReq = ctrl.cancelreqs[j];
				  }
			  }
		  }
	  });
	  
	  console.log("returnSlip" + JSON.stringify(ctrl.so));

	  $('#soInfoModal').modal('show');
	  
  };
  */
  ctrl.edit = function (so) {
	  $state.go('return-slip-edit', { 'soId': so.id });
  };
  /*
  ctrl.showAddReturnSlip = function (show){
	  ctrl.addReturnSlip = show;
  };
  
  
  
  ctrl.saveReturnSlip = function (event) {
	    ReturnSlipsService.save(event.purchaserequest).then(function () {
	    	  loadReturnSlips();
	    	  ctrl.showAddReturnSlip(false);
	    	  ctrl.purchaserequest = null;
	    });
  };
  */
  
  ctrl.deleteReturnSlip = function (id){
	  ReturnSlipsService.delete(id).then(function(response){
		  loadReturnSlips();
	  });
  };
  
 
}

angular
  .module('admin.sales')
  .controller('ReturnSlipController', ReturnSlipController);
})(window.angular);
(function(angular){
'use strict';
var salesOrderForm = {
  bindings: {
    so: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './sales-order-form.html',
  controller: 'SalesOrderFormController'
};

angular
  .module('admin.sales')
  .component('salesOrderForm', salesOrderForm);
})(window.angular);
(function(angular){
'use strict';
SalesOrderFormController.$inject = ["$state", "SalesOrdersService", "ItemsService", "ProductInventoryService", "PurchaseOrdersService", "UsersService", "$rootScope"];
function SalesOrderFormController(
  $state,
  SalesOrdersService,
  ItemsService,
  ProductInventoryService,
  PurchaseOrdersService,
  UsersService,
  $rootScope
) {
  var ctrl = this;

  ctrl.stockOnHandList = [];
  ctrl.reserved = [];
  ctrl.$onInit = function () {
    ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));

    UsersService.get(ctrl.user.id).then(function (response) {
      ctrl.depots = response.data.depots;
    });

    ctrl.so.date = new Date();
  };
  ctrl.$onChanges = function (changes) {
    if (changes.so) {
      ctrl.so = angular.copy(ctrl.so);
    }
  };

  ctrl.submitForm = function () {
    console.log('submitForm: ' + JSON.stringify(ctrl.so));
    for (var i = 0; i < ctrl.so.products.length; i++) {
      ctrl.so.products[i].depot = ctrl.so.depot;
      ctrl.so.products[i].soNumber = ctrl.so.number;
    }
    ctrl.onSubmit({
      $event: {
        so: ctrl.so,
      },
    });
  };

  ctrl.computeTotalAmount = function (value, index) {
    ctrl.so.products[index].amount = value;
    ctrl.so.totalAmount = 0;
    for (var i = 0; i < ctrl.so.products.length; i++) {
      ctrl.so.totalAmount +=
        ctrl.so.products[i].quantity * ctrl.so.products[i].unitPrice;
    }
  };

  ctrl.findProduct = function () {
    ctrl.company = $rootScope.selectedCompany;
    ProductInventoryService.listFinishedGoodView(ctrl.company.id).then(
      function (response) {
        ctrl.fglistview = response.data;
        console.log('FGLISTVIEW' + ctrl.fglistview);
        $('#findFgInventoryModal').modal('show');
      }
    );
  };
}

angular
  .module('admin.sales')
  .controller('SalesOrderFormController', SalesOrderFormController);
})(window.angular);
(function(angular){
'use strict';
var salesOrderNew = {
  templateUrl: './sales-order-new.html',
  controller: 'SalesOrderNewController'
};

angular
  .module('admin.sales')
  .component('salesOrderNew', salesOrderNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('sales-order-new', {
        parent: 'app',
        url: '/admin/sales/sales-order/new',
        component: 'salesOrderNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

SalesOrderNewController.$inject = ["$state", "$stateParams", "SalesOrdersService", "CompanyService", "DepartmentsService", "PermissionsService"];
function SalesOrderNewController($state, $stateParams, SalesOrdersService, CompanyService, DepartmentsService, PermissionsService) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    ctrl.so = {
    		requestedBy : ctrl.user,
    		company: ctrl.user.company,
    		preparedBy : ctrl.user,
    		checkedBy : ctrl.user,
    		products: []
    };
  };

  ctrl.createSalesOrder = function (event) {
	console.log("create " + JSON.stringify(event.so));
    SalesOrdersService.save(event.so).then(function () {
      $state.go('sales-orders');
    });

  };
}

angular
  .module('admin.sales')
  .controller('SalesOrderNewController', SalesOrderNewController);
})(window.angular);
(function(angular){
'use strict';

var salesOrder = {
  templateUrl: './sales-orders.html',
  controller: 'SalesOrderController'
};

angular
  .module('admin.sales')
  .component('salesOrder', salesOrder)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('sales-orders', {
        parent: 'app',
        url: '/admin/sales/sales-order',
        component: 'salesOrder'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

SalesOrderController.$inject = ["$state", "SalesOrdersService", "SalesRepsService", "UsersService", "$rootScope", "$location", "_"];
function SalesOrderController($state, SalesOrdersService, SalesRepsService, UsersService, $rootScope, $location, _) {
  var ctrl = this;
  ctrl.salesOrders = [];

  
  ctrl.sortType = 'date';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addSalesOrder = false;
	  ctrl.error = null;
	  ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
	  UsersService.get(ctrl.user.id).then(function(response){
		  ctrl.userAssignedDepots = response.data.depots;
	  });
	  
	  SalesRepsService.list().then(function(response){
		  ctrl.salesReps = response.data;
	  });
	  
	  
  };
  
  ctrl.selectDepot = function(){
	  loadSalesOrders();
  };
  
  function loadSalesOrders(){
	  ctrl.company = $rootScope.selectedCompany;
	  SalesOrdersService.listByDepot(ctrl.userAssignedDepot.id).then(function(response){
	  	  console.log("list response: {}", response.data);
		  ctrl.salesOrders = response.data;
	  });
  }
  
  ctrl.searchPrf = function(event){
	  ctrl.prfTable.DataTable.search(event).draw();
  };
  
  ctrl.createNewSalesOrder = function (event) {
	    console.log('createNewSalesOrder');
	    $state.go('sales-order-new');
	    
  };
  
  ctrl.openModal = function(salesOrder){
	  console.log("show modal" +  ctrl.showModal);
	  ctrl.so = salesOrder;
	  SalesOrdersService.getLatestCancelledReqs(ctrl.so.id).then(function(response){
		  ctrl.cancelreqs = response.data;
		  for(var i = 0; i < ctrl.so.products.length; i++){
			  for(var j = 0; j < ctrl.cancelreqs.length; j++){
				  if(ctrl.so.products[i].id == ctrl.cancelreqs[j].salesOrderProduct.id){
					  console.log("hi" + ctrl.cancelreqs);
					  ctrl.so.products[i].cancelReq = ctrl.cancelreqs[j];
				  }
			  }
		  }
	  });
	  
	  console.log("salesOrder" + JSON.stringify(ctrl.so));

	  $('#soInfoModal').modal('show');
	  
  };
  
  ctrl.edit = function (so) {
	  $state.go('sales-order-edit', { 'soId': so.id });
  };
  /*
  ctrl.showAddSalesOrder = function (show){
	  ctrl.addSalesOrder = show;
  };
  
  
  
  ctrl.saveSalesOrder = function (event) {
	    SalesOrdersService.save(event.purchaserequest).then(function () {
	    	  loadSalesOrders();
	    	  ctrl.showAddSalesOrder(false);
	    	  ctrl.purchaserequest = null;
	    });
  };
  */
  
  ctrl.deleteSalesOrder = function (id){
	  SalesOrdersService.delete(id).then(function(response){
		  loadSalesOrders();
	  });
  };
  
 
}

angular
  .module('admin.sales')
  .controller('SalesOrderController', SalesOrderController);
})(window.angular);
(function(angular){
'use strict';

var moManufacture = {
    templateUrl: './mo-manufacture.html',
    controller: 'MoManufactureController'
  };
  
  angular
    .module('admin.rnd')
    .component('moManufacture', moManufacture)
    .config(["$stateProvider", function ($stateProvider) {
      $stateProvider
        .state('mo-manufacture', {
          parent: 'app',
          url: '/admin/rnd/mo/manufacture?id',
          component: 'moManufacture',
          params: {
            id: null
          },
          resolve: {
            id: ["$transition$", function ($transition$) {
              console.log('transitions.id', $transition$.params().id);
              return $transition$.params().id;
            }]
          }
        });
    }]);})(window.angular);
(function(angular){
'use strict';

  MoManufactureController.$inject = ["$state", "RecipesService", "FinishedGoodsService", "InventoryService", "$rootScope", "MoInventoryService", "_", "$stateParams"];
function MoManufactureController($state, RecipesService, FinishedGoodsService, InventoryService, $rootScope, MoInventoryService, _, $stateParams) {
    var ctrl = this;

    MoInventoryService.get($stateParams.id).then(function(res) {
      ctrl.mo = res.data;
    });

    ctrl.createMo = function() {
        // remove moQReserved and move to moQuantity
        _.forEach(ctrl.mo.inventoryList, function(inv) {
         
          _.forEach(ctrl.mo.recipe.activeIngredientGroup.ingredients, function(ingredient) {
            if (ingredient.item.code === inv.item.code) {
              var recipeItemNeededQuantity = ingredient.quantity * ctrl.mo.batchSize;
              inv.moQuantity += recipeItemNeededQuantity;
              inv.moqReserved -= recipeItemNeededQuantity;
            } 
          });
        });

        MoInventoryService.saveWithLotNumber(ctrl.mo).then(function() {
          $state.go('mo');
        });   
    }

    ctrl.findIngredientQuantity = function(itemCode) {
      var ingredientQuantity = 0;
      _.forEach(ctrl.mo.recipe.activeIngredientGroup.ingredients, function(ingredient) {
        if (ingredient.item.code === itemCode) {
          ingredientQuantity = ingredient.quantity;
          return;
        } 
      });

      return ingredientQuantity;
    }
      
  }
  
  angular
    .module('admin.rnd')
    .controller('MoManufactureController', MoManufactureController);
  })(window.angular);
(function(angular){
'use strict';

var moMultitest = {
    templateUrl: './mo-multi-test.html',
    controller: 'MoMultiTestController'
  };
  
  angular
    .module('admin.rnd')
    .component('moMultitest', moMultitest)
    .config(["$stateProvider", function ($stateProvider) {
      $stateProvider
        .state('mo-multi-test', {
          parent: 'app',
          url: '/admin/rnd/mo/multi-test',
          component: 'moMultitest'
        });
    }]);})(window.angular);
(function(angular){
'use strict';

  MoMultiTestController.$inject = ["$state", "RecipesService", "FinishedGoodsService", "InventoryService", "$rootScope", "MoInventoryService", "_"];
function MoMultiTestController($state, RecipesService, FinishedGoodsService, InventoryService, $rootScope, MoInventoryService, _) {
    var ctrl = this;

    ctrl.mo = { batchSize: 0};
    ctrl.mo.company = $rootScope.selectedCompany;
    ctrl.inventoryList = [];
    ctrl.mo.type = "";
    ctrl.tests = [];


  FinishedGoodsService.list().then(function(response){
  		  console.log("list response: " + JSON.stringify(response.data));
        ctrl.finishedGoods = response.data;
        ctrl.filteredFinishedGoods = response.data;
      });

      RecipesService.list().then(function(response) {
        console.log("recipes list", response.data);
      });


      ctrl.reset = function() {
        ctrl.tests = [];
        ctrl.filteredFinishedGoods = ctrl.finishedGoods;
        ctrl.inventoryList = [];
        ctrl.mo.inventoryList = [];
      }
   

      ctrl.testRun = function() {
        console.log("finishedGood id: ", ctrl.mo.finishedGood.id);
        ctrl.tests.push({id: ctrl.mo.finishedGood.id, code: ctrl.mo.finishedGood.code, batchsize: ctrl.mo.batchSize});
        
        ctrl.filteredFinishedGoods = _.filter(ctrl.finishedGoods, (o) => {
          return !ctrl.tests.map(function(item) {
            return item['id'];
          }).includes(o.id);
        });
        
        RecipesService.listByFinishedGood(ctrl.mo.finishedGood.id).then(function(res) {
          if (res.data.length > 0) {
            ctrl.recipe = res.data[0];
            console.log("recipe received", ctrl.recipe);

            InventoryService.listByRecipeItemsOnInventory(ctrl.mo.company.id, ctrl.recipe.id).then(function(res) {
              if (res.data.length > 0) {
                _.forEach(res.data, function(inventory) {
                    var inventoryListIndex = ctrl.findInventoryItemIndex(inventory);
                    console.log("inventoryListIndex", inventoryListIndex);
                    if (!inventoryListIndex) {
                      inventory['moQuantity'] = ctrl.getRecipeItemQuantity(inventory.item.code, ctrl.recipe);
                      if (ctrl.mo.type == 'RM' && inventory.item.type.code == 'RM') {
                        ctrl.inventoryList.push(inventory);
                      } else if (ctrl.mo.type == 'PM' && inventory.item.type.code == 'PM') {
                        ctrl.inventoryList.push(inventory);
                      } else if (ctrl.mo.type == ''){
                        ctrl.inventoryList.push(inventory);
                      }
                    } else {
                      ctrl.inventoryList[index]['moQuantity'] += ctrl.getRecipeItemQuantity(inventory.item.code, ctrl.recipe);
                    }
                });

                ctrl.mo.inventoryList = ctrl.inventoryList;

                if (ctrl.inventoryList.length == 0) {
                  alert("Items needed for MO does not exist in inventory");
                }
              } else {
                alert("Inventory not found for finished good ");
              }

              _.forEach(ctrl.recipe.activeIngredientGroup.ingredients, function(ingredient) {
                var isInRecipe = false;
                _.forEach(ctrl.inventoryList, function(inv) {
                  if (inv.item && inv.item.code == ingredient.item.code) {
                    isInRecipe = true;
                  }
                });

                if (!isInRecipe) {
                  if (ctrl.mo.type == 'RM' && ingredient.item.type.code == 'RM') {
                    ctrl.inventoryList.push({controlNumber: 'N/A', item: ingredient.item, quantity: 0, moQuantity: ingredient.quantity});
                  } else if (ctrl.mo.type == 'PM' && ingredient.item.type.code == 'PM') {
                    ctrl.inventoryList.push({controlNumber: 'N/A', item: ingredient.item, quantity: 0, moQuantity: ingredient.quantity});
                  } else if (ctrl.mo.type == ''){
                    ctrl.inventoryList.push({controlNumber: 'N/A', item: ingredient.item, quantity: 0, moQuantity: ingredient.quantity});
                  }
                  
                }
            });
              
            });
          } else {
            alert("Recipe not found for finished good");
          }

       });
      }

      ctrl.findInventoryItemIndex = function(inventory) {
        for (var i = 0; i < ctrl.inventoryList.length; i++) {
          if (ctrl.inventoryList[i].id == inventory.id) {
            return i;
          }
        }


        return null;
      }

      ctrl.getRecipeItemQuantity = function(itemCode, recipe) {
        var result = 0;
        _.forEach(recipe.activeIngredientGroup.ingredients, function(ingredient) {
          if (ingredient.item.code === itemCode) {
            result = ingredient.quantity * ctrl.mo.batchSize;
          } 
        });

        return result;
      }


      ctrl.isPassed = function() {
        var totalResult = 0;
        _.forEach(ctrl.mo.inventoryList, function(inv) {
          totalResult += (inv.result) ? inv.result : 0;
        });

        return (totalResult == 0) ? 'PASSED' : 'FAILED';
      }

    


      ctrl.processLacking = function(q1, q2) {
        var result = q1 - q2;
        return (result > 0) ? 0 : Math.abs(result);
      }

      ctrl.createMo = function() {
          _.forEach(ctrl.mo.inventoryList, function(inv) {
            inv.quantity = inv.quantity - inv.moQuantity;
          });
          console.log("createMo ", ctrl.mo);
          MoInventoryService.save(ctrl.mo);
          alert("New Mo Created");
      }
      
  }
  
  angular
    .module('admin.rnd')
    .controller('MoMultiTestController', MoMultiTestController);
  })(window.angular);
(function(angular){
'use strict';

var moNew = {
    templateUrl: './mo-new.html',
    controller: 'MoNewController'
  };
  
  angular
    .module('admin.rnd')
    .component('moNew', moNew)
    .config(["$stateProvider", function ($stateProvider) {
      $stateProvider
        .state('mo-new', {
          parent: 'app',
          url: '/admin/rnd/mo/new',
          component: 'moNew'
        });
    }]);})(window.angular);
(function(angular){
'use strict';
// PRE MANUFACTURING ORDER
  MoNewController.$inject = ["$state", "RecipesService", "FinishedGoodsService", "InventoryService", "$rootScope", "MoInventoryService", "_"];
function MoNewController($state, RecipesService, FinishedGoodsService, InventoryService, $rootScope, MoInventoryService, _) {
    var ctrl = this;

    ctrl.mo = { batchSize: 0};
    ctrl.mo.company = $rootScope.selectedCompany;
    ctrl.inventoryList = [];
    ctrl.mo.type = "";


  FinishedGoodsService.list().then(function(response){
  		  console.log("list response: " + JSON.stringify(response.data));
  		  ctrl.finishedGoods = response.data;
      });

      RecipesService.list().then(function(response) {
        console.log("recipes list", response.data);
      });
   

      ctrl.testRun = function() {
        console.log("finishedGood id: ", ctrl.mo.finishedGood.id);
        RecipesService.listByFinishedGood(ctrl.mo.finishedGood.id).then(function(res) {
          if (res.data.length > 0) {
            ctrl.recipe = res.data[0];
            console.log("recipe received", ctrl.recipe);

            InventoryService.listByRecipeItemsOnInventory(ctrl.mo.company.id, ctrl.recipe.id).then(function(res) {
              ctrl.inventoryList = [];

              ctrl.ingredients = _.filter(ctrl.recipe.activeIngredientGroup.ingredients, function(ingredient) {
                return (ctrl.mo.type == '' || (ctrl.mo.type == 'RM' && ingredient.item.type.code == 'RM'));
              });

              if (res.data.length > 0) {
                _.forEach(res.data, function(inventory) {
                    if (ctrl.mo.type == 'RM' && inventory.item.type.code == 'RM') {
                      ctrl.inventoryList.push(inventory);
                    } else if (ctrl.mo.type == 'PM' && inventory.item.type.code == 'PM') {
                      ctrl.inventoryList.push(inventory);
                    } else if (ctrl.mo.type == ''){
                      ctrl.inventoryList.push(inventory);
                    }
                });

                ctrl.mo.inventoryList = ctrl.inventoryList;
                ctrl.mo.recipe = ctrl.recipe;
                ctrl.mo.ingredientGroup = ctrl.recipe.activeIngredientGroup;

                _.forEach(ctrl.ingredients, function(ingredient) {
                    var isInRecipe = false;
                    _.forEach(ctrl.mo.inventoryList, function(inv) {
                      if (inv.item && inv.item.code == ingredient.item.code) {
                        inv.ingredientQuantity = ingredient.quantity;
                        isInRecipe = true;
                      }
                    });

                    if (!isInRecipe) {
                      if (ctrl.mo.type == 'RM' && ingredient.item.type.code == 'RM') {
                        ctrl.inventoryList.push({controlNumber: 'N/A', item: ingredient.item, quantity: 0, ingredientQuantity: ingredient.quantity});
                      } else if (ctrl.mo.type == 'PM' && ingredient.item.type.code == 'PM') {
                        ctrl.inventoryList.push({controlNumber: 'N/A', item: ingredient.item, quantity: 0, ingredientQuantity: ingredient.quantity});
                      } else if (ctrl.mo.type == ''){
                        ctrl.inventoryList.push({controlNumber: 'N/A', item: ingredient.item, quantity: 0, ingredientQuantity: ingredient.quantity});
                      }
                      
                    }
                });

                if (ctrl.inventoryList.length == 0) {
                  alert("Items needed for MO does not exist in inventory");
                }
              } else {
                alert("Inventory not found for finished good: " + ctrl.mo.finishedGood.name + " " +  ctrl.mo.finishedGood.code);
              }
              
            });
          } else {
            alert("Recipe not found for finished good" + ctrl.mo.finishedGood.name + " " +  ctrl.mo.finishedGood.code);
          }

       });
      }


      ctrl.isPassed = function() {
        var totalResult = 0;
        _.forEach(ctrl.mo.inventoryList, function(inv) {
          totalResult += (inv.result) ? inv.result : 0;
        });

        return (totalResult == 0) ? 'PASSED' : 'Quantity Lacking';
      }

      ctrl.getRecipeItemQuantity = function(itemCode, recipe) {
        var recipeItemNeededQuantity = 0;
        _.forEach(recipe.activeIngredientGroup.ingredients, function(ingredient) {
          if (ingredient.item.code === itemCode) {
            recipeItemNeededQuantity = ingredient.quantity * ctrl.mo.batchSize;
          } 
        });

        return recipeItemNeededQuantity;
      }


      ctrl.processLacking = function(quantity, itemCode, recipe, $index) {
        var totalQuantity = 0;
        
        _.forEach(recipe.activeIngredientGroup.ingredients, function(ingredient) {
          
          if (ingredient.item.code === itemCode) {
            
            totalQuantity += ingredient.quantity
          }
        });

        var result = quantity - (totalQuantity * ctrl.mo.batchSize);

        return (result > 0) ? 0 : Math.abs(result);
      }

      ctrl.createMo = function() {
        ctrl.mo.inventoryList = _.filter(ctrl.mo.inventoryList, function(inv) {
          return inv.controlNumber != 'N/A';
        });

          _.forEach(ctrl.mo.inventoryList, function(inv) {
            if (inv.moqReserved) {
              inv.moqReserved += ctrl.getRecipeItemQuantity(inv.item.code, ctrl.mo.recipe);
            } else {
              inv.moqReserved = ctrl.getRecipeItemQuantity(inv.item.code, ctrl.mo.recipe)
            }

            inv.quantity = inv.quantity - inv.moqReserved;
          });
         
          if (ctrl.mo.type == 'RM') {
            ctrl.mo.remainingBatchSize = ctrl.mo.batchSize;
          }
          
          console.log("createMo ", ctrl.mo);
          MoInventoryService.save(ctrl.mo).then(function() {
            $state.go('mo');
          });
         
      }
      
  }
  
  angular
    .module('admin.rnd')
    .controller('MoNewController', MoNewController);
  })(window.angular);
(function(angular){
'use strict';

var ppNew = {
    templateUrl: './pp-new.html',
    controller: 'PpNewController'
  };
  
  angular
    .module('admin.rnd')
    .component('ppNew', ppNew)
    .config(["$stateProvider", function ($stateProvider) {
      $stateProvider
        .state('pp-new', {
          parent: 'app',
          url: '/admin/rnd/pp/new',
          component: 'ppNew'
        });
    }]);})(window.angular);
(function(angular){
'use strict';

  PpNewController.$inject = ["$state", "$rootScope", "MoInventoryService", "PpInventoryService", "_"];
function PpNewController($state, $rootScope, MoInventoryService, PpInventoryService, _) {
    var ctrl = this;

    ctrl.pp = { batchSize: 0};
    ctrl.pp.company = $rootScope.selectedCompany;
    ctrl.inventoryList = [];
    ctrl.pp.type = "";

    
    MoInventoryService.listByCompanyAndRemainingBatchSize(ctrl.pp.company.id).then(function(response){
    // MoInventoryService.listByCompanyAndNonlotNumber(ctrl.pp.company.id).then(function(response){
  		  console.log("MoInventoryService list response: " + JSON.stringify(response.data));
  		  ctrl.moList = response.data;
      });


      ctrl.selectMo = function() {
        ctrl.pp = ctrl.mo;
        ctrl.batchSize = ctrl.mo.remainingBatchSize;
      }

      ctrl.createPP = function() {
        
       

        ctrl.pp.remainingBatchSize -= ctrl.batchSize;
        ctrl.pp.batchSize = ctrl.pp.remainingBatchSize;

        if (ctrl.pp.remainingBatchSize == 0) {
          ctrl.pp.lotNumber = -1;
        }
       
        MoInventoryService.save(ctrl.pp).then(function(res) {
          ctrl.pp.id = null;
          ctrl.pp.remainingBatchSize = 0;
          ctrl.pp.batchSize = ctrl.batchSize;
          ctrl.pp.type = 'ALL';

          // remove moQReserved and move to moQuantity
          _.forEach(ctrl.pp.inventoryList, function(inv) {
            _.forEach(ctrl.pp.recipe.activeIngredientGroup.ingredients, function(ingredient) {
              if (ingredient.item.code === inv.item.code) {
                var recipeItemNeededQuantity = ingredient.quantity * ctrl.mo.batchSize;
                inv.moQuantity += recipeItemNeededQuantity;
                inv.moqReserved -= recipeItemNeededQuantity;
              } 
            });
          });
  

          MoInventoryService.saveWithLotNumber(ctrl.pp).then(function(res) {
            $state.go('mo');
          });
        });

       
      }

      
  }
  
  angular
    .module('admin.rnd')
    .controller('PpNewController', PpNewController);
  })(window.angular);
(function(angular){
'use strict';
var recipeForm = {
  bindings: {
    recipe: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './recipe-form.html',
  controller: 'RecipeFormController'
};

angular
  .module('admin.rnd')
  .component('recipeForm', recipeForm);
})(window.angular);
(function(angular){
'use strict';

RecipeFormController.$inject = ["$state", "FinishedGoodsService", "ItemsService"];
function RecipeFormController($state, FinishedGoodsService, ItemsService) {
  var ctrl = this;

  var ingredientGroup = { 
    name: "", 
    ingredient: []
  }

  var ingredient = {
    quantity: 0    
  }
  
  ctrl.$onChanges = function (changes) {
    if (changes.po) {
      ctrl.po = angular.copy(ctrl.po);
    }
  };

  ctrl.addIngredientGroup = function() {
    ctrl.recipe.ingredientGroups.push({ingredients: []});
  }

  ctrl.addIngredient = function(ingredientGroup) {
    ingredientGroup.ingredients.push({item: {}, quantity: 0});
  }
  
  ctrl.$onInit = function() {
	  FinishedGoodsService.list().then(function(response){
		  console.log("list response: " + JSON.stringify(response.data));
		  ctrl.finishedGoods = response.data;
    });

    ItemsService.list().then(function(response){
		  ctrl.items = response.data;
    });

  };

  
  ctrl.submitForm = function () {
    console.log('submitForm: ' + JSON.stringify(ctrl.recipe));
    ctrl.onSubmit({
      $event: {
    	  recipe: ctrl.recipe
      }
    });
  };
  
}

angular
  .module('admin.rnd')
  .controller('RecipeFormController', RecipeFormController);
})(window.angular);
(function(angular){
'use strict';
var recipeNew = {
  templateUrl: './recipe-new.html',
  controller: 'RecipeNewController'
};

angular
  .module('admin.rnd')
  .component('recipeNew', recipeNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('recipe-new', {
        parent: 'app',
        url: '/admin/rnd/recipe/new',
        component: 'recipeNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

RecipeNewController.$inject = ["$state", "RecipesService", "$rootScope"];
function RecipeNewController($state, RecipesService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    ctrl.recipe = {
    		company: $rootScope.selectedCompany,
        finishedGood: {},
        ingredientGroups: [],
        status: "Active"
    };
  };

  ctrl.createRecipe = function (event) {
    console.log("create event", event.recipe);
    RecipesService.save(event.recipe).then(function (response) {
      $state.go('rnd');
    });

  };
}

angular
  .module('admin.rnd')
  .controller('RecipeNewController', RecipeNewController);
})(window.angular);
(function(angular){
'use strict';

var recipe = {
  templateUrl: './recipes.html',
  controller: 'RecipeController'
};

angular
  .module('admin.rnd')
  .component('recipe', recipe)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('recipes', {
        parent: 'app',
        url: '/admin/rnd/recipes',
        component: 'recipe'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

RecipeController.$inject = ["$state", "RecipesService", "_"];
function RecipeController($state, RecipesService, _) {
  var ctrl = this;
  ctrl.recipes = [];
  ctrl.recipesOfFinishedGood = [];

  ctrl.searchCode = '';
  ctrl.searchName = '';
  ctrl.sortType = 'code';
  ctrl.sortReverse = false;

  ctrl.$onInit = function () {
	  ctrl.addRecipe = false;
	  ctrl.error = null;
	  loadRecipes();
  };
  
  function loadRecipes(){
	  RecipesService.listByStatus("Active").then(function(response){
		  console.log("list response: " + JSON.stringify(response.data));
		  ctrl.recipes = response.data;
	  });
  }
  
  ctrl.loadRecipesOfFinishedGood = function(finishedGood){
	  RecipesService.listByFinishedGood(finishedGood.id).then(function(response){
		  return response.data;
	  });
  };

  ctrl.updateRecipe = function (recipe) {
	RecipesService.update(recipe).then(function(response){
		console.log("Recipe updated " + recipe.name);
	}); 
  }
  
  ctrl.showAddRecipe = function (show){
	  ctrl.addRecipe = show;
  };
  
  ctrl.openModal = function(finishedGood){
	  ctrl.showModal = true;
	  console.log("show modal" +  ctrl.showModal);
	  console.log("finished good" + JSON.stringify(finishedGood));
	  ctrl.finishedgood = finishedGood;
	  RecipesService.listByFinishedGood(ctrl.finishedgood.id).then(function(response){
		  ctrl.recipesOfFinishedGood = response.data;
		  console.log("recipe of finished good" + JSON.stringify(ctrl.recipesOfFinishedGood));
    });
  };
  
  ctrl.closeModal = function(){
	  ctrl.showModal = false;
  };
  
  ctrl.editRecipe = function (id) {
	  RecipesService.get(id).then(function(response){
		  ctrl.recipe = response.data;
	  });
	  ctrl.addRecipe = true;
  };
  
  ctrl.saveRecipe = function (event) {
	    RecipesService.save(event.recipe).then(function () {
	    	  loadRecipes();
	    	  ctrl.showAddRecipe(false);
	    	  ctrl.recipe = null;
	    });
  };
  
  ctrl.deleteRecipe = function (id){
	  RecipesService.delete(id).then(function(response){
		  loadRecipes();
	  });
  };
}

angular
  .module('admin.rnd')
  .controller('RecipeController', RecipeController);
})(window.angular);
(function(angular){
'use strict';
var approvedReceiptForm = {
  bindings: {
    ar: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './approval-receipt-form.html',
  controller: 'ApprovedReceiptFormController'
};

angular
  .module('admin.dashboard')
  .component('approvedReceiptForm', approvedReceiptForm);
})(window.angular);
(function(angular){
'use strict';

ApprovedReceiptFormController.$inject = ["$state", "ApprovedReceiptsService", "ReceivingReceiptsService", "_"];
function ApprovedReceiptFormController($state, ApprovedReceiptsService, ReceivingReceiptsService, _) {
  var ctrl = this;

  var currentUser = localStorage.getItem('currentUser');
      if (currentUser != null) {
          ctrl.currentUser = JSON.parse(currentUser);
      }
  
  ctrl.$onInit = function (){
    
  };
  
  ctrl.$onChanges = function (changes) {
    if (changes.ar) {
      ctrl.ar = angular.copy(ctrl.ar);
    }
  };

  ctrl.findReceivingReceipts = function() {
    ReceivingReceiptsService.listReceivedItemByStatus("Quarantined").then(function(response) {
      ctrl.receivingReceipts = response.data;
    });
  }

  ctrl.calculateTotal = function(approvedItem) {
    approvedItem.approvedQuantity = parseInt(approvedItem.receivedQuantity)  - parseInt(approvedItem.rejectedQuantity) - parseInt(approvedItem.qcSamples);
  }

  ctrl.populateApprovedItems = function(rr) {
    
    ctrl.ar.item = rr.receivedItem.item;
    ctrl.ar.receivedQuantity = rr.receivedItem.quantity;
    ctrl.ar.approvedQuantity = 0;
    ctrl.ar.rejectedQuantity = 0;
    ctrl.ar.qcSamples = 0;
    ctrl.ar.totalQuantity = rr.quantity;
    ctrl.ar.unit = rr.unit;
    ctrl.ar.receivingReceipt = rr;
    ctrl.ar.receivingReceipt.id = rr.rrId;
    ctrl.calculateTotal(ctrl.ar);
    console.log(ctrl.ar);
  }

  
  ctrl.submitForm = function () {
    ctrl.onSubmit({
      $event: {
    	  ar: ctrl.ar
      }
    });
  };
  
}

angular
  .module('admin.dashboard')
  .controller('ApprovedReceiptFormController', ApprovedReceiptFormController);
})(window.angular);
(function(angular){
'use strict';
var approvedReceiptNew = {
  templateUrl: './approval-receipt-new.html',
  controller: 'ApprovedReceiptNewController'
};

angular
  .module('admin.dashboard')
  .component('approvedReceiptNew', approvedReceiptNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('approved-receipt-new', {
        parent: 'app',
        url: '/admin/dashboard/approved-receipt/new',
        component: 'approvedReceiptNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

ApprovedReceiptNewController.$inject = ["$state", "ApprovedReceiptsService", "$rootScope"];
function ApprovedReceiptNewController($state, ApprovedReceiptsService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    ctrl.ar = {
    		company: $rootScope.selectedCompany,
    		receivedBy: ctrl.user
    };
  };

  ctrl.createApprovedReceipt = function (event) {
    ApprovedReceiptsService.save(event.ar).then(function (response) {
    	  console.log("createApprovedReceipt " + JSON.stringify(response.data));
        $state.go('approved-receipts');
    });

  };
}

angular
  .module('admin.dashboard')
  .controller('ApprovedReceiptNewController', ApprovedReceiptNewController);
})(window.angular);
(function(angular){
'use strict';

var approvedReceipt = {
  templateUrl: './approval-receipts.html',
  controller: 'ApprovedReceiptController'
};

angular
  .module('admin.dashboard')
  .component('approvedReceipt', approvedReceipt)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('approved-receipts', {
        parent: 'app',
        url: '/admin/dashboard/approved-receipt',
        component: 'approvedReceipt'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

ApprovedReceiptController.$inject = ["$state", "$rootScope", "_", "ApprovedReceiptsService"];
function ApprovedReceiptController($state, $rootScope, _, ApprovedReceiptsService) {
  var ctrl = this;
  ctrl.approvalReceipts = [];

  ctrl.searchNumber = '';
  ctrl.searchRRNumber = '';
  ctrl.sortType = 'number';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addPurchaseRequest = false;
	  ctrl.error = null;
	  loadApprovedReceipts();
  };
  
  function loadApprovedReceipts(){
    ApprovedReceiptsService.list().then((response) => {
      ctrl.approvalReceipts = response.data;
      console.log("response approved receipt" + JSON.stringify(ctrl.approvalReceipts));
    });
	  
  }

  ctrl.openModal = function(approvedReceipt){
	  console.log("openModal");
    ctrl.ar = approvedReceipt;
  };

  ctrl.openModalApprovedItem = function(approvedItem) {
    console.log("openModalApprovedItem");
    ctrl.approvedItem = approvedItem;
  };
  
}

angular
  .module('admin.dashboard')
  .controller('ApprovedReceiptController', ApprovedReceiptController);
})(window.angular);
(function(angular){
'use strict';
var employeeForm = {
  bindings: {
    employee: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './employee-form.html',
  controller: 'EmployeeFormController'
};

angular
  .module('admin.dashboard')
  .component('employeeForm', employeeForm);
})(window.angular);
(function(angular){
'use strict';

EmployeeFormController.$inject = ["$state", "EmployeesService", "$rootScope", "_"];
function EmployeeFormController($state, EmployeesService, $rootScope, _) {
  var ctrl = this;
  
  ctrl.$onChanges = function (changes) {
    if (changes.employee) {
      ctrl.employee = angular.copy(ctrl.employee);
    }
  };
  
  ctrl.submitForm = function () {	   
    console.log('submitForm: ' + JSON.stringify(ctrl.employee));
    ctrl.onSubmit({
      $event: {
    	  employee: ctrl.employee
      }
    });
  };
  
}

angular
  .module('admin.dashboard')
  .controller('EmployeeFormController', EmployeeFormController);
})(window.angular);
(function(angular){
'use strict';
var employeeNew = {
  templateUrl: './employee-new.html',
  controller: 'EmployeeNewController'
};

angular
  .module('admin.dashboard')
  .component('employeeNew', employeeNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('employee-new', {
        parent: 'app',
        url: '/admin/dashboard/employee/new',
        component: 'employeeNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

EmployeeNewController.$inject = ["$state", "EmployeesService", "$rootScope"];
function EmployeeNewController($state, EmployeesService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
  };

  ctrl.createEmployee = function (event) {
    EmployeesService.save(event.employee).then(function (response) {
    	  console.log("create " + JSON.stringify(response.data));
        $state.go('employee');
    });

  };
}

angular
  .module('admin.dashboard')
  .controller('EmployeeNewController', EmployeeNewController);
})(window.angular);
(function(angular){
'use strict';

var employee = {
  templateUrl: './employees.html',
  controller: 'EmployeesController'
};

angular
  .module('admin.dashboard')
  .component('employee', employee)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('employee', {
        parent: 'app',
        url: '/admin/dashboard/employee',
        component: 'employee'
      });
  }]);})(window.angular);
(function(angular){
'use strict';
EmployeesController.$inject = ["$state", "EmployeesService", "$rootScope", "_"];
function EmployeesController($state, EmployeesService, $rootScope, _) {
  var ctrl = this;
  ctrl.employees = [];

  ctrl.searchNumber = '';
  ctrl.searchDate = '';
  ctrl.sortType = 'date';
  ctrl.sortReverse = false;

  ctrl.$onInit = function () {
    ctrl.addEmployees = false;
    ctrl.error = null;
    ctrl.getData(ctrl.currentPage);
  };

  ctrl.totalCount = 0;
  ctrl.itemsPerPage = 1;
  ctrl.currentPage = 1;

  ctrl.getData = function (page) {
    EmployeesService.paginate(
      ctrl.itemsPerPage,
      (page - 1) * ctrl.itemsPerPage
    ).then((res) => {
      var data = res.data;
      ctrl.currentPage = page;
      ctrl.totalCount = data.totalElements;
      ctrl.employees = data.content;
    });
  };

  function loadEmployees() {
    ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
    ctrl.company = $rootScope.selectedCompany;
    EmployeesService.list().then(function (response) {
      console.log('list response: ' + JSON.stringify(response.data));
      ctrl.employees = response.data;
    });
  }

  ctrl.openModal = function (employee) {
    ctrl.employee = employee;
  };

  ctrl.deleteEmployee = function (id) {
    EmployeesService.delete(id).then(function (response) {
      loadEmployees();
    });
  };

  ctrl.createNewEmployee = function (event) {
    console.log('new mis');
    $state.go('employee-new');
  };
}

angular
  .module('admin.dashboard')
  .controller('EmployeesController', EmployeesController);
})(window.angular);
(function(angular){
'use strict';
var inventoryMovementForm = {
  bindings: {
    inventorymovement: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './inventory-movement-form.html',
  controller: 'InventoryMovementFormController'
};

angular
  .module('admin.dashboard')
  .component('inventoryMovementForm', inventoryMovementForm);
})(window.angular);
(function(angular){
'use strict';
InventoryMovementFormController.$inject = ["$state", "InventoryMovementsService", "ApprovedItemsService", "$rootScope", "_"];
function InventoryMovementFormController($state, InventoryMovementsService,
		ApprovedItemsService, $rootScope, _) {
	var ctrl = this;
	
	ctrl.$onInit = function() {
		ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
		ctrl.inventorymovement.requestedBy = ctrl.user;
		ctrl.name = ctrl.user.firstName + ' ' + ctrl.user.lastName;
		ctrl.inventorymovement.date = new Date();
		ctrl.inventorymovement.company = $rootScope.selectedCompany;
		ctrl.inventorymovement.inventory = [];
		ctrl.stockOnHandList = [];
	};

	ctrl.$onChanges = function(changes) {
		if (changes.inventorymovement) {
			ctrl.inventorymovement = angular.copy(ctrl.inventorymovement);
		}
	};

	ctrl.submitForm = function() {
		console.log('submitForm: ' + JSON.stringify(ctrl.inventorymovement));
		ctrl.onSubmit({
			$event : {
				inventorymovement : ctrl.inventorymovement
			}
		});
	};

}

angular.module('admin.dashboard').controller('InventoryMovementFormController',
		InventoryMovementFormController);
})(window.angular);
(function(angular){
'use strict';
var inventoryMovementNew = {
  templateUrl: './inventory-movement-new.html',
  controller: 'InventoryMovementNewController'
};

angular
  .module('admin.dashboard')
  .component('inventoryMovementNew', inventoryMovementNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('inventory-movement-new', {
        parent: 'app',
        url: '/admin/dashboard/inventory-movements/new',
        component: 'inventoryMovementNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

InventoryMovementNewController.$inject = ["$state", "InventoryMovementsService", "$rootScope"];
function InventoryMovementNewController($state, InventoryMovementsService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onInit = function(){
	  ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
	  ctrl.inventoryMovement = {
	    		company: $rootScope.selectedCompany,
	    		requestedBy: ctrl.user
	    };
  };
  
  ctrl.createMRIS = function (event) {
    InventoryMovementsService.save(event.inventorymovement).then(function (response) {
        $state.go('inventory-movements');
    });

  };
}

angular
  .module('admin.dashboard')
  .controller('InventoryMovementNewController', InventoryMovementNewController);
})(window.angular);
(function(angular){
'use strict';

var inventoryMovements = {
  templateUrl: './inventory-movements.html',
  controller: 'InventoryMovementsController'
};

angular
  .module('admin.dashboard')
  .component('inventoryMovements', inventoryMovements)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('inventory-movements', {
        parent: 'app',
        url: '/admin/dashboard/inventory-movements',
        component: 'inventoryMovements'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

InventoryMovementsController.$inject = ["$state", "InventoryMovementsService", "$rootScope", "_"];
function InventoryMovementsController($state, InventoryMovementsService, $rootScope, _) {
  var ctrl = this;
  ctrl.inventoryMovementList = [];

  ctrl.searchNumber = '';
  ctrl.searchDate = '';
  ctrl.sortType = 'date';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addInventoryMovements = false;
	  ctrl.error = null;
	  loadInventoryMovements();
  };
  
  function loadInventoryMovements(){
	  ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
	  ctrl.company = $rootScope.selectedCompany;
	  InventoryMovementsService.listByCompany(ctrl.company.id).then(function(response){
		  ctrl.inventoryMovementList = response.data;
	  });
  }
  
  ctrl.openModal = function(inventoryMovement){
	  ctrl.mris = inventoryMovement;
  };
  
  ctrl.createNewMRIS = function (event) {
	  console.log("new mis");
	    $state.go('inventory-movement-new');
  };
}

angular
  .module('admin.dashboard')
  .controller('InventoryMovementsController', InventoryMovementsController);
})(window.angular);
(function(angular){
'use strict';
var jobOrderForm = {
  bindings: {
    jo: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './job-order-form.html',
  controller: 'JobOrderFormController'
};

angular
  .module('admin.dashboard')
  .component('jobOrderForm', jobOrderForm);
})(window.angular);
(function(angular){
'use strict';

JobOrderFormController.$inject = ["$state", "JobOrdersService", "MoInventoryService", "ProceduresService", "ProcedureAreasService", "EmployeesService", "$rootScope", "_"];
function JobOrderFormController($state, JobOrdersService, MoInventoryService, ProceduresService, ProcedureAreasService, EmployeesService, $rootScope, _) {
  var ctrl = this;
  ctrl.selectedEmployees = [];
  var currentUser = localStorage.getItem('currentUser');
      if (currentUser != null) {
          ctrl.currentUser = JSON.parse(currentUser);
      }
  
  ctrl.$onInit = function (){
	  ctrl.company = $rootScope.selectedCompany;
	  ctrl.jo.date = new Date();
	  EmployeesService.list().then(function(response){
		  ctrl.employees = response.data;
	  });
	  ProcedureAreasService.list().then(function(response){
		  ctrl.procedureAreas = response.data;
	  });
  };
  
  ctrl.selectArea = function (area){
	 ProceduresService.listByArea(area.id).then(function(response){
		 ctrl.procedures = response.data;
	 });
  };
  
  ctrl.$onChanges = function (changes) {
    if (changes.jo) {
      ctrl.jo = angular.copy(ctrl.jo);
    }
  };

  ctrl.findMoInventory = function() {
    MoInventoryService.listByCompany(ctrl.company.id).then(function(response) {
      ctrl.mos = response.data;
    });
  }
  
  ctrl.selectMO = function(mo) {
	  ctrl.jo.mo = mo;
  };
  
  ctrl.getEmployee = function(employee){
	  if(ctrl.isEmployeePresent(employee) !== -1){
			var index = ctrl.isEmployeePresent(employee);
			ctrl.selectedEmployees.splice(index, 1);
		}else{
			ctrl.selectedEmployees.push(employee);
		}
  };
  
  ctrl.isEmployeePresent = function(employee){
	  for(var i = 0; i < ctrl.selectedEmployees.length; i++){
		  if(ctrl.selectedEmployees[i] == employee){
			  return i;
		  }
	  }
	  
	  return -1;
  };
  
  ctrl.displayThis = function(time){
	  console.log(time);
  };
  
  ctrl.submitForm = function () {
	ctrl.jos = [];
	for(var i = 0; i < ctrl.selectedEmployees.length; i++){
		ctrl.jos.push({
			employee:ctrl.selectedEmployees[i],
			moInventory:ctrl.jo.mo,
			timeIn:ctrl.selectedEmployees[i].timeIn,
			timeOut:ctrl.selectedEmployees[i].timeOut,
			output:ctrl.selectedEmployees[i].output,
			numberOfHours:ctrl.selectedEmployees[i].numberOfHours,
			procedure:ctrl.selectedEmployees[i].procedure,
			date:ctrl.jo.date
		});
	}
    ctrl.onSubmit({
      $event: {
    	  jo: ctrl.jos
      }
    });
  };
  
}

angular
  .module('admin.dashboard')
  .controller('JobOrderFormController', JobOrderFormController);
})(window.angular);
(function(angular){
'use strict';
var jobOrderNew = {
  templateUrl: './job-order-new.html',
  controller: 'JobOrderNewController'
};

angular
  .module('admin.dashboard')
  .component('jobOrderNew', jobOrderNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('job-order-new', {
        parent: 'app',
        url: '/admin/dashboard/job-order/new',
        component: 'jobOrderNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

JobOrderNewController.$inject = ["$state", "JobOrdersService", "$rootScope"];
function JobOrderNewController($state, JobOrdersService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    ctrl.jo = {};
  };

  ctrl.createJobOrder = function (event) {
	  console.log("submit jo " + JSON.stringify(event.jo));
    JobOrdersService.save(event.jo).then(function (response) {
        $state.go('job-order');
    });

  };
}

angular
  .module('admin.dashboard')
  .controller('JobOrderNewController', JobOrderNewController);
})(window.angular);
(function(angular){
'use strict';

var joborder = {
  templateUrl: './job-orders.html',
  controller: 'JobOrdersController'
};

angular
  .module('admin.dashboard')
  .component('joborder', joborder)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('job-order', {
        parent: 'app',
        url: '/admin/dashboard/job-order',
        component: 'joborder'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

JobOrdersController.$inject = ["$state", "JobOrdersService", "$rootScope", "_"];
function JobOrdersController($state, JobOrdersService, $rootScope, _) {
  var ctrl = this;
  ctrl.jobOrderSlips = [];

  ctrl.searchNumber = '';
  ctrl.searchDate = '';
  ctrl.sortType = 'date';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addJobOrders = false;
	  ctrl.error = null;
	  loadJobOrders();
  };
  
  function loadJobOrders(){
	  ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
	  ctrl.company = $rootScope.selectedCompany;
	  JobOrdersService.list().then(function(response){
	  	  console.log("list response: " + JSON.stringify(response.data));
		  ctrl.jobOrderSlips = response.data;
	  });
  }
  
  ctrl.openModal = function(inventory){
	  ctrl.jo = inventory;
	  
  };
  
  ctrl.createNewJO = function (event) {
	  console.log("new jo");
	    $state.go('job-order-new');
  };
}

angular
  .module('admin.dashboard')
  .controller('JobOrdersController', JobOrdersController);
})(window.angular);
(function(angular){
'use strict';
var materialReceivingForm = {
  bindings: {
    mrs: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './material-receiving-form.html',
  controller: 'MaterialReceivingFormController'
};

angular
  .module('admin.dashboard')
  .component('materialReceivingForm', materialReceivingForm);
})(window.angular);
(function(angular){
'use strict';

MaterialReceivingFormController.$inject = ["$state", "MaterialReceivingsService", "MaterialIssuancesService", "_"];
function MaterialReceivingFormController($state, MaterialReceivingsService, MaterialIssuancesService, _) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
	  ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
	  ctrl.name = ctrl.user.firstName + ' ' + ctrl.user.lastName;
	  ctrl.company = JSON.parse(window.localStorage.getItem('company'));
	  ctrl.mrs = {receivedBy:ctrl.user,
			  date:new Date(),
			  company:ctrl.company};
		loadMaterialIssuance();

  };
  
  ctrl.$onChanges = function (changes) {
    if (changes.mrs) {
      ctrl.mrs = angular.copy(ctrl.mrs);
    }
  };
  
		ctrl.sortType = 'mis';
		ctrl.sortReverse = false;
	  
	  
	  function loadMaterialIssuance(){
		  ctrl.company = JSON.parse(window.localStorage.getItem('company'));
		  MaterialIssuancesService.listByStatus("Pending").then(function(response){
			  ctrl.misList = response.data;
			  console.log("response" + JSON.stringify(ctrl.misList));
		  });
		  ctrl.company = JSON.parse(window.localStorage.getItem('company'));
		  InventoryService.listByCompany(ctrl.company.id).then(function(response){
			  ctrl.inventoryList = response.data;
			  console.log("response" + JSON.stringify(ctrl.inventoryList));
		  });
	  }
	  
	  ctrl.selectMIS = function(mis){
		  ctrl.mrs.mis = mis;
	  };
  
  ctrl.submitForm = function () {	   
    console.log('submitForm: ' + JSON.stringify(ctrl.mrs));
    ctrl.onSubmit({
      $event: {
    	  mrs: ctrl.mrs
      }
    });
  };
  
}

angular
  .module('admin.dashboard')
  .controller('MaterialReceivingFormController', MaterialReceivingFormController);
})(window.angular);
(function(angular){
'use strict';
var materialReceivingNew = {
  templateUrl: './material-receiving-new.html',
  controller: 'MaterialReceivingNewController'
};

angular
  .module('admin.dashboard')
  .component('materialReceivingNew', materialReceivingNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('material-receiving-new', {
        parent: 'app',
        url: '/admin/dashboard/material-receiving/new',
        component: 'materialReceivingNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

MaterialReceivingNewController.$inject = ["$state", "MaterialReceivingsService", "$rootScope"];
function MaterialReceivingNewController($state, MaterialReceivingsService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
  };

  ctrl.createMRS = function (event) {
    MaterialReceivingsService.save(event.mrs).then(function (response) {
    	  console.log("create " + JSON.stringify(response.data));
        $state.go('materialreceiving');
    });

  };
}

angular
  .module('admin.dashboard')
  .controller('MaterialReceivingNewController', MaterialReceivingNewController);
})(window.angular);
(function(angular){
'use strict';

var materialreceiving = {
  templateUrl: './material-receivings.html',
  controller: 'MaterialReceivingsController'
};

angular
  .module('admin.dashboard')
  .component('materialreceiving', materialreceiving)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('materialreceiving', {
        parent: 'app',
        url: '/admin/dashboard/material-receiving',
        component: 'materialreceiving'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

MaterialReceivingsController.$inject = ["$state", "MaterialReceivingsService", "$rootScope", "_"];
function MaterialReceivingsController($state, MaterialReceivingsService, $rootScope, _) {
  var ctrl = this;
  ctrl.materialReceivingSlips = [];

  ctrl.searchNumber = '';
  ctrl.searchDate = '';
  ctrl.sortType = 'date';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addMaterialReceivings = false;
	  ctrl.error = null;
	  loadMaterialReceivings();
  };
  
  function loadMaterialReceivings(){
	  ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
	  ctrl.company = $rootScope.selectedCompany;
	  MaterialReceivingsService.listByCompany(ctrl.company.id).then(function(response){
	  	  console.log("list response: " + JSON.stringify(response.data));
		  ctrl.materialReceivingSlips = response.data;
	  });
  }
  
  ctrl.openModal = function(inventory){
	  ctrl.mrs = inventory;
	  
  };
  
  ctrl.createNewMRS = function (event) {
	  console.log("new mis");
	    $state.go('material-receiving-new');
  };
}

angular
  .module('admin.dashboard')
  .controller('MaterialReceivingsController', MaterialReceivingsController);
})(window.angular);
(function(angular){
'use strict';
var materialIssuanceForm = {
  bindings: {
    mis: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './material-issuance-form.html',
  controller: 'MaterialIssuanceFormController'
};

angular
  .module('admin.dashboard')
  .component('materialIssuanceForm', materialIssuanceForm);
})(window.angular);
(function(angular){
'use strict';

MaterialIssuanceFormController.$inject = ["$state", "MaterialIssuancesService", "ApprovedItemsService", "InventoryService", "$rootScope", "_"];
function MaterialIssuanceFormController($state, MaterialIssuancesService, ApprovedItemsService, InventoryService, $rootScope, _) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
	  ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
	  ctrl.mis.requestedBy = ctrl.user;
	  ctrl.name = ctrl.user.firstName + ' ' + ctrl.user.lastName;
	  ctrl.mis.inventoryList = [];
	  ctrl.stockOnHandList = [];
	  ctrl.mis.date = new Date();
  };
  
  ctrl.$onChanges = function (changes) {
    if (changes.mis) {
      ctrl.mis = angular.copy(ctrl.mis);
    }
  };

  ctrl.selectFromInventory = function(){
	  $("#findInventoryModal").modal('show');
  };
  
  ctrl.submitForm = function () {	   
    console.log('submitForm: ' + JSON.stringify(ctrl.mis));
    ctrl.onSubmit({
      $event: {
    	  mis: ctrl.mis
      }
    });
  };
  
}

angular
  .module('admin.dashboard')
  .controller('MaterialIssuanceFormController', MaterialIssuanceFormController);
})(window.angular);
(function(angular){
'use strict';
var materialIssuanceNew = {
  templateUrl: './material-issuance-new.html',
  controller: 'MaterialIssuanceNewController'
};

angular
  .module('admin.dashboard')
  .component('materialIssuanceNew', materialIssuanceNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('material-issuance-new', {
        parent: 'app',
        url: '/admin/dashboard/material-issuance/new',
        component: 'materialIssuanceNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

MaterialIssuanceNewController.$inject = ["$state", "MaterialIssuancesService", "$rootScope"];
function MaterialIssuanceNewController($state, MaterialIssuancesService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    ctrl.mis = {
    		company: $rootScope.selectedCompany
    };
  };

  ctrl.createMIS = function (event) {
    MaterialIssuancesService.save(event.mis).then(function (response) {
    	  console.log("create " + JSON.stringify(response.data));
        $state.go('materialissuance');
    });

  };
}

angular
  .module('admin.dashboard')
  .controller('MaterialIssuanceNewController', MaterialIssuanceNewController);
})(window.angular);
(function(angular){
'use strict';

var materialissuance = {
  templateUrl: './material-issuances.html',
  controller: 'MaterialIssuancesController'
};

angular
  .module('admin.dashboard')
  .component('materialissuance', materialissuance)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('materialissuance', {
        parent: 'app',
        url: '/admin/dashboard/material-issuance',
        component: 'materialissuance'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

MaterialIssuancesController.$inject = ["$state", "MaterialIssuancesService", "$rootScope", "_"];
function MaterialIssuancesController($state, MaterialIssuancesService, $rootScope, _) {
  var ctrl = this;
  ctrl.materialIssuanceSlips = [];

  ctrl.searchNumber = '';
  ctrl.searchDate = '';
  ctrl.sortType = 'date';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addMaterialIssuances = false;
	  ctrl.error = null;
	  loadMaterialIssuances();
  };
  
  function loadMaterialIssuances(){
	  ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
	  ctrl.company = $rootScope.selectedCompany;
	  MaterialIssuancesService.listByCompany(ctrl.company.id).then(function(response){
	  	  console.log("list response: " + JSON.stringify(response.data));
		  ctrl.materialIssuanceSlips = response.data;
	  });
  }
  
  ctrl.openModal = function(inventory){
	  ctrl.mis = inventory;
	  
  };
  
  ctrl.createNewMIS = function (event) {
	  console.log("new mis");
	    $state.go('material-issuance-new');
  };
}

angular
  .module('admin.dashboard')
  .controller('MaterialIssuancesController', MaterialIssuancesController);
})(window.angular);
(function(angular){
'use strict';
var materialReevaluationForm = {
  bindings: {
    mr: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './material-reevaluation-form.html',
  controller: 'MaterialReevaluationFormController'
};

angular
  .module('admin.dashboard')
  .component('materialReevaluationForm', materialReevaluationForm);
})(window.angular);
(function(angular){
'use strict';

MaterialReevaluationFormController.$inject = ["$state", "MaterialReevaluationsService", "ApprovedItemsService", "_"];
function MaterialReevaluationFormController($state, MaterialReevaluationsService, ApprovedItemsService, _) {
  var ctrl = this;
  
  ctrl.$onChanges = function (changes) {
    if (changes.mr) {
      ctrl.mr = angular.copy(ctrl.mr);
    }
  };

  ctrl.$onInit = function(){
	 ctrl.mr.reevaluatedBy = JSON.parse(window.localStorage.getItem("currentUser"));
	 ctrl.name = ctrl.mr.reevaluatedBy.firstName + " " + ctrl.mr.reevaluatedBy.lastName;
  };
  
  ctrl.submitForm = function () {	   
    console.log('submitForm: ' + JSON.stringify(ctrl.mr));
    ctrl.onSubmit({
      $event: {
    	  mr: ctrl.mr
      }
    });
  };
  
}

angular
  .module('admin.dashboard')
  .controller('MaterialReevaluationFormController', MaterialReevaluationFormController);
})(window.angular);
(function(angular){
'use strict';
var materialReevaluationNew = {
  templateUrl: './material-reevaluation-new.html',
  controller: 'MaterialReevaluationNewController'
};

angular
  .module('admin.dashboard')
  .component('materialReevaluationNew', materialReevaluationNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('material-reevaluation-new', {
        parent: 'app',
        url: '/admin/dashboard/material-reevaluation/new',
        component: 'materialReevaluationNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

MaterialReevaluationNewController.$inject = ["$state", "MaterialReevaluationsService", "$rootScope"];
function MaterialReevaluationNewController($state, MaterialReevaluationsService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    ctrl.mr = {
    		company: $rootScope.selectedCompany,
    };
  };

  ctrl.createMaterialReevaluation = function (event) {
    MaterialReevaluationsService.save(event.mr).then(function (response) {
    	  console.log("create " + JSON.stringify(response.data));
        $state.go('material-reevaluations');
    });

  };
}

angular
  .module('admin.dashboard')
  .controller('MaterialReevaluationNewController', MaterialReevaluationNewController);
})(window.angular);
(function(angular){
'use strict';

var materialReevaluation = {
  templateUrl: './material-reevaluations.html',
  controller: 'MaterialReevaluationController'
};

angular
  .module('admin.dashboard')
  .component('materialReevaluation', materialReevaluation)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('material-reevaluations', {
        parent: 'app',
        url: '/admin/dashboard/material-reevaluation',
        component: 'materialReevaluation'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

MaterialReevaluationController.$inject = ["$state", "MaterialReevaluationsService", "$rootScope", "_"];
function MaterialReevaluationController($state, MaterialReevaluationsService, $rootScope, _) {
  var ctrl = this;
  ctrl.materialReevaluations = [];

  ctrl.searchNumber = '';
  ctrl.searchDate = '';
  ctrl.sortType = 'date';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addMaterialReevaluation = false;
	  ctrl.error = null;
	  loadMaterialReevaluations();
  };
  
  function loadMaterialReevaluations(){
	  ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
	  ctrl.company = $rootScope.selectedCompany;
	  MaterialReevaluationsService.listByCompany(ctrl.company.id).then(function(response){
	  	  console.log("list response: " + JSON.stringify(response.data));
		  ctrl.materialReevaluations = response.data;
	  });
  }
  ctrl.createNewMaterialReevaluation = function (event) {
	    console.log('createNewMaterialReevaluation');
	    $state.go('material-reevaluation-new');
  };
  
  ctrl.openModal = function(materialReevaluation){
	  console.log("show modal" +  ctrl.showModal);
	  console.log("materialReevaluation" + JSON.stringify(materialReevaluation));
	  ctrl.materialReevaluation = materialReevaluation;
	  
  };
  
  ctrl.editMaterialReevaluation = function (id) {
	  $state.go('material-reevaluation-edit', { 'materialReevaluationId': id });
  };
  /*
  ctrl.showAddMaterialReevaluation = function (show){
	  ctrl.addMaterialReevaluation = show;
  };
  
  
  
  ctrl.saveMaterialReevaluation = function (event) {
	    MaterialReevaluationsService.save(event.purchaserequest).then(function () {
	    	  loadMaterialReevaluations();
	    	  ctrl.showAddMaterialReevaluation(false);
	    	  ctrl.purchaserequest = null;
	    });
  };
  */
  
  ctrl.deleteMaterialReevaluation = function (id){
	  MaterialReevaluationsService.delete(id).then(function(response){
		  loadMaterialReevaluations();
	  });
  };
}

angular
  .module('admin.dashboard')
  .controller('MaterialReevaluationController', MaterialReevaluationController);
})(window.angular);
(function(angular){
'use strict';
var productMovementForm = {
  bindings: {
    pm: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './product-movement-form.html',
  controller: 'ProductMovementFormController'
};

angular
  .module('admin.dashboard')
  .component('productMovementForm', productMovementForm);
})(window.angular);
(function(angular){
'use strict';

ProductMovementFormController.$inject = ["$state", "ProductMovementsService", "CategoryService", "UnitsService", "UsersService", "ClassificationsService", "ProductInventoryService"];
function ProductMovementFormController($state, ProductMovementsService, CategoryService, UnitsService, UsersService, ClassificationsService, ProductInventoryService) {
  var ctrl = this;
  ctrl.$onChanges = function (changes) {
    if (changes.pm) {
      ctrl.pm = angular.copy(ctrl.pm);
    }
  };
  
  ctrl.$onInit = function(){
	  ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));

	  ClassificationsService.list().then(function(response){
		  ctrl.classifications = response.data;
	  });
	  CategoryService.list().then(function(response){
		  ctrl.categories = response.data;
	  });
	  UnitsService.list().then(function(response){
		  ctrl.units = response.data;
	  });
	  
	  UsersService.get(ctrl.user.id).then(function(response){
		  ctrl.depots = response.data.depots;
	  });
	  
	  ctrl.stockOnHandList = [];
  };
  
  ctrl.createNewProduct = function(){
	  ctrl.showProduct = true;
  };
  
  ctrl.changeType = function (){
	  ctrl.showProduct = false;
	  ctrl.pm.product = null;
  };
  
  ctrl.createProductList = function(){
	  ctrl.company = JSON.parse(window.localStorage.getItem('company'));
	  ctrl.showProduct = true;
  };
  
  ctrl.submitForm = function () {
    console.log('submitForm: ' + JSON.stringify(ctrl.pm));
    
    ctrl.onSubmit({
      $event: {
    	  pm: ctrl.pm
      }
    });
  };
  
  ctrl.findProduct = function(){
	  ProductInventoryService.listByDepot(ctrl.pm.depot.id).then(function(response){
		  ctrl.productsInDepot = response.data;
		  console.log(JSON.stringify(response.data));
		  $("#findProductModal").modal('show');
	  });
  };



  
}

angular
  .module('admin.dashboard')
  .controller('ProductMovementFormController', ProductMovementFormController);
})(window.angular);
(function(angular){
'use strict';
var productMovementNew = {
  templateUrl: './product-movement-new.html',
  controller: 'ProductMovementNewController'
};

angular
  .module('admin.dashboard')
  .component('productMovementNew', productMovementNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('product-movement-new', {
        parent: 'app',
        url: '/admin/dashboard/product-movements/new',
        component: 'productMovementNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

ProductMovementNewController.$inject = ["$state", "ProductMovementsService", "CompanyService", "DepartmentsService", "PermissionsService"];
function ProductMovementNewController($state, ProductMovementsService, CompanyService, DepartmentsService, PermissionsService) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    ctrl.company = JSON.parse(window.localStorage.getItem('company'));
    ctrl.pm = {
    		requestedBy: ctrl.user,
    		company: ctrl.company,
    		date: new Date(),
    		products:[]
    };
  };

  ctrl.createProductMovement = function (event) {
	console.log("create " + JSON.stringify(event.pm));
    ProductMovementsService.save(event.pm).then(function () {
      $state.go('product-movements');
    });

  };
}

angular
  .module('admin.dashboard')
  .controller('ProductMovementNewController', ProductMovementNewController);
})(window.angular);
(function(angular){
'use strict';

var productMovement = {
  templateUrl: './product-movements.html',
  controller: 'ProductMovementController'
};

angular
  .module('admin.dashboard')
  .component('productMovement', productMovement)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('product-movements', {
        parent: 'app',
        url: '/admin/dashboard/product-movements',
        component: 'productMovement'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

ProductMovementController.$inject = ["$state", "ProductMovementsService", "$rootScope", "_"];
function ProductMovementController($state, ProductMovementsService, $rootScope, _) {
  var ctrl = this;
  ctrl.products = [];

  
  ctrl.sortType = 'date';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addProductMovement = false;
	  ctrl.error = null;
	  loadProductMovements();
  };
  
  function loadProductMovements(){
	  ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
	  ctrl.company = $rootScope.selectedCompany;
	  ProductMovementsService.listByCompany(ctrl.company.id).then(function(response){
	  	  console.log("list response: {}", response.data);
		  ctrl.productMovements = response.data;
	  });
  }
  
  ctrl.searchPrf = function(event){
	  ctrl.productTable.DataTable.search(event).draw();
  };
  
  ctrl.createNewProductMovement = function (event) {
	    console.log('createNewProductMovement');
	    $state.go('product-movement-new');
  };
  
  ctrl.openModal = function(product){
	  console.log("show modal" +  ctrl.showModal);
	  console.log("product" + JSON.stringify(product));
	  ctrl.product = product;
	  $('#productInfoModal').modal('show');
	  
  };
  
}

angular
  .module('admin.dashboard')
  .controller('ProductMovementController', ProductMovementController);
})(window.angular);
(function(angular){
'use strict';
var productIssuanceForm = {
  bindings: {
    pis: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './product-issuance-form.html',
  controller: 'ProductIssuanceFormController'
};

angular
  .module('admin.dashboard')
  .component('productIssuanceForm', productIssuanceForm);
})(window.angular);
(function(angular){
'use strict';

ProductIssuanceFormController.$inject = ["$state", "ProductIssuancesService", "ApprovedItemsService", "ProductInventoryService", "DepotsService", "UsersService", "_"];
function ProductIssuanceFormController($state, ProductIssuancesService, ApprovedItemsService, ProductInventoryService, DepotsService, UsersService, _) {
  var ctrl = this;
  ctrl.issuedList = [];
  ctrl.$onInit = function () {
	  ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
	  ctrl.pis.requestedBy = ctrl.user;
	  ctrl.name = ctrl.user.firstName + ' ' + ctrl.user.lastName;
	  ctrl.pis.inventoryList = [];
	  ctrl.stockOnHandList = [];
	  ctrl.pis.date = new Date();
	  
	  DepotsService.list().then(function (response){
		  ctrl.depots = response.data;
		  console.log(ctrl.depots);
	  });
	  
	  UsersService.get(ctrl.user.id).then(function(response){
		  ctrl.userAssignedDepots = response.data.depots;
	  });
	  
	  ctrl.company = JSON.parse(window.localStorage.getItem('company'));
	  
	  
  };
  
  ctrl.$onChanges = function (changes) {
    if (changes.pis) {
      ctrl.pis = angular.copy(ctrl.pis);
    }
  };
  
  ctrl.selectFromInventory = function () {
	  ProductInventoryService.listByDepot(ctrl.pis.fromDepot.id).then(function(response){
		  ctrl.inventoryList = response.data;
		  console.log("response" + JSON.stringify(ctrl.inventoryList));
	  });  
	  $("#findInventoryModal").modal("show");
  };
  
  ctrl.submitForm = function () {	   
    console.log('submitForm: ' + JSON.stringify(ctrl.pis));
    
    ctrl.onSubmit({
      $event: {
    	  pis: ctrl.pis
      }
    });
  };
  
}

angular
  .module('admin.dashboard')
  .controller('ProductIssuanceFormController', ProductIssuanceFormController);
})(window.angular);
(function(angular){
'use strict';
var productIssuanceNew = {
  templateUrl: './product-issuance-new.html',
  controller: 'ProductIssuanceNewController'
};

angular
  .module('admin.dashboard')
  .component('productIssuanceNew', productIssuanceNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('product-issuance-new', {
        parent: 'app',
        url: '/admin/dashboard/product-issuance/new',
        component: 'productIssuanceNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

ProductIssuanceNewController.$inject = ["$state", "ProductIssuancesService", "$rootScope"];
function ProductIssuanceNewController($state, ProductIssuancesService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    ctrl.pis = {
    		company: $rootScope.selectedCompany
    };
  };

  ctrl.createPIS = function (event) {
		  ProductIssuancesService.save(event.pis).then(function (response) {
	    	  console.log("create " + JSON.stringify(response.data));
	        $state.go('productissuance');
		  });
  };
}

angular
  .module('admin.dashboard')
  .controller('ProductIssuanceNewController', ProductIssuanceNewController);
})(window.angular);
(function(angular){
'use strict';

var productissuance = {
  templateUrl: './product-issuances.html',
  controller: 'ProductIssuancesController'
};

angular
  .module('admin.dashboard')
  .component('productissuance', productissuance)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('productissuance', {
        parent: 'app',
        url: '/admin/dashboard/product-issuances',
        component: 'productissuance'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

ProductIssuancesController.$inject = ["$state", "ProductIssuancesService", "$rootScope", "_"];
function ProductIssuancesController($state, ProductIssuancesService, $rootScope, _) {
  var ctrl = this;
  ctrl.productIssuanceSlips = [];

  ctrl.searchNumber = '';
  ctrl.searchDate = '';
  ctrl.sortType = 'date';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addProductIssuances = false;
	  ctrl.error = null;
	  loadProductIssuances();
  };
  
  function loadProductIssuances(){
	  ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
	  ctrl.company = $rootScope.selectedCompany;
	  ProductIssuancesService.listByCompany(ctrl.company.id).then(function(response){
	  	  console.log("list response: " + JSON.stringify(response.data));
		  ctrl.productIssuanceSlips = response.data;
	  });
  }
  
  ctrl.openModal = function(inventory){
	  ctrl.pis = inventory;
	  
  };
  
  ctrl.createNewPIS = function (event) {
	  console.log("new pis");
	    $state.go('product-issuance-new');
  };
}

angular
  .module('admin.dashboard')
  .controller('ProductIssuancesController', ProductIssuancesController);
})(window.angular);
(function(angular){
'use strict';
var productReceivingForm = {
  bindings: {
    prs: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './product-receiving-form.html',
  controller: 'ProductReceivingFormController'
};

angular
  .module('admin.dashboard')
  .component('productReceivingForm', productReceivingForm);
})(window.angular);
(function(angular){
'use strict';
ProductReceivingFormController.$inject = ["$state", "ProductReceivingsService", "UsersService", "ProductIssuancesService", "_"];
function ProductReceivingFormController($state, ProductReceivingsService,
		UsersService, ProductIssuancesService, _) {
	var ctrl = this;

	ctrl.$onInit = function() {
		ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
		ctrl.name = ctrl.user.firstName + ' ' + ctrl.user.lastName;
		ctrl.company = JSON.parse(window.localStorage.getItem('company'));
		ctrl.prs = {
			receivedBy : ctrl.user,
			date : new Date(),
			company : ctrl.company
		};
		UsersService.get(ctrl.user.id).then(function(response) {
			ctrl.depots = response.data.depots;
		});
	};

	ctrl.$onChanges = function(changes) {
		if (changes.prs) {
			ctrl.prs = angular.copy(ctrl.prs);
		}
	};

	ctrl.sortType = 'pis';
	ctrl.sortReverse = false;

	function loadProductIssuance() {
		ctrl.company = JSON.parse(window.localStorage.getItem('company'));
		ProductIssuancesService.listByStatusAndDepot("Pending", ctrl.prs.depot.id)
				.then(function(response) {
					ctrl.pisList = response.data;
					console.log("response" + JSON.stringify(ctrl.prsList));
				});
	}

	ctrl.selectPIS = function(pis) {
		ctrl.prs.pis = pis;
	};
	
	ctrl.openPISModal = function(){
		loadProductIssuance();
		$("#findPISModal").modal("show");
	};
	ctrl.submitForm = function() {
		console.log('submitForm: ' + JSON.stringify(ctrl.prs));
		ctrl.onSubmit({
			$event : {
				prs : ctrl.prs
			}
		});
	};

}

angular.module('admin.dashboard').controller('ProductReceivingFormController',
		ProductReceivingFormController);
})(window.angular);
(function(angular){
'use strict';
var productReceivingNew = {
  templateUrl: './product-receiving-new.html',
  controller: 'ProductReceivingNewController'
};

angular
  .module('admin.dashboard')
  .component('productReceivingNew', productReceivingNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('product-receiving-new', {
        parent: 'app',
        url: '/admin/dashboard/product-receiving/new',
        component: 'productReceivingNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

ProductReceivingNewController.$inject = ["$state", "ProductReceivingsService", "$rootScope"];
function ProductReceivingNewController($state, ProductReceivingsService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
  };

  ctrl.createPRS = function (event) {
    ProductReceivingsService.save(event.prs).then(function (response) {
    	  console.log("create " + JSON.stringify(response.data));
        $state.go('productReceivings');
    });

  };
}

angular
  .module('admin.dashboard')
  .controller('ProductReceivingNewController', ProductReceivingNewController);
})(window.angular);
(function(angular){
'use strict';

var productReceivings = {
  templateUrl: './product-receivings.html',
  controller: 'ProductReceivingsController'
};

angular
  .module('admin.dashboard')
  .component('productReceivings', productReceivings)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('productReceivings', {
        parent: 'app',
        url: '/admin/dashboard/product-receivings',
        component: 'productReceivings'
      });
  }]);})(window.angular);
(function(angular){
'use strict';

ProductReceivingsController.$inject = ["$state", "ProductReceivingsService", "$rootScope", "_"];
function ProductReceivingsController($state, ProductReceivingsService, $rootScope, _) {
  var ctrl = this;
  ctrl.productReceivingSlips = [];

  ctrl.searchNumber = '';
  ctrl.searchDate = '';
  ctrl.sortType = 'date';
  ctrl.sortReverse = false;
  
  ctrl.$onInit = function () {
	  ctrl.addProductReceivings = false;
	  ctrl.error = null;
	  loadProductReceivings();
  };
  
  function loadProductReceivings(){
	  ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
	  ctrl.company = $rootScope.selectedCompany;
	  ProductReceivingsService.listByCompany(ctrl.company.id).then(function(response){
	  	  console.log("list response: " + JSON.stringify(response.data));
		  ctrl.productReceivingSlips = response.data;
	  });
  }
  
  ctrl.openModal = function(inventory){
	  ctrl.prs = inventory;
	  
  };
  
  ctrl.createNewPRS = function (event) {
	  console.log("new mis");
	    $state.go('product-receiving-new');
  };
}

angular
  .module('admin.dashboard')
  .controller('ProductReceivingsController', ProductReceivingsController);
})(window.angular);
(function(angular){
'use strict';
var purchaseRequestEdit = {
  templateUrl: './purchase-request-edit.html',
  controller: 'PurchaseRequestEditController'
};

angular
  .module('admin.dashboard')
  .component('purchaseRequestEdit', purchaseRequestEdit)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('purchase-request-edit', {
        parent: 'app',
        url: '/admin/dashboard/purchase-request/edit:prfId',
        component: 'purchaseRequestEdit'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

PurchaseRequestEditController.$inject = ["$state", "$stateParams", "PurchaseRequestsService", "InventoryService", "PurchaseOrdersService", "ReceivingReceiptsService", "CompanyService", "$rootScope", "PermissionsService"];
function PurchaseRequestEditController($state, $stateParams, PurchaseRequestsService, InventoryService, PurchaseOrdersService, ReceivingReceiptsService, CompanyService, $rootScope, PermissionsService) {
  var ctrl = this;
  ctrl.$onInit = function () {
    ctrl.error = null;
    
    PurchaseRequestsService.get($stateParams.prfId).then(function(response){
    	ctrl.prf = response.data;
    	ctrl.prf.date = new Date();
    	ctrl.prf.dateNeeded = new Date();
    	console.log("requested items:" + JSON.stringify(ctrl.prf.requestedItems));
    	//ctrl.itemlist = ctrl.prf.requestedItems;
    	//console.log("item list:" + JSON.stringify(ctrl.itemlist));
    	    for (var i = 0; i < ctrl.prf.requestedItems.length; i++) {
    	    	(function(i){
    	    		  var requestedItem = ctrl.prf.requestedItems[i];
    	    		  InventoryService.getStockQuantityOfItem(requestedItem.item.id, ctrl.prf.company.id).then(function(response){
    	    	    	  ctrl.prf.requestedItems[i].stockOnHand = response.data;
    	    	    	  console.log("prf stock" + ctrl.prf.requestedItems[i].stockOnHand);
    	    		  });
    	    	      PurchaseRequestsService.getPrfQuantityOfItem(requestedItem.item.id, ctrl.prf.company.id).then(function(response){
    	    	    	  ctrl.prf.requestedItems[i].pendingPrf = response.data;
    	    	      });
    	    	      PurchaseOrdersService.getPurchaseOrderQuantity(requestedItem.item.id, ctrl.prf.company.id).then(function(response){
    	    	    	  ctrl.prf.requestedItems[i].pendingPo = response.data;
    	    	      });
    	    	      ReceivingReceiptsService.getQuarantinedQuantityOfItem(requestedItem.item.id, ctrl.prf.company.id).then(function(response){
    	    	    	  ctrl.prf.requestedItems[i].pendingRr = response.data;
    	    	      });
    	    	})(i);
    	      
    	    }
    	   
    	    
    });
    
  };
  ctrl.editPurchaseRequest = function (event) {
    console.log('PurchaseRequestEditController editPurchaseRequest');

    PurchaseRequestsService.update(event.prf).then(function () {
      $state.go('purchase-requests');
    });
  };
}

angular
  .module('admin.dashboard')
  .controller('PurchaseRequestEditController', PurchaseRequestEditController);
})(window.angular);
(function(angular){
'use strict';
var purchaseRequestEng = {
  templateUrl: './purchase-request-eng.html',
  controller: 'PurchaseRequestEngController'
};

angular
  .module('admin.dashboard')
  .component('purchaseRequestEng', purchaseRequestEng)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('purchase-request-eng', {
        parent: 'app',
        url: '/admin/dashboard/purchase-request/eng',
        component: 'purchaseRequestEng'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

PurchaseRequestEngController.$inject = ["$state", "$stateParams", "PurchaseRequestsService", "DepartmentsService", "PurchaseOrdersService", "ReceivingReceiptsService", "CompanyService", "$rootScope", "PermissionsService"];
function PurchaseRequestEngController($state, $stateParams, PurchaseRequestsService, DepartmentsService, PurchaseOrdersService, ReceivingReceiptsService, CompanyService, $rootScope, PermissionsService) {
  var ctrl = this;
  ctrl.prf  = {};
  ctrl.$onInit = function () {
    ctrl.error = null;
    
    ctrl.prf.date = new Date();
	ctrl.prf.dateNeeded = new Date();
	ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
	DepartmentsService.getByName("Engineering").then(function(response){
		ctrl.prf = {
				date: new Date(),
				dateNeeded: new Date(),
		   		requestedBy : ctrl.user,
		        company: ctrl.user.company,
		        department: response.data
		    };  
	});
	
  };
  
  ctrl.createPurchaseRequest = function (event) {
		console.log("create " + JSON.stringify(event.prf));
	    PurchaseRequestsService.save(event.prf).then(function () {
	      $state.go('purchase-requests');
	    });
  };
  
}

angular
  .module('admin.dashboard')
  .controller('PurchaseRequestEngController', PurchaseRequestEngController);
})(window.angular);
(function(angular){
'use strict';
var purchaseRequestForm = {
  bindings: {
    prf: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './purchase-request-form.html',
  controller: 'PurchaseRequestFormController'
};

angular
  .module('admin.dashboard')
  .component('purchaseRequestForm', purchaseRequestForm);
})(window.angular);
(function(angular){
'use strict';

PurchaseRequestFormController.$inject = ["$state", "PurchaseRequestsService", "ItemsService", "InventoryService", "PurchaseOrdersService", "ReceivingReceiptsService"];
function PurchaseRequestFormController($state, PurchaseRequestsService, ItemsService, InventoryService, PurchaseOrdersService, ReceivingReceiptsService) {
  var ctrl = this;
  ctrl.stockOnHand = [];
  ctrl.pendingPrf = [];
  ctrl.pendingPo = [];
  ctrl.pendingRr = [];
  
  ctrl.$onChanges = function (changes) {
    if (changes.prf) {
      ctrl.prf = angular.copy(ctrl.prf);
    }
  };
  
  
  ctrl.submitForm = function () {
    console.log('submitForm: ' + JSON.stringify(ctrl.prf));
    
    ctrl.onSubmit({
      $event: {
    	  prf: ctrl.prf
      }
    });
  };

  ctrl.selectItem = function(){
	  ctrl.itemlist = [];
	  for(var i = 0; ctrl.prf.requestedItems != null && 	i < ctrl.prf.requestedItems.length; i++){
		  ctrl.itemlist.push({
			  item:ctrl.prf.requestedItems[i].item,
			  stockOnHand:ctrl.prf.requestedItems[i].stockOnHand,
			  pendingPrf:ctrl.prf.requestedItems[i].pendingPrf,
			  pendingPo:ctrl.prf.requestedItems[i].pendingPo,
		  	  pendingRr:ctrl.prf.requestedItems[i].pendingRr
			  });
	  }
	  
  };
  
  ctrl.selectedItems = function() {
	console.log("itemlist" + JSON.stringify(ctrl.itemlist));
    ctrl.prf.requestedItems = ctrl.itemlist.map(i => {
      var item = null;
        item = i.item;

      
      return {
        item: item
      }
    
    });

    ctrl.loadItemDetails();

    console.log('selectedItems {}', ctrl.prf.requestedItems );
  }

  ctrl.loadItemDetails = function() {
	
    for (var i = 0; i < ctrl.prf.requestedItems.length; i++) {
    	(function(i){
    		  var requestedItem = ctrl.prf.requestedItems[i];
    		  InventoryService.getStockQuantityOfItem(requestedItem.item.id, ctrl.prf.company.id).then(function(response){
    	    	  ctrl.prf.requestedItems[i].stockOnHand = response.data;
    	    	  console.log("stock" + ctrl.prf.requestedItems[i].stockOnHand);
    	      });
    	      PurchaseRequestsService.getPrfQuantityOfItem(requestedItem.item.id, ctrl.prf.company.id).then(function(response){
    	    	  ctrl.prf.requestedItems[i].pendingPrf = response.data;
    	    	  console.log("pending" + ctrl.prf.requestedItems[i].pendingPrf);
    	      });
    	      PurchaseOrdersService.getPurchaseOrderQuantity(requestedItem.item.id, ctrl.prf.company.id).then(function(response){
    	    	  ctrl.prf.requestedItems[i].pendingPo = response.data;
    	      });
    	      ReceivingReceiptsService.getQuarantinedQuantityOfItem(requestedItem.item.id, ctrl.prf.company.id).then(function(response){
    	    	  ctrl.prf.requestedItems[i].pendingRr = response.data;
    	      });
    	})(i);
    	
    }
    
  }

  
  ctrl.computeTotalQuantity = function(item, quantity, index){
	  if(ctrl.prf.requestedItems[index].moqQuantity == null || ctrl.prf.requestedItems[index].moqQuantity == ''){
		  ctrl.prf.requestedItems[index].moqQuantity = 1;
	  }
	  
	  if(quantity < ctrl.prf.requestedItems[index].pendingPo + ctrl.prf.requestedItems[index].stockOnHand + ctrl.prf.requestedItems[index].pendingPrf + ctrl.prf.requestedItems[index].pendingRr){
		  ctrl.prf.requestedItems[index].quantityLacking = 0;
		  ctrl.prf.requestedItems[index].quantityRequested = 0;
	  }else{
		  ctrl.prf.requestedItems[index].quantityLacking = quantity - ctrl.prf.requestedItems[index].stockOnHand - ctrl.prf.requestedItems[index].pendingPrf - ctrl.prf.requestedItems[index].pendingPo - ctrl.prf.requestedItems[index].pendingRr;
		  ctrl.prf.requestedItems[index].quantityRequested = ctrl.prf.requestedItems[index].quantityLacking;
	  }

	  if(ctrl.prf.requestedItems[index].quantityRequested % ctrl.prf.requestedItems[index].moqQuantity !== 0){
		  ctrl.prf.requestedItems[index].quantityRequested = ctrl.prf.requestedItems[index].moqQuantity - (ctrl.prf.requestedItems[index].quantityRequested % ctrl.prf.requestedItems[index].moqQuantity) + parseInt(ctrl.prf.requestedItems[index].quantityRequested); 
	  }
	  
};
  
}

angular
  .module('admin.dashboard')
  .controller('PurchaseRequestFormController', PurchaseRequestFormController);
})(window.angular);
(function(angular){
'use strict';
var purchaseRequestNew = {
  templateUrl: './purchase-request-new.html',
  controller: 'PurchaseRequestNewController'
};

angular
  .module('admin.dashboard')
  .component('purchaseRequestNew', purchaseRequestNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('purchase-request-new', {
        parent: 'app',
        url: '/admin/dashboard/purchase-request/new',
        component: 'purchaseRequestNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

PurchaseRequestNewController.$inject = ["$state", "$stateParams", "PurchaseRequestsService", "CompanyService", "DepartmentsService", "PermissionsService"];
function PurchaseRequestNewController($state, $stateParams, PurchaseRequestsService, CompanyService, DepartmentsService, PermissionsService) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    DepartmentsService.get(1).then(function(response){ctrl.prf = {
      requestedBy : ctrl.user,
      company: ctrl.user.company,
      department: response.data
  };});
    
  };

  ctrl.createPurchaseRequest = function (event) {
	console.log("create " + JSON.stringify(event.prf));
    PurchaseRequestsService.save(event.prf).then(function () {
      $state.go('purchase-requests');
    });

  };
}

angular
  .module('admin.dashboard')
  .controller('PurchaseRequestNewController', PurchaseRequestNewController);
})(window.angular);
(function(angular){
'use strict';

var purchaseRequest = {
  templateUrl: './purchase-requests.html',
  controller: 'PurchaseRequestController'
};

angular
  .module('admin.dashboard')
  .component('purchaseRequest', purchaseRequest)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('purchase-requests', {
        parent: 'app',
        url: '/admin/dashboard/purchase-request',
        component: 'purchaseRequest'
      });
  }]);})(window.angular);
(function(angular){
'use strict';
PurchaseRequestController.$inject = ["$state", "PurchaseRequestsService", "$rootScope", "$location", "_"];
function PurchaseRequestController(
  $state,
  PurchaseRequestsService,
  $rootScope,
  $location,
  _
) {
  var ctrl = this;
  ctrl.purchaseRequests = [];

  ctrl.sortType = 'date';
  ctrl.sortReverse = false;

  ctrl.$onInit = function () {
    ctrl.addPurchaseRequest = false;
    ctrl.error = null;
    if (window.location.href.includes('?eng=1')) {
      loadEngineeringPurchaseRequests();
    } else {
      loadPurchaseRequests();
    }
  };

  function loadEngineeringPurchaseRequests() {
    ctrl.company = $rootScope.selectedCompany;
    PurchaseRequestsService.listByCompanyAndDepartment(
      ctrl.company.id,
      'Engineering'
    ).then(function (response) {
      ctrl.purchaseRequests = response.data;
    });
  }
  function loadPurchaseRequests() {
    ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
    ctrl.company = $rootScope.selectedCompany;
    PurchaseRequestsService.listByCompany(ctrl.company.id).then(function (
      response
    ) {
      console.log('list response: {}', response.data);
      ctrl.purchaseRequests = response.data;
    });
  }

  ctrl.searchPrf = function (event) {
    console.log('test');
    ctrl.prfTable.DataTable.search(event).draw();
  };

  ctrl.createNewPurchaseRequest = function (event) {
    console.log('createNewPurchaseRequest');
    if (window.location.href.includes('?eng=1')) {
      console.log('department eng');
      $state.go('purchase-request-eng');
    } else {
      $state.go('purchase-request-new');
    }
  };

  ctrl.openModal = function (purchaseRequest) {
    console.log('show modal' + ctrl.showModal);
    ctrl.prf = purchaseRequest;
    PurchaseRequestsService.getLatestCancelledReqs(ctrl.prf.id).then(function (
      response
    ) {
      ctrl.cancelreqs = response.data;
      console.log('req items length' + ctrl.prf.requestedItems.length);
      console.log('cancel items length' + ctrl.cancelreqs.length);
      for (var i = 0; i < ctrl.prf.requestedItems.length; i++) {
        for (var j = 0; j < ctrl.cancelreqs.length; j++) {
          if (
            ctrl.prf.requestedItems[i].id == ctrl.cancelreqs[j].requestedItem.id
          ) {
            console.log('hi' + ctrl.cancelreqs);
            ctrl.prf.requestedItems[i].cancelReq = ctrl.cancelreqs[j];
          }
        }
      }
    });

    console.log('purchaseRequest' + JSON.stringify(ctrl.prf));

    $('#prfInfoModal').modal('show');
  };

  ctrl.edit = function (prf) {
    $state.go('purchase-request-edit', { prfId: prf.id });
  };
  /*
  ctrl.showAddPurchaseRequest = function (show){
	  ctrl.addPurchaseRequest = show;
  };
  
  
  
  ctrl.savePurchaseRequest = function (event) {
	    PurchaseRequestsService.save(event.purchaserequest).then(function () {
	    	  loadPurchaseRequests();
	    	  ctrl.showAddPurchaseRequest(false);
	    	  ctrl.purchaserequest = null;
	    });
  };
  */

  ctrl.deletePurchaseRequest = function (id) {
    PurchaseRequestsService.delete(id).then(function (response) {
      loadPurchaseRequests();
    });
  };
}

angular
  .module('admin.dashboard')
  .controller('PurchaseRequestController', PurchaseRequestController);
})(window.angular);
(function(angular){
'use strict';
var receivingReceiptForm = {
  bindings: {
    rr: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './receiving-receipt-form.html',
  controller: 'ReceivingReceiptFormController'
};

angular
  .module('admin.dashboard')
  .component('receivingReceiptForm', receivingReceiptForm);
})(window.angular);
(function(angular){
'use strict';

ReceivingReceiptFormController.$inject = ["$state", "ReceivingReceiptsService"];
function ReceivingReceiptFormController($state, ReceivingReceiptsService) {
  var ctrl = this;
  
  ctrl.$onInit = function (){
	ctrl.rr.receivedItems = [];  
	ctrl.receivedItemsView = [];
  };
  
  ctrl.$onChanges = function (changes) {
    if (changes.rr) {
      ctrl.rr = angular.copy(ctrl.rr);
    }
  };

  ctrl.loadReceivedItems = function (receivedItem, index){
	  receivedItem.item = ctrl.rr.purchaseOrder.purchaseRequests[index].item;
	  receivedItem.unit = ctrl.rr.purchaseOrder.purchaseRequests[index].packSize;
	  
  };
  
  ctrl.submitForm = function () {
  	console.log("RECEIVED ITEMS" + JSON.stringify(ctrl.rr.receivedItems));
    console.log('submitForm: ' + JSON.stringify(ctrl.rr));
    ctrl.onSubmit({
      $event: {
    	  rr: ctrl.rr
      }
    });
  };
  
}

angular
  .module('admin.dashboard')
  .controller('ReceivingReceiptFormController', ReceivingReceiptFormController);
})(window.angular);
(function(angular){
'use strict';
var receivingReceiptNew = {
  templateUrl: './receiving-receipt-new.html',
  controller: 'ReceivingReceiptNewController'
};

angular
  .module('admin.dashboard')
  .component('receivingReceiptNew', receivingReceiptNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('receiving-receipt-new', {
        parent: 'app',
        url: '/admin/dashboard/receiving-receipt/new',
        component: 'receivingReceiptNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

ReceivingReceiptNewController.$inject = ["$state", "ReceivingReceiptsService", "$rootScope"];
function ReceivingReceiptNewController($state, ReceivingReceiptsService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    ctrl.rr = {
    		company: $rootScope.selectedCompany,
    		receivedBy: ctrl.user
    };
  };

  ctrl.createReceivingReceipt = function (event) {
    ReceivingReceiptsService.save(event.rr).then(function (response) {
    	  console.log("create " + JSON.stringify(response.data));
      $state.go('receiving-receipts');
    });

  };
}

angular
  .module('admin.dashboard')
  .controller('ReceivingReceiptNewController', ReceivingReceiptNewController);
})(window.angular);
(function(angular){
'use strict';

var receivingReceipt = {
  templateUrl: './receiving-receipts.html',
  controller: 'ReceivingReceiptController'
};

angular
  .module('admin.dashboard')
  .component('receivingReceipt', receivingReceipt)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('receiving-receipts', {
        parent: 'app',
        url: '/admin/dashboard/receiving-receipt',
        component: 'receivingReceipt'
      });
  }]);})(window.angular);
(function(angular){
'use strict';
ReceivingReceiptController.$inject = ["$state", "ReceivingReceiptsService", "$rootScope", "_"];
function ReceivingReceiptController(
  $state,
  ReceivingReceiptsService,
  $rootScope,
  _
) {
  var ctrl = this;
  ctrl.receivingReceipts = [];

  ctrl.searchNumber = '';
  ctrl.searchDate = '';
  ctrl.searchReferenceNo = '';
  ctrl.sortType = 'date';
  ctrl.sortReverse = false;

  ctrl.$onInit = function() {
    ctrl.addReceivingReceipt = false;
    ctrl.error = null;
    loadReceivingReceipts();
    ctrl.status = 'Pending';
  };

  function loadReceivingReceipts() {
    ctrl.user = JSON.parse(window.localStorage.getItem('currentUser'));
    ctrl.company = $rootScope.selectedCompany;
    ReceivingReceiptsService.listByCompanyByStatus(
      ctrl.company.id,
      'Pending'
    ).then(function(response) {
      console.log('list response: ' + JSON.stringify(response.data));
      ctrl.receivingReceipts = response.data;
    });
  }

  ctrl.createNewReceivingReceipt = function(event) {
    console.log('createNewReceivingReceipt');
    $state.go('receiving-receipt-new');
  };

  ctrl.createNewReceivingReceiptTolling = function(event) {
    console.log('createNewReceivingReceipt');
    $state.go('receiving-receipt-tolling-new');
  };

  ctrl.openModal = function(receivingReceipt) {
    console.log('show modal' + ctrl.showModal);
    console.log('receivingReceipt' + JSON.stringify(receivingReceipt));
    ctrl.rr = receivingReceipt;
  };

  ctrl.listByStatus = function(status) {
    ctrl.company = $rootScope.selectedCompany;
    ReceivingReceiptsService.listByCompanyByStatus(
      ctrl.company.id,
      status
    ).then(function(response) {
      ctrl.receivingReceipts = response.data;
      ctrl.status = status;
    });
  };

  ctrl.editReceivingReceipt = function(id) {
    $state.go('receiving-receipt-edit', { receivingReceiptId: id });
  };
  /*
  ctrl.showAddReceivingReceipt = function (show){
	  ctrl.addReceivingReceipt = show;
  };
  
  
  
  ctrl.saveReceivingReceipt = function (event) {
	    ReceivingReceiptsService.save(event.purchaserequest).then(function () {
	    	  loadReceivingReceipts();
	    	  ctrl.showAddReceivingReceipt(false);
	    	  ctrl.purchaserequest = null;
	    });
  };
  */

  ctrl.deleteReceivingReceipt = function(id) {
    ReceivingReceiptsService.delete(id).then(function(response) {
      loadReceivingReceipts();
    });
  };
}

angular
  .module('admin.dashboard')
  .controller('ReceivingReceiptController', ReceivingReceiptController);
})(window.angular);
(function(angular){
'use strict';
var receivingReceiptTollingForm = {
  bindings: {
    rr: '=',
    button: '@',
    message: '@',
    onSubmit: '&'
  },
  templateUrl: './receiving-receipt-tolling-form.html',
  controller: 'ReceivingReceiptTollingFormController'
};

angular
  .module('admin.dashboard')
  .component('receivingReceiptTollingForm', receivingReceiptTollingForm);
})(window.angular);
(function(angular){
'use strict';

ReceivingReceiptTollingFormController.$inject = ["$state", "ReceivingReceiptsService", "UnitsService", "ItemsService"];
function ReceivingReceiptTollingFormController($state, ReceivingReceiptsService, UnitsService, ItemsService) {
  var ctrl = this;


  
  ctrl.$onInit = function (){
    console.log('onInit', ctrl.rr);
    ctrl.rr.receivedItems = [];  
    UnitsService.list().then((res) => {
      ctrl.units = res.data;
    });

    ItemsService.list().then((res) => {
      ctrl.items = res.data;
    });
  };
  
  ctrl.$onChanges = function (changes) {
    if (changes.rr) {
      ctrl.rr = angular.copy(ctrl.rr);
    }
  };

  ctrl.addItemHere = function() {
    console.log('addItem');
    ctrl.rr.receivedItems.push({unit: {code: null, name: null}, item: {code: null, name: null}});
  };

  ctrl.loadReceivedItems = function (receivedItem, index){
	  receivedItem.item = ctrl.rr.purchaseOrder.purchaseRequests[index].item;
	  receivedItem.unit = ctrl.rr.purchaseOrder.purchaseRequests[index].packSize;
  };

  ctrl.removeItem = function (index) {
    ctrl.rr.receivedItems.splice(index, 1);
  }
  
  ctrl.submitForm = function () {
  	console.log("RECEIVED ITEMS" + JSON.stringify(ctrl.rr.receivedItems));
    console.log('submitForm: ' + JSON.stringify(ctrl.rr));
    ctrl.onSubmit({
      $event: {
    	  rr: ctrl.rr
      }
    });
  };
  
}

angular
  .module('admin.dashboard')
  .controller('ReceivingReceiptTollingFormController', ReceivingReceiptTollingFormController);
})(window.angular);
(function(angular){
'use strict';
var receivingReceiptTollingNew = {
  templateUrl: './receiving-receipt-tolling-new.html',
  controller: 'ReceivingReceiptTollingNewController'
};

angular
  .module('admin.dashboard')
  .component('receivingReceiptTollingNew', receivingReceiptTollingNew)
  .config(["$stateProvider", function ($stateProvider) {
    $stateProvider
      .state('receiving-receipt-tolling-new', {
        parent: 'app',
        url: '/admin/dashboard/receiving-receipt-tolling/new',
        component: 'receivingReceiptTollingNew'
      });
  }]);
})(window.angular);
(function(angular){
'use strict';

ReceivingReceiptTollingNewController.$inject = ["$state", "ReceivingReceiptsService", "$rootScope"];
function ReceivingReceiptTollingNewController($state, ReceivingReceiptsService, $rootScope) {
  var ctrl = this;
  
  ctrl.$onInit = function () {
    ctrl.error = null;
    ctrl.user = JSON.parse(window.localStorage.getItem("currentUser"));
    ctrl.rr = {
    		company: $rootScope.selectedCompany,
        receivedBy: ctrl.user,
        tolling: true
    };
  };

  ctrl.createReceivingReceipt = function (event) {
    ReceivingReceiptsService.save(event.rr).then(function (response) {
    	  console.log("create " + JSON.stringify(response.data));
      $state.go('receiving-receipts');
    });

  };
}

angular
  .module('admin.dashboard')
  .controller('ReceivingReceiptTollingNewController', ReceivingReceiptTollingNewController);
})(window.angular);
(function(angular){
'use strict';
var findApprovedItemModal = {
	bindings : {
		approvedreceipt : '=',
		purchaserequest: '=',
		button : '@',
		message : '@'
	},
	templateUrl : './find-approved-item-modal.html',
	controller : 'FindApprovedItemModalController'
};

angular.module('admin.shared').component('findApprovedItemModal', findApprovedItemModal);})(window.angular);
(function(angular){
'use strict';

FindApprovedItemModalController.$inject = ["$state", "ApprovedReceiptsService", "PurchaseRequestsService", "$rootScope"];
function FindApprovedItemModalController($state, ApprovedReceiptsService, PurchaseRequestsService, $rootScope) {
  var ctrl = this;
  ctrl.approvedItems = [];
	

  ctrl.sortType = 'controlNumber';
	ctrl.sortReverse = false;
	
  ctrl.$onInit = function(){
	loadApprovedItems();
  };
  
  
  function loadApprovedItems(){
	  ctrl.company = $rootScope.selectedCompany;
	  ApprovedReceiptsService.listByCompany(ctrl.company.id).then(function(response){
		  ctrl.approvedItems = response.data;
		  console.log("response" + JSON.stringify(ctrl.approvedItems));
	  });
  }
  
  
  ctrl.getApprovedItem = function(approvedItem){
	ctrl.approvedreceipt = approvedItem; 
  };
}

angular
  .module('admin.shared')
  .controller('FindApprovedItemModalController', FindApprovedItemModalController);
})(window.angular);
(function(angular){
'use strict';
angular.module('templates', []).run(['$templateCache', function($templateCache) {$templateCache.put('./root.html','<div ui-view></div>');
$templateCache.put('./accounting.html','<div class="admin-header"><div class="title horizontal-align -between"><h4 class="bg">ACCOUNTING</h4><div class="action-link"><a href="#">Reports</a></div></div><hr class="devider"></div><div class="mmd-content"><company-nav></company-nav><a ng-if="$ctrl.checkPermission(\'superadmin\')" href="/admin/accounting/purchase-voucher"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Purchase Vouchers</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/accounting/journal-voucher"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Journal Vouchers</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/accounting/vouchers-payable"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Vouchers Payables</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/accounting/account-title"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Account Titles</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/accounting/cheque-printing"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Cheque Printings</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/accounting/cheque-disbursement"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Cheque Disbursement Vouchers</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/accounting/credit-memo"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Credit Memos</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/accounting/debit-memo"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Debit Memos</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/accounting/cash-receipt-voucher"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Cash Receipt Vouchers</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/accounting/pdc-disbursement"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">PDC Disbursements</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/accounting/pdc-voucher"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">PDC Vouchers</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/sales/sales-journal-voucher"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Sales Journal Vouchers</span></i></div></a><div class="clear-float"></div></div><!--<div class="accounting-content">--><!--<div class="admin-header">--><!--<div class="title">--><!--<h4 class="md">Dashboard</h4>--><!--</div>--><!--</div>--><!--<div class="action-link">--><!--<a data-target="#departmentCodeModal" data-toggle="modal" class="link" href="#">Department &amp; Area Code</a>--><!--</div>--><!--<div class="action-link">--><!--<a data-target="#findVendorModal" data-toggle="modal" class="link" href="#">Find Vendor</a>--><!--</div>--><!--<div class="action-link">--><!--<a data-target="#findClientModal" data-toggle="modal" class="link" href="#">Find Client</a>--><!--</div>--><!--<div class="action-link">--><!--<a data-target="#findGroupAndCategoriesModal" data-toggle="modal" class="link" href="#">Groups &amp; Categories</a>--><!--</div>--><!--</div>--><!--<div class="modal fade" id="departmentCodeModal">--><!--<div class="modal-dialog -bg">--><!--<div class="modal-content">--><!--<div class="modal-header">--><!--<h4 class="modal-title">Department &amp; Area Code</h4>--><!--<button class="close" data-dismiss="modal" type="button">--><!--<span class="ion-android-close close-modal"></span>--><!--</button>--><!--</div>--><!--<div class="modal-body">--><!--<div class="horizontal-align -between">--><!--<div class="section department-area -left">--><!--<div class="horizontal-align -start header">--><!--<p class="caption">Departments</p>--><!--<div class="action-link bold-link">--><!--<a class="link" href="#">+ Add</a>--><!--</div>--><!--</div>--><!--<div class="wrapper scroll-section">--><!--<p class="department-list horizontal-align -between">--><!--<span class="code">CA-AHOL</span>--><!--<span class="dept">Accounting Holdings</span>--><!--<span class="ion-android-close delete"></span>--><!--</p>--><!--<p class="department-list horizontal-align -between">--><!--<span class="code">CA-AHOL</span>--><!--<span class="dept">Accounting Holdings</span>--><!--<span class="ion-android-close delete"></span>--><!--</p>--><!--<p class="department-list horizontal-align -between">--><!--<span class="code">CA-AHOL</span>--><!--<span class="dept">Accounting Holdings</span>--><!--<span class="ion-android-close delete"></span>--><!--</p>--><!--<p class="department-list horizontal-align -between">--><!--<span class="code">CA-AHOL</span>--><!--<span class="dept">Accounting Holdings</span>--><!--<span class="ion-android-close delete"></span>--><!--</p>--><!--</div>--><!--</div>--><!--<div class="section department-area -left">--><!--<div class="horizontal-align -start header">--><!--<p class="caption">Area Code</p>--><!--<div class="action-link bold-link">--><!--<a class="link" href="#">+ Add</a>--><!--</div>--><!--</div>--><!--<div class="wrapper scroll-section">--><!--<p class="department-list horizontal-align -between">--><!--<span class="code">033</span>--><!--<span class="dept">Quezon City</span>--><!--<span class="ion-android-close delete"></span>--><!--</p>--><!--<p class="department-list horizontal-align -between">--><!--<span class="code">044</span>--><!--<span class="dept">Cebu</span>--><!--<span class="ion-android-close delete"></span>--><!--</p>--><!--<p class="department-list horizontal-align -between">--><!--<span class="code">055</span>--><!--<span class="dept">Bulacan</span>--><!--<span class="ion-android-close delete"></span>--><!--</p>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--<div class="modal fade" id="findVendorModal">--><!--<div class="modal-dialog -bg">--><!--<div class="modal-content">--><!--<div class="modal-header">--><!--<h4 class="modal-title">--><!--Find Vendor--><!--<a class="button-link btn btn-create btn-sm float-lg-right" href="#">+ Add Vendor</a>--><!--</h4>--><!--<button class="close" data-dismiss="modal" type="button">--><!--<span class="ion-android-close close-modal"></span>--><!--</button>--><!--</div>--><!--<div class="modal-body">--><!--<div class="searchbox-modal">--><!--<div class="searchbox-content">--><!--<form action="/admin/accounting" accept-charset="UTF-8" data-remote="true" method="post"><input name="utf8" type="hidden" value="\u2713"><input type="hidden" name="authenticity_token" value="edMWCmgwo1u+dK9VTCWnBNMaDxrv8skefxqMlkkXSEVDtfqpuX9YCPBOsbrPdkCH7EpcCZecvSzuWRjbgDPJrQ=="><div class="search-modal horizontal-align -between">--><!--<input class="form-control -borderless search" placeholder="code, name, description" type="text" name="search">--><!--<div class="modal-action">--><!--<input type="submit" name="commit" value="Search Item" class="btn btn-action btn-md" data-disable-with="Search Item">--><!--</div>--><!--</div>--><!--</form></div>--><!--</div>--><!--<div class="wrapper scroll-section">--><!--<table class="table table-list">--><!--<thead>--><!--<tr>--><!--<th>Code</th>--><!--<th>Vendor Description</th>--><!--<th>T.I.N No.</th>--><!--<th></th>--><!--</tr>--><!--</thead>--><!--<tbody>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--</tbody>--><!--</table>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--<div class="modal fade" id="findClientModal">--><!--<div class="modal-dialog -bg">--><!--<div class="modal-content">--><!--<div class="modal-header">--><!--<h4 class="modal-title">--><!--Find Client--><!--<a class="button-link btn btn-create btn-sm float-lg-right" href="#">+ Add Client</a>--><!--</h4>--><!--<button class="close" data-dismiss="modal" type="button">--><!--<span class="ion-android-close close-modal"></span>--><!--</button>--><!--</div>--><!--<div class="modal-body">--><!--<div class="searchbox-modal">--><!--<div class="searchbox-content">--><!--<form action="/admin/accounting" accept-charset="UTF-8" data-remote="true" method="post"><input name="utf8" type="hidden" value="\u2713"><input type="hidden" name="authenticity_token" value="SL26hNGK3mMCGVEcQjOKGDGDeQ9/eniHnp4mtRpVb2xy21YnAMUlMEwjT/PBYG2bDtMqHAcUDLUP3bL403HuhA=="><div class="search-modal horizontal-align -between">--><!--<input class="form-control -borderless search" placeholder="code, name, description" type="text" name="search">--><!--<div class="modal-action">--><!--<input type="submit" name="commit" value="Search Item" class="btn btn-action btn-md" data-disable-with="Search Item">--><!--</div>--><!--</div>--><!--</form></div>--><!--</div>--><!--<div class="wrapper scroll-section">--><!--<table class="table find-vendor">--><!--<thead>--><!--<tr>--><!--<th>Code</th>--><!--<th>Vendor Description</th>--><!--<th>T.I.N No.</th>--><!--<th></th>--><!--</tr>--><!--</thead>--><!--<tbody>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--</tbody>--><!--</table>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--<div class="modal fade" id="findGroupAndCategoriesModal">--><!--<div class="modal-dialog -bg">--><!--<div class="modal-content">--><!--<div class="modal-header">--><!--<h4 class="modal-title">Groups &amp; Categories</h4>--><!--<button class="close" data-dismiss="modal" type="button">--><!--<span class="ion-android-close close-modal"></span>--><!--</button>--><!--</div>--><!--<div class="modal-body">--><!--<div class="horizontal-align -between">--><!--<div class="groups-section">--><!--<div class="horizontal-align -between">--><!--<p>Groups</p>--><!--<div class="action-link bold-link">--><!--<a class="link" href="#">+ Add</a>--><!--</div>--><!--</div>--><!--<ul class="groups-list">--><!--<li class="-active">Miscellaneous</li>--><!--<li>Office Supplies</li>--><!--<li>Project</li>--><!--</ul>--><!--</div>--><!--<div class="categories-section">--><!--<div class="horizontal-align -between">--><!--<p>Categories</p>--><!--<div class="action-link bold-link">--><!--<a class="link" href="#">+ Add</a>--><!--</div>--><!--</div>--><!--<div class="categories scroll-section">--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--&lt;!&ndash;--><!--.action-link--><!--= link_to \'Department & Area Code\', \'#\', { data: { target: \'#departmentCodeModal\', toggle: :modal }, class: \'link\' }--><!--.action-link--><!--= link_to \'Find Vendor\', \'#\', { data: { target: \'#findVendorModal\', toggle: :modal }, class: \'link\' }--><!--.action-link--><!--= link_to \'Find Client\', \'#\', { data: { target: \'#findClientModal\', toggle: :modal }, class: \'link\' }--><!--.action-link--><!--= link_to \'Groups & Categories\', \'#\', { data: { target: \'#findGroupAndCategoriesModal\', toggle: :modal }, class: \'link\' }--><!--= render \'admin/accountings/department_and_area_code\'--><!--= render \'admin/accountings/find_vendor\'--><!--= render \'admin/accountings/find_client\'--><!--= render \'admin/accountings/groups_and_categories\' &ndash;&gt;-->');
$templateCache.put('./maintenance.html','<div class="admin-header"><div class="title horizontal-align -between"><h4 class="bg">MAINTENANCE</h4><div class="action-link"><a href="#">Reports</a></div></div><hr class="devider"></div><div class="mmd-content"><company-nav></company-nav><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'rnd-finished-good\')" href="/admin/maintenance/finished-good"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Finished Goods</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\')" href="/admin/maintenance/client-information"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Client</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\')" href="/admin/maintenance/vendor"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Vendor/Payee</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\')" href="/admin/maintenance/classification"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Classification</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'admin-gc\')" href="/admin/maintenance/group-and-category"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Group & Categories</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'admin-dac\')" href="/admin/maintenance/department-and-area"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Department Area & Codes</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'rnd-items\')" href="/admin/maintenance/item"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Items</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'rnd-items\')" href="/admin/maintenance/unit"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Units</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'rnd-item-types\')" href="/admin/maintenance/item-type"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Item Types</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/maintenance/depots"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Depots</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/maintenance/products"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Products</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/maintenance/procedure"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Procedure</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/maintenance/procedure-area"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Production Area</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/maintenance/memo-type"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Memo Types</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/maintenance/bank-account"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Bank Accounts</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/maintenance/product-division-code"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Product Divisions</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/maintenance/region-code"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Region Codes</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/maintenance/cluster-code"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Cluster Codes</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/maintenance/institutional-code"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Institutional Codes</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/maintenance/account-code"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Account Codes</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/maintenance/province-code"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Province Codes</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/maintenance/sales-rep"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Sales Reps</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/maintenance/zip-code"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Zip Codes</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/maintenance/product-category"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Product Categories</span></i></div></a><div class="clear-float"></div></div><!--<div class="sales-content">--><!--<div class="admin-header">--><!--<div class="title">--><!--<h4 class="md">maintenance</h4>--><!--</div>--><!--</div>--><!--<div class="action-link">--><!--<a data-target="#departmentCodeModal" data-toggle="modal" class="link" href="#">Department &amp; Area Code</a>--><!--</div>--><!--<div class="action-link">--><!--<a data-target="#findVendorModal" data-toggle="modal" class="link" href="#">Find Vendor</a>--><!--</div>--><!--<div class="action-link">--><!--<a data-target="#findClientModal" data-toggle="modal" class="link" href="#">Find Client</a>--><!--</div>--><!--<div class="action-link">--><!--<a data-target="#findGroupAndCategoriesModal" data-toggle="modal" class="link" href="#">Groups &amp; Categories</a>--><!--</div>--><!--</div>--><!--<div class="modal fade" id="departmentCodeModal">--><!--<div class="modal-dialog -bg">--><!--<div class="modal-content">--><!--<div class="modal-header">--><!--<h4 class="modal-title">Department &amp; Area Code</h4>--><!--<button class="close" data-dismiss="modal" type="button">--><!--<span class="ion-android-close close-modal"></span>--><!--</button>--><!--</div>--><!--<div class="modal-body">--><!--<div class="horizontal-align -between">--><!--<div class="section department-area -left">--><!--<div class="horizontal-align -start header">--><!--<p class="caption">Departments</p>--><!--<div class="action-link bold-link">--><!--<a class="link" href="#">+ Add</a>--><!--</div>--><!--</div>--><!--<div class="wrapper scroll-section">--><!--<p class="department-list horizontal-align -between">--><!--<span class="code">CA-AHOL</span>--><!--<span class="dept">Accounting Holdings</span>--><!--<span class="ion-android-close delete"></span>--><!--</p>--><!--<p class="department-list horizontal-align -between">--><!--<span class="code">CA-AHOL</span>--><!--<span class="dept">Accounting Holdings</span>--><!--<span class="ion-android-close delete"></span>--><!--</p>--><!--<p class="department-list horizontal-align -between">--><!--<span class="code">CA-AHOL</span>--><!--<span class="dept">Accounting Holdings</span>--><!--<span class="ion-android-close delete"></span>--><!--</p>--><!--<p class="department-list horizontal-align -between">--><!--<span class="code">CA-AHOL</span>--><!--<span class="dept">Accounting Holdings</span>--><!--<span class="ion-android-close delete"></span>--><!--</p>--><!--</div>--><!--</div>--><!--<div class="section department-area -left">--><!--<div class="horizontal-align -start header">--><!--<p class="caption">Area Code</p>--><!--<div class="action-link bold-link">--><!--<a class="link" href="#">+ Add</a>--><!--</div>--><!--</div>--><!--<div class="wrapper scroll-section">--><!--<p class="department-list horizontal-align -between">--><!--<span class="code">033</span>--><!--<span class="dept">Quezon City</span>--><!--<span class="ion-android-close delete"></span>--><!--</p>--><!--<p class="department-list horizontal-align -between">--><!--<span class="code">044</span>--><!--<span class="dept">Cebu</span>--><!--<span class="ion-android-close delete"></span>--><!--</p>--><!--<p class="department-list horizontal-align -between">--><!--<span class="code">055</span>--><!--<span class="dept">Bulacan</span>--><!--<span class="ion-android-close delete"></span>--><!--</p>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--<div class="modal fade" id="findVendorModal">--><!--<div class="modal-dialog -bg">--><!--<div class="modal-content">--><!--<div class="modal-header">--><!--<h4 class="modal-title">--><!--Find Vendor--><!--<a class="button-link btn btn-create btn-sm float-lg-right" href="#">+ Add Vendor</a>--><!--</h4>--><!--<button class="close" data-dismiss="modal" type="button">--><!--<span class="ion-android-close close-modal"></span>--><!--</button>--><!--</div>--><!--<div class="modal-body">--><!--<div class="searchbox-modal">--><!--<div class="searchbox-content">--><!--<form action="/admin/sales" accept-charset="UTF-8" data-remote="true" method="post"><input name="utf8" type="hidden" value="\u2713"><input type="hidden" name="authenticity_token" value="edMWCmgwo1u+dK9VTCWnBNMaDxrv8skefxqMlkkXSEVDtfqpuX9YCPBOsbrPdkCH7EpcCZecvSzuWRjbgDPJrQ=="><div class="search-modal horizontal-align -between">--><!--<input class="form-control -borderless search" placeholder="code, name, description" type="text" name="search">--><!--<div class="modal-action">--><!--<input type="submit" name="commit" value="Search Item" class="btn btn-action btn-md" data-disable-with="Search Item">--><!--</div>--><!--</div>--><!--</form></div>--><!--</div>--><!--<div class="wrapper scroll-section">--><!--<table class="table table-list">--><!--<thead>--><!--<tr>--><!--<th>Code</th>--><!--<th>Vendor Description</th>--><!--<th>T.I.N No.</th>--><!--<th></th>--><!--</tr>--><!--</thead>--><!--<tbody>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--</tbody>--><!--</table>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--<div class="modal fade" id="findClientModal">--><!--<div class="modal-dialog -bg">--><!--<div class="modal-content">--><!--<div class="modal-header">--><!--<h4 class="modal-title">--><!--Find Client--><!--<a class="button-link btn btn-create btn-sm float-lg-right" href="#">+ Add Client</a>--><!--</h4>--><!--<button class="close" data-dismiss="modal" type="button">--><!--<span class="ion-android-close close-modal"></span>--><!--</button>--><!--</div>--><!--<div class="modal-body">--><!--<div class="searchbox-modal">--><!--<div class="searchbox-content">--><!--<form action="/admin/sales" accept-charset="UTF-8" data-remote="true" method="post"><input name="utf8" type="hidden" value="\u2713"><input type="hidden" name="authenticity_token" value="SL26hNGK3mMCGVEcQjOKGDGDeQ9/eniHnp4mtRpVb2xy21YnAMUlMEwjT/PBYG2bDtMqHAcUDLUP3bL403HuhA=="><div class="search-modal horizontal-align -between">--><!--<input class="form-control -borderless search" placeholder="code, name, description" type="text" name="search">--><!--<div class="modal-action">--><!--<input type="submit" name="commit" value="Search Item" class="btn btn-action btn-md" data-disable-with="Search Item">--><!--</div>--><!--</div>--><!--</form></div>--><!--</div>--><!--<div class="wrapper scroll-section">--><!--<table class="table find-vendor">--><!--<thead>--><!--<tr>--><!--<th>Code</th>--><!--<th>Vendor Description</th>--><!--<th>T.I.N No.</th>--><!--<th></th>--><!--</tr>--><!--</thead>--><!--<tbody>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--</tbody>--><!--</table>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--<div class="modal fade" id="findGroupAndCategoriesModal">--><!--<div class="modal-dialog -bg">--><!--<div class="modal-content">--><!--<div class="modal-header">--><!--<h4 class="modal-title">Groups &amp; Categories</h4>--><!--<button class="close" data-dismiss="modal" type="button">--><!--<span class="ion-android-close close-modal"></span>--><!--</button>--><!--</div>--><!--<div class="modal-body">--><!--<div class="horizontal-align -between">--><!--<div class="groups-section">--><!--<div class="horizontal-align -between">--><!--<p>Groups</p>--><!--<div class="action-link bold-link">--><!--<a class="link" href="#">+ Add</a>--><!--</div>--><!--</div>--><!--<ul class="groups-list">--><!--<li class="-active">Miscellaneous</li>--><!--<li>Office Supplies</li>--><!--<li>Project</li>--><!--</ul>--><!--</div>--><!--<div class="categories-section">--><!--<div class="horizontal-align -between">--><!--<p>Categories</p>--><!--<div class="action-link bold-link">--><!--<a class="link" href="#">+ Add</a>--><!--</div>--><!--</div>--><!--<div class="categories scroll-section">--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--&lt;!&ndash;--><!--.action-link--><!--= link_to \'Department & Area Code\', \'#\', { data: { target: \'#departmentCodeModal\', toggle: :modal }, class: \'link\' }--><!--.action-link--><!--= link_to \'Find Vendor\', \'#\', { data: { target: \'#findVendorModal\', toggle: :modal }, class: \'link\' }--><!--.action-link--><!--= link_to \'Find Client\', \'#\', { data: { target: \'#findClientModal\', toggle: :modal }, class: \'link\' }--><!--.action-link--><!--= link_to \'Groups & Categories\', \'#\', { data: { target: \'#findGroupAndCategoriesModal\', toggle: :modal }, class: \'link\' }--><!--= render \'admin/saless/department_and_area_code\'--><!--= render \'admin/saless/find_vendor\'--><!--= render \'admin/saless/find_client\'--><!--= render \'admin/saless/groups_and_categories\' &ndash;&gt;-->');
$templateCache.put('./dashboard.html','<div class="admin-header"><div class="title horizontal-align -between"><h4 class="bg">DASHBOARD</h4><div class="action-link"><a href="#">Reports</a></div></div><hr class="devider"></div><div class="mmd-content"><company-nav></company-nav><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-pr\')" href="/admin/dashboard/purchase-request"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Purchase Requests RM/PM</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-pr\')" href="/admin/dashboard/purchase-request?eng=1"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Purchase Requests Non-RM/PM</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-rr\')" href="/admin/dashboard/receiving-receipt"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Receiving Receipts</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-ar\')" href="/admin/dashboard/approved-receipt"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Approved Receipts</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/dashboard/material-reevaluation"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Material Reevaluations</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/dashboard/inventory"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Inventory</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/dashboard/material-issuance"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Material Issuance Slips</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/dashboard/material-receiving"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Material Receiving Slips</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/dashboard/inventory-movements"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Inventory Movement Slips</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/dashboard/product-movements"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Product Movements</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/dashboard/product-inventory"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Product Inventory</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/dashboard/product-issuances"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">FG-IS</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/dashboard/product-receivings"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">FG-RS</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/dashboard/depot-inventory"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Depot Inventory</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/dashboard/employee"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Employee</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/dashboard/job-order"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Job Order</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/dashboard/engineering-items"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Engineering Items</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/dashboard/engineering-inventory"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Engineering Inventory</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/dashboard/account-summary-report"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Account Summary Reports</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/dashboard/sales-reports"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Sales Reports</span></i></div></a><div class="clear-float"></div></div><!--<div class="dashboard-content">--><!--<div class="admin-header">--><!--<div class="title">--><!--<h4 class="md">Dashboard</h4>--><!--</div>--><!--</div>--><!--<div class="action-link">--><!--<a data-target="#departmentCodeModal" data-toggle="modal" class="link" href="#">Department &amp; Area Code</a>--><!--</div>--><!--<div class="action-link">--><!--<a data-target="#findVendorModal" data-toggle="modal" class="link" href="#">Find Vendor</a>--><!--</div>--><!--<div class="action-link">--><!--<a data-target="#findClientModal" data-toggle="modal" class="link" href="#">Find Client</a>--><!--</div>--><!--<div class="action-link">--><!--<a data-target="#findGroupAndCategoriesModal" data-toggle="modal" class="link" href="#">Groups &amp; Categories</a>--><!--</div>--><!--</div>--><!--<div class="modal fade" id="departmentCodeModal">--><!--<div class="modal-dialog -bg">--><!--<div class="modal-content">--><!--<div class="modal-header">--><!--<h4 class="modal-title">Department &amp; Area Code</h4>--><!--<button class="close" data-dismiss="modal" type="button">--><!--<span class="ion-android-close close-modal"></span>--><!--</button>--><!--</div>--><!--<div class="modal-body">--><!--<div class="horizontal-align -between">--><!--<div class="section department-area -left">--><!--<div class="horizontal-align -start header">--><!--<p class="caption">Departments</p>--><!--<div class="action-link bold-link">--><!--<a class="link" href="#">+ Add</a>--><!--</div>--><!--</div>--><!--<div class="wrapper scroll-section">--><!--<p class="department-list horizontal-align -between">--><!--<span class="code">CA-AHOL</span>--><!--<span class="dept">Accounting Holdings</span>--><!--<span class="ion-android-close delete"></span>--><!--</p>--><!--<p class="department-list horizontal-align -between">--><!--<span class="code">CA-AHOL</span>--><!--<span class="dept">Accounting Holdings</span>--><!--<span class="ion-android-close delete"></span>--><!--</p>--><!--<p class="department-list horizontal-align -between">--><!--<span class="code">CA-AHOL</span>--><!--<span class="dept">Accounting Holdings</span>--><!--<span class="ion-android-close delete"></span>--><!--</p>--><!--<p class="department-list horizontal-align -between">--><!--<span class="code">CA-AHOL</span>--><!--<span class="dept">Accounting Holdings</span>--><!--<span class="ion-android-close delete"></span>--><!--</p>--><!--</div>--><!--</div>--><!--<div class="section department-area -left">--><!--<div class="horizontal-align -start header">--><!--<p class="caption">Area Code</p>--><!--<div class="action-link bold-link">--><!--<a class="link" href="#">+ Add</a>--><!--</div>--><!--</div>--><!--<div class="wrapper scroll-section">--><!--<p class="department-list horizontal-align -between">--><!--<span class="code">033</span>--><!--<span class="dept">Quezon City</span>--><!--<span class="ion-android-close delete"></span>--><!--</p>--><!--<p class="department-list horizontal-align -between">--><!--<span class="code">044</span>--><!--<span class="dept">Cebu</span>--><!--<span class="ion-android-close delete"></span>--><!--</p>--><!--<p class="department-list horizontal-align -between">--><!--<span class="code">055</span>--><!--<span class="dept">Bulacan</span>--><!--<span class="ion-android-close delete"></span>--><!--</p>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--<div class="modal fade" id="findVendorModal">--><!--<div class="modal-dialog -bg">--><!--<div class="modal-content">--><!--<div class="modal-header">--><!--<h4 class="modal-title">--><!--Find Vendor--><!--<a class="button-link btn btn-create btn-sm float-lg-right" href="#">+ Add Vendor</a>--><!--</h4>--><!--<button class="close" data-dismiss="modal" type="button">--><!--<span class="ion-android-close close-modal"></span>--><!--</button>--><!--</div>--><!--<div class="modal-body">--><!--<div class="searchbox-modal">--><!--<div class="searchbox-content">--><!--<form action="/admin/dashboard" accept-charset="UTF-8" data-remote="true" method="post"><input name="utf8" type="hidden" value="\u2713"><input type="hidden" name="authenticity_token" value="edMWCmgwo1u+dK9VTCWnBNMaDxrv8skefxqMlkkXSEVDtfqpuX9YCPBOsbrPdkCH7EpcCZecvSzuWRjbgDPJrQ=="><div class="search-modal horizontal-align -between">--><!--<input class="form-control -borderless search" placeholder="code, name, description" type="text" name="search">--><!--<div class="modal-action">--><!--<input type="submit" name="commit" value="Search Item" class="btn btn-action btn-md" data-disable-with="Search Item">--><!--</div>--><!--</div>--><!--</form></div>--><!--</div>--><!--<div class="wrapper scroll-section">--><!--<table class="table table-list">--><!--<thead>--><!--<tr>--><!--<th>Code</th>--><!--<th>Vendor Description</th>--><!--<th>T.I.N No.</th>--><!--<th></th>--><!--</tr>--><!--</thead>--><!--<tbody>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--</tbody>--><!--</table>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--<div class="modal fade" id="findClientModal">--><!--<div class="modal-dialog -bg">--><!--<div class="modal-content">--><!--<div class="modal-header">--><!--<h4 class="modal-title">--><!--Find Client--><!--<a class="button-link btn btn-create btn-sm float-lg-right" href="#">+ Add Client</a>--><!--</h4>--><!--<button class="close" data-dismiss="modal" type="button">--><!--<span class="ion-android-close close-modal"></span>--><!--</button>--><!--</div>--><!--<div class="modal-body">--><!--<div class="searchbox-modal">--><!--<div class="searchbox-content">--><!--<form action="/admin/dashboard" accept-charset="UTF-8" data-remote="true" method="post"><input name="utf8" type="hidden" value="\u2713"><input type="hidden" name="authenticity_token" value="SL26hNGK3mMCGVEcQjOKGDGDeQ9/eniHnp4mtRpVb2xy21YnAMUlMEwjT/PBYG2bDtMqHAcUDLUP3bL403HuhA=="><div class="search-modal horizontal-align -between">--><!--<input class="form-control -borderless search" placeholder="code, name, description" type="text" name="search">--><!--<div class="modal-action">--><!--<input type="submit" name="commit" value="Search Item" class="btn btn-action btn-md" data-disable-with="Search Item">--><!--</div>--><!--</div>--><!--</form></div>--><!--</div>--><!--<div class="wrapper scroll-section">--><!--<table class="table find-vendor">--><!--<thead>--><!--<tr>--><!--<th>Code</th>--><!--<th>Vendor Description</th>--><!--<th>T.I.N No.</th>--><!--<th></th>--><!--</tr>--><!--</thead>--><!--<tbody>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--</tbody>--><!--</table>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--<div class="modal fade" id="findGroupAndCategoriesModal">--><!--<div class="modal-dialog -bg">--><!--<div class="modal-content">--><!--<div class="modal-header">--><!--<h4 class="modal-title">Groups &amp; Categories</h4>--><!--<button class="close" data-dismiss="modal" type="button">--><!--<span class="ion-android-close close-modal"></span>--><!--</button>--><!--</div>--><!--<div class="modal-body">--><!--<div class="horizontal-align -between">--><!--<div class="groups-section">--><!--<div class="horizontal-align -between">--><!--<p>Groups</p>--><!--<div class="action-link bold-link">--><!--<a class="link" href="#">+ Add</a>--><!--</div>--><!--</div>--><!--<ul class="groups-list">--><!--<li class="-active">Miscellaneous</li>--><!--<li>Office Supplies</li>--><!--<li>Project</li>--><!--</ul>--><!--</div>--><!--<div class="categories-section">--><!--<div class="horizontal-align -between">--><!--<p>Categories</p>--><!--<div class="action-link bold-link">--><!--<a class="link" href="#">+ Add</a>--><!--</div>--><!--</div>--><!--<div class="categories scroll-section">--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--&lt;!&ndash;--><!--.action-link--><!--= link_to \'Department & Area Code\', \'#\', { data: { target: \'#departmentCodeModal\', toggle: :modal }, class: \'link\' }--><!--.action-link--><!--= link_to \'Find Vendor\', \'#\', { data: { target: \'#findVendorModal\', toggle: :modal }, class: \'link\' }--><!--.action-link--><!--= link_to \'Find Client\', \'#\', { data: { target: \'#findClientModal\', toggle: :modal }, class: \'link\' }--><!--.action-link--><!--= link_to \'Groups & Categories\', \'#\', { data: { target: \'#findGroupAndCategoriesModal\', toggle: :modal }, class: \'link\' }--><!--= render \'admin/dashboards/department_and_area_code\'--><!--= render \'admin/dashboards/find_vendor\'--><!--= render \'admin/dashboards/find_client\'--><!--= render \'admin/dashboards/groups_and_categories\' &ndash;&gt;-->');
$templateCache.put('./rnd.html','<div class="admin-header"><div class="title horizontal-align -between"><h4 class="bg">R &amp; D</h4></div><hr class="devider"></div><div class="mmd-content"><company-nav></company-nav><a href="/admin/rnd/recipes"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Recipe</span></i></div></a><a href="/admin/rnd/mo"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Manufacturing Order</span></i></div></a><a href="/admin/rnd/pp"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Packaging process</span></i></div></a></div><div class="clear-float"></div>');
$templateCache.put('./sales.html','<div class="admin-header"><div class="title horizontal-align -between"><h4 class="bg">SALES</h4><div class="action-link"><a href="#">Reports</a></div></div><hr class="devider"></div><div class="mmd-content"><company-nav></company-nav><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/sales/sales-order"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Sales Order</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/sales/order-slip"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Order Slip</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/sales/sales-invoice"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Sales Invoices</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/sales/acknowledgement-receipt"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Acknowledgement Receipts</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/sales/return-slip"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Return Slips</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/sales/sales-journal-voucher"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Sales Journal Vouchers</span></i></div></a><a ng-if="$ctrl.checkPermission(\'superadmin\') || $ctrl.checkPermission(\'purchasing-me\')" href="/admin/sales/order-receipt"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Official Receipts</span></i></div></a><div class="clear-float"></div></div><!--<div class="sales-content">--><!--<div class="admin-header">--><!--<div class="title">--><!--<h4 class="md">Dashboard</h4>--><!--</div>--><!--</div>--><!--<div class="action-link">--><!--<a data-target="#departmentCodeModal" data-toggle="modal" class="link" href="#">Department &amp; Area Code</a>--><!--</div>--><!--<div class="action-link">--><!--<a data-target="#findVendorModal" data-toggle="modal" class="link" href="#">Find Vendor</a>--><!--</div>--><!--<div class="action-link">--><!--<a data-target="#findClientModal" data-toggle="modal" class="link" href="#">Find Client</a>--><!--</div>--><!--<div class="action-link">--><!--<a data-target="#findGroupAndCategoriesModal" data-toggle="modal" class="link" href="#">Groups &amp; Categories</a>--><!--</div>--><!--</div>--><!--<div class="modal fade" id="departmentCodeModal">--><!--<div class="modal-dialog -bg">--><!--<div class="modal-content">--><!--<div class="modal-header">--><!--<h4 class="modal-title">Department &amp; Area Code</h4>--><!--<button class="close" data-dismiss="modal" type="button">--><!--<span class="ion-android-close close-modal"></span>--><!--</button>--><!--</div>--><!--<div class="modal-body">--><!--<div class="horizontal-align -between">--><!--<div class="section department-area -left">--><!--<div class="horizontal-align -start header">--><!--<p class="caption">Departments</p>--><!--<div class="action-link bold-link">--><!--<a class="link" href="#">+ Add</a>--><!--</div>--><!--</div>--><!--<div class="wrapper scroll-section">--><!--<p class="department-list horizontal-align -between">--><!--<span class="code">CA-AHOL</span>--><!--<span class="dept">Accounting Holdings</span>--><!--<span class="ion-android-close delete"></span>--><!--</p>--><!--<p class="department-list horizontal-align -between">--><!--<span class="code">CA-AHOL</span>--><!--<span class="dept">Accounting Holdings</span>--><!--<span class="ion-android-close delete"></span>--><!--</p>--><!--<p class="department-list horizontal-align -between">--><!--<span class="code">CA-AHOL</span>--><!--<span class="dept">Accounting Holdings</span>--><!--<span class="ion-android-close delete"></span>--><!--</p>--><!--<p class="department-list horizontal-align -between">--><!--<span class="code">CA-AHOL</span>--><!--<span class="dept">Accounting Holdings</span>--><!--<span class="ion-android-close delete"></span>--><!--</p>--><!--</div>--><!--</div>--><!--<div class="section department-area -left">--><!--<div class="horizontal-align -start header">--><!--<p class="caption">Area Code</p>--><!--<div class="action-link bold-link">--><!--<a class="link" href="#">+ Add</a>--><!--</div>--><!--</div>--><!--<div class="wrapper scroll-section">--><!--<p class="department-list horizontal-align -between">--><!--<span class="code">033</span>--><!--<span class="dept">Quezon City</span>--><!--<span class="ion-android-close delete"></span>--><!--</p>--><!--<p class="department-list horizontal-align -between">--><!--<span class="code">044</span>--><!--<span class="dept">Cebu</span>--><!--<span class="ion-android-close delete"></span>--><!--</p>--><!--<p class="department-list horizontal-align -between">--><!--<span class="code">055</span>--><!--<span class="dept">Bulacan</span>--><!--<span class="ion-android-close delete"></span>--><!--</p>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--<div class="modal fade" id="findVendorModal">--><!--<div class="modal-dialog -bg">--><!--<div class="modal-content">--><!--<div class="modal-header">--><!--<h4 class="modal-title">--><!--Find Vendor--><!--<a class="button-link btn btn-create btn-sm float-lg-right" href="#">+ Add Vendor</a>--><!--</h4>--><!--<button class="close" data-dismiss="modal" type="button">--><!--<span class="ion-android-close close-modal"></span>--><!--</button>--><!--</div>--><!--<div class="modal-body">--><!--<div class="searchbox-modal">--><!--<div class="searchbox-content">--><!--<form action="/admin/sales" accept-charset="UTF-8" data-remote="true" method="post"><input name="utf8" type="hidden" value="\u2713"><input type="hidden" name="authenticity_token" value="edMWCmgwo1u+dK9VTCWnBNMaDxrv8skefxqMlkkXSEVDtfqpuX9YCPBOsbrPdkCH7EpcCZecvSzuWRjbgDPJrQ=="><div class="search-modal horizontal-align -between">--><!--<input class="form-control -borderless search" placeholder="code, name, description" type="text" name="search">--><!--<div class="modal-action">--><!--<input type="submit" name="commit" value="Search Item" class="btn btn-action btn-md" data-disable-with="Search Item">--><!--</div>--><!--</div>--><!--</form></div>--><!--</div>--><!--<div class="wrapper scroll-section">--><!--<table class="table table-list">--><!--<thead>--><!--<tr>--><!--<th>Code</th>--><!--<th>Vendor Description</th>--><!--<th>T.I.N No.</th>--><!--<th></th>--><!--</tr>--><!--</thead>--><!--<tbody>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--</tbody>--><!--</table>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--<div class="modal fade" id="findClientModal">--><!--<div class="modal-dialog -bg">--><!--<div class="modal-content">--><!--<div class="modal-header">--><!--<h4 class="modal-title">--><!--Find Client--><!--<a class="button-link btn btn-create btn-sm float-lg-right" href="#">+ Add Client</a>--><!--</h4>--><!--<button class="close" data-dismiss="modal" type="button">--><!--<span class="ion-android-close close-modal"></span>--><!--</button>--><!--</div>--><!--<div class="modal-body">--><!--<div class="searchbox-modal">--><!--<div class="searchbox-content">--><!--<form action="/admin/sales" accept-charset="UTF-8" data-remote="true" method="post"><input name="utf8" type="hidden" value="\u2713"><input type="hidden" name="authenticity_token" value="SL26hNGK3mMCGVEcQjOKGDGDeQ9/eniHnp4mtRpVb2xy21YnAMUlMEwjT/PBYG2bDtMqHAcUDLUP3bL403HuhA=="><div class="search-modal horizontal-align -between">--><!--<input class="form-control -borderless search" placeholder="code, name, description" type="text" name="search">--><!--<div class="modal-action">--><!--<input type="submit" name="commit" value="Search Item" class="btn btn-action btn-md" data-disable-with="Search Item">--><!--</div>--><!--</div>--><!--</form></div>--><!--</div>--><!--<div class="wrapper scroll-section">--><!--<table class="table find-vendor">--><!--<thead>--><!--<tr>--><!--<th>Code</th>--><!--<th>Vendor Description</th>--><!--<th>T.I.N No.</th>--><!--<th></th>--><!--</tr>--><!--</thead>--><!--<tbody>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--<tr>--><!--<td>CN10330</td>--><!--<td>Chad Mendez</td>--><!--<td>030-623-391-429</td>--><!--<td class="tablebutton-form">--><!--<div class="holder">--><!--<button class="btn btn-compose">--><!--<i class="ion-ios-compose-outline"></i>--><!--</button>--><!--<button class="btn btn-archive">--><!--<i class="ion-android-close"></i>--><!--</button>--><!--</div>--><!--</td>--><!--</tr>--><!--</tbody>--><!--</table>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--<div class="modal fade" id="findGroupAndCategoriesModal">--><!--<div class="modal-dialog -bg">--><!--<div class="modal-content">--><!--<div class="modal-header">--><!--<h4 class="modal-title">Groups &amp; Categories</h4>--><!--<button class="close" data-dismiss="modal" type="button">--><!--<span class="ion-android-close close-modal"></span>--><!--</button>--><!--</div>--><!--<div class="modal-body">--><!--<div class="horizontal-align -between">--><!--<div class="groups-section">--><!--<div class="horizontal-align -between">--><!--<p>Groups</p>--><!--<div class="action-link bold-link">--><!--<a class="link" href="#">+ Add</a>--><!--</div>--><!--</div>--><!--<ul class="groups-list">--><!--<li class="-active">Miscellaneous</li>--><!--<li>Office Supplies</li>--><!--<li>Project</li>--><!--</ul>--><!--</div>--><!--<div class="categories-section">--><!--<div class="horizontal-align -between">--><!--<p>Categories</p>--><!--<div class="action-link bold-link">--><!--<a class="link" href="#">+ Add</a>--><!--</div>--><!--</div>--><!--<div class="categories scroll-section">--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--<p class="list">--><!--Capital Expenditures--><!--<span class="delete ion-android-close float-xl-right"></span>--><!--</p>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--</div>--><!--&lt;!&ndash;--><!--.action-link--><!--= link_to \'Department & Area Code\', \'#\', { data: { target: \'#departmentCodeModal\', toggle: :modal }, class: \'link\' }--><!--.action-link--><!--= link_to \'Find Vendor\', \'#\', { data: { target: \'#findVendorModal\', toggle: :modal }, class: \'link\' }--><!--.action-link--><!--= link_to \'Find Client\', \'#\', { data: { target: \'#findClientModal\', toggle: :modal }, class: \'link\' }--><!--.action-link--><!--= link_to \'Groups & Categories\', \'#\', { data: { target: \'#findGroupAndCategoriesModal\', toggle: :modal }, class: \'link\' }--><!--= render \'admin/saless/department_and_area_code\'--><!--= render \'admin/saless/find_vendor\'--><!--= render \'admin/saless/find_client\'--><!--= render \'admin/saless/groups_and_categories\' &ndash;&gt;-->');
$templateCache.put('./app-nav.html','<div class="navbar-header horizontal-align -start"><div class="navbar-brand"><div id="logo"><h3 class="title">{{$ctrl.currentUser.company.name}}</h3></div></div><div class="content horizontal-align -between"><h3 class="title">{{$ctrl.currentUser.department.name}}</h3><!-- <i class="arrow ion-ios-arrow-down"></i> --> <a ng-click="$ctrl.logout()" href="">Logout</a></div></div>');
$templateCache.put('./app-sidenav.html','<div id="admin-content"><div class="account"><p class="name">{{$ctrl.currentUser.firstName}} {{$ctrl.currentUser.lastName}}</p><label class="type">{{$ctrl.currentUser.department.name}} Account</label></div><div class="admin-selection"><ul id="admin-ul"><li ng-show="$ctrl.showTabs(\'DASHBOARD\')" class="list"><a class="link {{ $ctrl.getPathname().indexOf(\'/admin/dashboard\') == 0 ? \'-active\' : \'\'}}" ng-click="$ctrl.checkSub(\'/admin/dashboard\')" href="/admin/dashboard"><i class="icon ion-ios-list-outline"></i> <span class="caption">DASHBOARD</span></a></li><li ng-show="$ctrl.showTabs(\'DASHBOARD\')" class="list"><a class="link {{ $ctrl.getPathname().indexOf(\'/admin/maintenance\') == 0 ? \'-active\' : \'\'}}" ng-click="$ctrl.checkSub(\'/admin/maintenance\')" href="/admin/maintenance"><i class="icon ion-ios-list-outline"></i> <span class="caption">MAINTENANCE</span></a></li><li ng-show="$ctrl.showTabs(\'USERS\')" class="list"><a class="link {{ $ctrl.getPathname().indexOf(\'/admin/users\') == 0 ? \'-active\' : \'\'}}" ng-click="$ctrl.checkSub(\'/admin/users\')" href="/admin/users"><i class="icon ion-ios-people-outline"></i> <span class="caption">USERS</span></a></li><li ng-show="$ctrl.showTabs(\'USERS\')" class="list"><a class="link {{ $ctrl.getPathname().indexOf(\'/admin/accounting\') == 0 ? \'-active\' : \'\'}}" ng-click="$ctrl.checkSub(\'/admin/accounting\')" href="/admin/accounting"><i class="icon ion-ios-people-outline"></i> <span class="caption">ACCOUNTING</span></a></li><li ng-show="$ctrl.showTabs(\'USERS\')" class="list"><a class="link {{ $ctrl.getPathname().indexOf(\'/admin/sales\') == 0 ? \'-active\' : \'\'}}" ng-click="$ctrl.checkSub(\'/admin/sales\')" href="/admin/sales"><i class="icon ion-ios-people-outline"></i> <span class="caption">SALES</span></a></li><li ng-show="$ctrl.showTabs(\'MMD\')" class="list"><a class="link" ng-click="$ctrl.checkSub(\'/admin/mmd\')" href="/admin/mmd"><i class="icon ion-ios-list-outline"></i> <span class="caption">MMD</span></a></li><li ng-show="$ctrl.showTabs(\'RND\')" class="list"><a class="link" ng-click="$ctrl.checkSub(\'/admin/rnd\')" href="/admin/rnd"><i class="icon ion-ios-flask-outline"></i> <span class="caption">R &amp; D</span></a></li><li ng-show="$ctrl.showTabs(\'PURCHASING\')" class="list"><a class="link {{ $ctrl.getPathname().indexOf(\'/admin/purchasing\') == 0 ? \'-active\' : \'\'}}" ng-click="$ctrl.checkSub(\'/admin/purchasing\')" href="/admin/purchasing"><i class="icon ion-ios-cart-outline"></i> <span class="caption">PURCHASING</span></a></li><li ng-show="$ctrl.showTabs(\'COSTING\')" class="list"><a class="link {{ $ctrl.getPathname().indexOf(\'/admin/costing\') == 0 ? \'-active\' : \'\'}}" href="/admin/costing" ng-click="$ctrl.checkSub(\'/admin/costing\')"><i class="icon ion-ios-pricetags-outline"></i> <span class="caption">COSTING</span></a></li><li ng-show="$ctrl.showTabs(\'BUILDING1\')" class="list"><a class="link" ng-click="$ctrl.checkSub(\'/admin/job_order\')"><i class="icon ion-ios-briefcase-outline"></i> <span class="caption">BUILDING 1</span></a></li></ul></div><!--<div ng-show="$ctrl.isPageWithSubMenu" class="navigation">--><!--<div id="navtools">--><!--<ul class="nav-list" id="navtools-ul">--><!--<li class="list"> &lt;!&ndash; DASHBOARD &ndash;&gt;--><!--<a class="ion-ios-list-outline link" ng-click="$ctrl.checkSub(\'/admin/dashboard\')" href="/admin/dashboard"></a>--><!--</li>--><!--<li class="list"> &lt;!&ndash; USERS &ndash;&gt;--><!--<a class="ion-ios-people-outline link" ng-click="$ctrl.checkSub(\'/admin/users\')" href="/admin/users"></a>--><!--</li>--><!--<li class="list"> &lt;!&ndash; MMD &ndash;&gt;--><!--<a class="ion-ios-list-outline link {{ $ctrl.getPathname().indexOf(\'/admin/mmd\') == 0 ? \'-active\' : \'\'}}"--><!--ng-click="$ctrl.checkSub(\'/admin/mmd\')"--><!--href="/admin/mmd"></a>--><!--</li>--><!--<li class="list"> &lt;!&ndash; R &amp; D &ndash;&gt;--><!--<a class="ion-ios-flask-outline link {{ $ctrl.getPathname().indexOf(\'/admin/rnd\') == 0 ? \'-active\' : \'\'}}"--><!--ng-click="$ctrl.checkSub(\'/admin/rnd\')"--><!--href="/admin/rnd"--><!--&gt;</a>--><!--</li>--><!--<li class="list"> &lt;!&ndash; PURCHASING &ndash;&gt;--><!--<a class="ion-ios-briefcase-outline link"></a>--><!--</li>--><!--<li class="list"> &lt;!&ndash; COSTING &ndash;&gt;--><!--<a class="ion-ios-star-outline link"></a>--><!--</li>--><!--<li class="list"> &lt;!&ndash; BUILDING 1 &ndash;&gt;--><!--<a class="ion-ios-calculator-outline link"></a>--><!--</li>--><!--</ul>--><!--</div>--><!--<div class="selections" id="selection">--><!--&lt;!&ndash; DASHBOARD &ndash;&gt;--><!--<section class="section">--><!--<ul class="ul-style">--><!--</ul>--><!--</section>--><!--&lt;!&ndash; USERS &ndash;&gt;--><!--<section class="section">--><!--<ul class="ul-style">--><!--</ul>--><!--</section>--><!--&lt;!&ndash; MMD &ndash;&gt;--><!--<section class="section {{ $ctrl.getPathname().indexOf(\'/admin/mmd\') == 0 ? \'-display\' : \'\'}}">--><!--<ul class="ul-style">--><!--<li class="list">--><!--<a class="link -selected" href="/mmd/pris">Production Request Inventory Slip</a>--><!--</li>--><!--<li class="list">--><!--<a class="link " href="/mmd/rs/tolling">Receiving Slip | Tolling</a>--><!--</li>--><!--<li class="list">--><!--<a class="link " href="/mmd/rs/rmpm">Receiving Slip | RM / PM</a>--><!--</li>--><!--<li class="list">--><!--<a class="link " href="/mmd/approved_receipt">Approved Receipts</a>--><!--</li>--><!--<li class="list">--><!--<a class="link " href="/mmd/material_receive">Material Receiving</a>--><!--</li>--><!--<li class="list">--><!--<a class="link " href="/mmd/material_adjustment">Material Adjustment</a>--><!--</li>--><!--<li class="list">--><!--<a class="link " href="/mmd/transfer-of-stocks">Transfer of Stocks</a>--><!--</li>--><!--<li class="list">--><!--<a class="link " href="/mmd/material_evaluation">Material Re-Evaluation</a>--><!--</li>--><!--</ul>--><!--</section>--><!--&lt;!&ndash; R &amp; D &ndash;&gt;--><!--<section class="section {{ $ctrl.getPathname().indexOf(\'/admin/rnd\') == 0 ? \'-display\' : \'\'}}">--><!--<ul class="ul-style">--><!--<li class="list">--><!--<a class="link -selected" href="#">F.G Recipe Form</a>--><!--</li>--><!--</ul>--><!--</section>--><!--&lt;!&ndash; COSTING &ndash;&gt;--><!--<section class="section">--><!--<ul class="ul-style">--><!--<li class="list">--><!--<a class="link -selected" href="#">Job Order</a>--><!--</li>--><!--<li class="list">--><!--<a class="link" href="#">Production Process</a>--><!--</li>--><!--</ul>--><!--</section>--><!--&lt;!&ndash; PURCHASING &ndash;&gt;--><!--<section class="section">--><!--<ul class="ul-style">--><!--<li class="list">--><!--<a class="link -selected" href="#">Delivery Receipts</a>--><!--</li>--><!--<li class="list">--><!--<a class="link" href="#">Order Slops</a>--><!--</li>--><!--<li class="list">--><!--<a class="link" href="#">Return Slips</a>--><!--</li>--><!--<li class="list">--><!--<a class="link" href="#">A.R / P.R</a>--><!--</li>--><!--</ul>--><!--</section>--><!--&lt;!&ndash; BUILDING 1 &ndash;&gt;--><!--<section class="section">--><!--<ul class="ul-style">--><!--<li class="list">--><!--<a class="link -selected" href="#">No Content yet</a>--><!--</li>--><!--</ul>--><!--</section>--><!--</div>--><!--</div>--></div>');
$templateCache.put('./app.html','<div class="admin-layout"><app-nav id="navigation-bar"></app-nav><app-sidenav class="sidenav"></app-sidenav><div class="main" ui-view></div></div><div class="horizontal-align -center"><div><p style="border:1px solid black"><b>App Development Version:</b> {{$ctrl.appVersion}} <b>Backend: </b>{{$ctrl.superadminServerVersion}}</p></div></div>');
$templateCache.put('./sales-journal-vouchers.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Sales Journal Voucher</h3></div></div><div class="client-pris"><div class="search-box horizontal-align -between"><div class="form-group rmpm"><label>Type:</label><select class="form-control select" ng-model="$ctrl.type" name="fromDepots"><option value="OS">OS</option><option value="DR_SI">DR_SI</option></select></div><div class="form-group rmpm"><label>Depot:</label><select class="form-control select" ng-model="$ctrl.userAssignedDepot.id" ng-options="d.id as d.name for d in $ctrl.userAssignedDepots" name="fromDepots"></select></div><div class="form-group rmpm"><label>From:</label><input class="form-control -borderless search" placeholder="Date From" type="date" date="dd-MM-yyyy" name="search" ng-model="$ctrl.dateFrom"></div><div class="form-group rmpm"><label>To:</label><input class="form-control -borderless search" placeholder="Date To" type="date" date="dd-MM-yyyy" name="search" ng-model="$ctrl.dateTo"></div></div><div class="request-action"><button type="button" ng-click="$ctrl.search()" class="btn btn-create btn-md">Search</button></div></div><table id="sjvTable" ng-if="$ctrl.salesJournalVouchers" class="table table-list"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'date\';$ctrl.sortReverse = !$ctrl.sortReverse;">Date <span ng-show="$ctrl.sortType == \'date\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'date\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'client\';$ctrl.sortReverse = !$ctrl.sortReverse;">Client <span ng-show="$ctrl.sortType == \'client\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'client\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'si\';$ctrl.sortReverse = !$ctrl.sortReverse;">SI <span ng-show="$ctrl.sortType == \'si\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'si\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'amount\';$ctrl.sortReverse = !$ctrl.sortReverse;">Amount <span ng-show="$ctrl.sortType == \'amount\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'amount\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'tax\';$ctrl.sortReverse = !$ctrl.sortReverse;">Tax <span ng-show="$ctrl.sortType == \'tax\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'tax\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'receivable\';$ctrl.sortReverse = !$ctrl.sortReverse;">Accounts Receivable <span ng-show="$ctrl.sortType == \'receivable\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'receivable\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th></tr></thead><tbody><tr ng-repeat="salesJournalVoucher in $ctrl.salesJournalVouchers | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{salesJournalVoucher.date | date}}</td><td>{{salesJournalVoucher.number}}</td><td>{{salesJournalVoucher.salesOrder.client.name}}</td><td>{{salesJournalVoucher.totalAmount * (1 - (salesJournalVoucher.taxPercentage / 100))}}</td><td>{{salesJournalVoucher.totalAmount * (salesJournalVoucher.taxPercentage / 100)}}</td><td>{{salesJournalVoucher.totalAmount}}</td></tr></tbody><tfoot><th></th><th></th><th>Total:</th><th>{{$ctrl.totalAmount.toFixed(2)}}</th><th>{{$ctrl.totalTaxAmount.toFixed(2)}}</th><th>{{$ctrl.totalAccountsReceivable.toFixed(2)}}</th></tfoot></table><div class="request-action"><button type="button" ng-click="$ctrl.print()" class="btn btn-primary btn-md">Print</button></div>');
$templateCache.put('./costing-save.html','<h1>New MO Costing</h1><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Select MO</label><select class="form-control select -borderless" ng-model="$ctrl.costing.moInventory" ng-change="$ctrl.listJobOrdersByMoInventory()" ng-options="d.finishedGood.code for d in $ctrl.moList" name="finishedGood"></select></div></div></div></div></div><div class="form-content"><!-- <div ng-if="$ctrl.costing.moInventory.inventoryList" class="step-form" style="border: solid 1px #eee; padding: 10px;">\r\n            <div class="horizontal-align -between">\r\n                <div class="side-one">\r\n                    <div class="horizontal-align -between content">\r\n                        <div class="form-group field">\r\n                            <label class="label capitalize-text">Select Employee</label>\r\n                            <select class="form-control select -borderless" ng-model="$ctrl.employeeSelection" ng-options="e.firstName + \' \' + e.lastName + \':\' + e.hourlyRate + \'/hr\' for e in $ctrl.employees"\r\n                                name="employeeSelection">\r\n                            </select>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class="side-two">\r\n                    <div class="form-group">\r\n                        <div class="horizontal-align -between content">\r\n                            <div class="form-group field">\r\n                                <label class="label capitalize-text">Employee Hours</label>\r\n                                <input type="number" class="form-control -border" ng-model="$ctrl.hoursSpent" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n            <div class="side-two">\r\n                    <div class="form-group">\r\n                            <input class="btn btn-create btn-md" type="button" value="Add Employee" ng-click="$ctrl.addEmployee()">\r\n                    </div>\r\n                </div>\r\n\r\n        </div> --><!-- <pre>{{ $ctrl.costing.moInventory | json}}</pre> --><div ng-if="$ctrl.costing.moInventory.inventoryList.length > 0" class="title horizontal-align -between"><h3 class="bg">MO Inventory</h3></div><div ng-if="$ctrl.costing.moInventory.inventoryList.length > 0" class="title horizontal-align -between"><div class="horizontal-align -between"><div class="horizontal-align -between content"><div><p class="title">Mo Number:</p><span class="content">{{$ctrl.costing.moInventory.moNumber}}</span></div><div><p class="title">FG Code</p><span class="content">{{$ctrl.costing.moInventory.finishedGood.code}}</span></div><div><p class="title">Batch Size</p><span class="content">{{$ctrl.costing.moInventory.batchSize}}</span></div></div><div class="horizontal-align -between content"><div><p class="title">Lot Number:</p><span class="content">{{$ctrl.costing.moInventory.lotNumber}}</span></div><div><p class="title">MO Date</p><span class="content">{{$ctrl.costing.moInventory.dateCreated | date}}</span></div></div></div></div><table ng-if="$ctrl.costing.moInventory.inventoryList.length > 0" class="table table-list"><thead><tr><td>Item</td><td>Type</td><td>Control Number</td><td>Inventory Quantity</td><td>Unit Price</td><td>Cost</td></tr></thead><tbody><tr ng-repeat="inv in $ctrl.costing.moInventory.inventoryList"><td>{{inv.item.name}} {{inv.item.code}}</td><td>{{inv.item.type.code}}</td><td>{{inv.controlNumber}}</td><td>{{inv.number = $ctrl.findIngredientQuantity(inv.item.code) * $ctrl.costing.moInventory.batchSize}}</td><td>0<!-- {{inv.item.unitPrice}} --></td><td>0<!-- {{inv.cost}} --></td></tr></tbody></table><div ng-if="$ctrl.costing.jobOrders.length > 0" class="title horizontal-align -between"><h3 class="bg">Job Orders</h3></div><table ng-if="$ctrl.costing.jobOrders.length > 0" class="table table-list"><thead><tr><td>Date</td><td>Fullname</td><td>Time in</td><td>Time out</td><td>Hourly Rate</td><td>Hours Spent</td><td>Cost</td></tr></thead><tbody><tr ng-repeat="jobOrder in $ctrl.costing.jobOrders"><td>{{jobOrder.date | date}}</td><td>{{jobOrder.employee.firstName}} {{jobOrder.employee.lastName}}</td><td>{{jobOrder.timeIn | date:\'h:mma\'}}</td><td>{{jobOrder.timeOut | date:\'h:mma\'}}</td><td>{{jobOrder.employee.hourlyRate}}</td><td>{{jobOrder.numberOfHours}}</td><td>{{jobOrder.employee.hourlyRate * jobOrder.numberOfHours}}</td></tr></tbody></table><div ng-if="$ctrl.costing.moInventory.inventoryList.length > 0"><label>Total Cost:</label>{{$ctrl.costing.totalCost}}</div><div class="request-action"><button type="button" class="btn btn-create btn-md" ng-click="$ctrl.save()">Save</button></div><!-- <h1>MO Costing</h1>\r\n        <div ng-repeat="costing in $ctrl.costings">\r\n            <pre>{{costing | json}}</pre>\r\n        </div> --></div></div>');
$templateCache.put('./costing-main.html','<div class="admin-header"><div class="title horizontal-align -between"><h4 class="bg">Costing</h4></div><hr class="devider"></div><div class="mmd-content"><company-nav></company-nav><a href="/admin/joCosts"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Job Order Cost Sheet</span></i></div></a><a href="/admin/costings"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Costing</span></i></div></a></div>');
$templateCache.put('./costing.html','<h1>Costing</h1><div class="form-content"><div ng-if="$ctrl.costing.moInventory.inventoryList.length > 0" class="title horizontal-align -between"><h3 class="bg">MO Inventory</h3></div><div ng-if="$ctrl.costing.moInventory.inventoryList.length > 0" class="title horizontal-align -between"><div><p class="title">Mo Number</p><span class="content">{{$ctrl.costing.moInventory.moNumber}}</span></div><div><p class="title">FG Code</p><span class="content">{{$ctrl.costing.moInventory.finishedGood.code}}</span></div><div><p class="title">Batch Size</p><span class="content">{{$ctrl.costing.moInventory.batchSize}}</span></div><div><p class="title">Lot Number</p><span class="content">{{$ctrl.costing.moInventory.lotNumber}}</span></div><div><p class="title">MO Date</p><span class="content">{{$ctrl.costing.moInventory.dateCreated | date}}</span></div></div><table ng-if="$ctrl.costing.moInventory.inventoryList.length > 0" class="table table-list"><thead><tr><td>Item</td><td>Type</td><td>Control Number</td><td>Inventory Quantity</td><td>Cost</td></tr></thead><tbody><tr ng-repeat="moCostingInv in $ctrl.costing.moCostingInventories"><td>{{moCostingInv.inventory.item.name}} {{inv.item.code}}</td><td>{{moCostingInv.inventory.item.type.code}}</td><td>{{moCostingInv.inventory.controlNumber}}</td><td>{{moCostingInv.inventory.number = $ctrl.findIngredientQuantity(moCostingInv.inventory.item.code) * $ctrl.costing.moInventory.batchSize}}</td><td>{{moCostingInv.cost}}</td></tr></tbody></table><div ng-if="$ctrl.costing.jobOrders.length > 0" class="title horizontal-align -between"><h3 class="bg">Job Orders</h3></div><table ng-if="$ctrl.costing.jobOrders.length > 0" class="table table-list"><thead><tr><td>Date</td><td>Fullname</td><td>Time In</td><td>Time Out</td><td>Hourly Rate</td><td>Hours Spent</td><td>Cost</td></tr></thead><tbody><tr ng-repeat="jobOrder in $ctrl.costing.jobOrders"><td>{{jobOrder.date | date}}</td><td>{{jobOrder.employee.firstName}} {{jobOrder.employee.lastName}}</td><td>{{jobOrder.timeIn | date:\'h:mma\'}}</td><td>{{jobOrder.timeOut | date:\'h:mma\'}}</td><td>{{jobOrder.employee.hourlyRate}}</td><td>{{jobOrder.numberOfHours}}</td><td>{{jobOrder.employee.hourlyRate * jobOrder.numberOfHours}}</td></tr></tbody></table><div ng-if="$ctrl.costing.moInventory.inventoryList.length > 0"><label>Total Cost:</label>{{$ctrl.costing.totalCost}}</div><!-- <div class="request-action">\r\n        <button type="button" class="btn btn-create btn-md" ng-click="$ctrl.save()">Save</button>\r\n    </div> --><!-- <h1>MO Costing</h1>\r\n        <div ng-repeat="costing in $ctrl.costings">\r\n            <pre>{{costing | json}}</pre>\r\n        </div> --></div>');
$templateCache.put('./costings.html','<div class="admin-header"><div class="title horizontal-align -between"><h4 class="bg">Costings</h4></div><hr class="devider"></div><div class="main-header"><a href="/admin/costing-save" class="btn btn-create btn-md button-link">Add new costing</a></div><!-- <div class="search-box horizontal-align -between">\r\n        <div class=" search-modal horizontal-align -between">\r\n                <div class="input-group-addon" style="border: 0\t !important;"><i class="fa fa-search"></i></div>\r\n                <input class="form-control -borderless search" placeholder="id" type="text" name="search" ng-model="$ctrl.searchId"/>\r\n                <input class="form-control -borderless search" placeholder="moNumber" type="text" name="search" ng-model="$ctrl.searchMoNumber"/>\r\n                <input class="form-control -borderless search" placeholder="lotNumber" type="text" name="search" ng-model="$ctrl.searchLotNumber"/>\r\n            </div>\r\n    </div> --><table ng-if="$ctrl.costings" class="table table-list"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'id\';$ctrl.sortReverse = !$ctrl.sortReverse;">MO # <span ng-show="$ctrl.sortType == \'id\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'id\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'moNumber\';$ctrl.sortReverse = !$ctrl.sortReverse;">FinishedGood <span ng-show="$ctrl.sortType == \'moNumber\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'moNumber\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'lotNumber\';$ctrl.sortReverse = !$ctrl.sortReverse;">Total Cost <span ng-show="$ctrl.sortType == \'lotNumber\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'lotNumber\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="cost in $ctrl.costings"><td>{{cost.moInventory.moNumber || \'N/A\'}}</td><td>{{cost.moInventory.finishedGood.name}}</td><td>{{cost.totalCost}}</td><td><i class="ion-ios-compose-outline" ng-click="$ctrl.view(cost.id)"></i></td></tr></tbody></table><div class="clear-float"></div>');
$templateCache.put('./jo-costs.html','<div class="admin-header"><div class="title horizontal-align -between"><h4 class="bg">Job Order Cost Sheets</h4></div><hr class="devider"></div><div class="main-header"><a href="/admin/joCost-save" class="btn btn-create btn-md button-link">Add new job order cost sheet</a></div><!-- <div class="search-box horizontal-align -between">\r\n        <div class=" search-modal horizontal-align -between">\r\n                <div class="input-group-addon" style="border: 0\t !important;"><i class="fa fa-search"></i></div>\r\n                <input class="form-control -borderless search" placeholder="id" type="text" name="search" ng-model="$ctrl.searchId"/>\r\n                <input class="form-control -borderless search" placeholder="moNumber" type="text" name="search" ng-model="$ctrl.searchMoNumber"/>\r\n                <input class="form-control -borderless search" placeholder="lotNumber" type="text" name="search" ng-model="$ctrl.searchLotNumber"/>\r\n            </div>\r\n    </div> --><table ng-if="$ctrl.joCosts" class="table table-list"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'id\';$ctrl.sortReverse = !$ctrl.sortReverse;">Date Created <span ng-show="$ctrl.sortType == \'id\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'id\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'finishedGood\';$ctrl.sortReverse = !$ctrl.sortReverse;">Finished Good <span ng-show="$ctrl.sortType == \'finishedGood\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'finishedGood\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'id\';$ctrl.sortReverse = !$ctrl.sortReverse;">Jo Estimate # <span ng-show="$ctrl.sortType == \'id\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'id\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'lastUpdate\';$ctrl.sortReverse = !$ctrl.sortReverse;">Last Update <span ng-show="$ctrl.sortType == \'lastUpdate\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'lastUpdate\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'active\';$ctrl.sortReverse = !$ctrl.sortReverse;">Active <span ng-show="$ctrl.sortType == \'active\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'active\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="joCost in $ctrl.joCosts"><td>{{ joCost.createdDate || \'N/A\'}}</td><td>{{joCost.finishedGood.name}} ({{joCost.finishedGood.code}})</td><td>{{joCost.id}}</td><td>{{joCost.lastUpdate || \'N/A\'}}</td><td>{{joCost.active || false}}</td><td><i class="ion-ios-compose-outline" ng-click="$ctrl.view(cost.id)"></i></td></tr></tbody></table><div class="clear-float"></div>');
$templateCache.put('./jo-cost-save.html','<h1>New Job Order Cost Sheet</h1><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="step-form"><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" data-target="#findFgModal" data-toggle="modal">Select Finished Good</a></div><div class="form-group rmpm"><label class="label capitalize-text">FG Code</label><input disabled="disabled" type="text" ng-model="$ctrl.joCost.finishedGood.code" readonly="readonly" class="form-control -border"><label class="label capitalize-text">FG Name</label><input disabled="disabled" type="text" ng-model="$ctrl.joCost.finishedGood.name" readonly="readonly" class="form-control -border"></div></div></div></div></div><div class="request-action"><button type="button" class="btn btn-create btn-md" ng-click="$ctrl.selectFinishedGood()">Select Finished Good</button></div></div><div class="form-content"><div ng-if="$ctrl.joCost.jobOrderCostSheetIngredients.length > 0" class="title horizontal-align -between"><h3 class="bg">Material Cost</h3></div><table ng-if="$ctrl.joCost.jobOrderCostSheetIngredients.length > 0" class="table table-list"><thead><tr><td>Material</td><td>Quantity Needed</td><td>Unit</td><td>Cost Per Unit</td><td>Amount</td></tr></thead><tbody><tr ng-repeat="jocsIng in $ctrl.joCost.jobOrderCostSheetIngredients"><td>{{jocsIng.ingredient.item.name}} {{jocsIng.ingredient.item.code}} ({{jocsIng.ingredient.item.type.code}})</td><td>{{jocsIng.ingredient.quantity}}</td><td>{{jocsIng.ingredient.item.unit.code}}</td><td><input type="number" ng-model="jocsIng.costPerUnit" ng-blur="$ctrl.recomputeTotal()" class="form-control -border"></td><td>{{jocsIng.ingredient.quantity * jocsIng.costPerUnit}}</td></tr></tbody></table><table ng-if="$ctrl.joCost.jobOrderCostSheetIngredients.length > 0" class="table table-list"><thead><tr><td>Task</td><td>Hours</td><td>Rate/Hr</td></tr></thead><tbody><tr ng-repeat="jocsPA in $ctrl.joCost.jobOrderCostSheetProcedureAreas"><td>{{jocsPA.procedureArea.name}} ({{jocsPA.procedureArea.code}})</td><td><input type="number" ng-model="jocsPA.hours" ng-blur="$ctrl.recomputeTotal()" class="form-control -border"></td><td><input type="number" ng-model="jocsPA.ratePerHour" ng-blur="$ctrl.recomputeTotal()" class="form-control -border"></td></tr></tbody></table><div ng-if="$ctrl.joCost.jobOrderCostSheetIngredients.length > 0"><label>Total Cost:</label>{{$ctrl.joCost.grandTotal}}</div><div ng-if="$ctrl.joCost.jobOrderCostSheetIngredients.length > 0" class="request-action"><button type="button" class="btn btn-create btn-md" ng-click="$ctrl.save()">Save</button></div><find-fg-modal fg="$ctrl.joCost.finishedGood"></find-fg-modal></div></div>');
$templateCache.put('./cluster-codes.html','<div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-area">Find Cluster Codes <a class="button-link btn btn-create btn-sm float-lg-right" ng-click="$ctrl.showAddClusterCode(true)">+ Add Cluster Codes</a></h4><button class="close" data-dismiss="modal" type="button"><span ng-click="$ctrl.showAddClusterCode(false)" class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="searchbox-modal"><form><div class="searchbox-content"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="code" type="text" name="search" ng-model="$ctrl.searchCode"> <input class="form-control -borderless search" placeholder="name" type="text" name="search" ng-model="$ctrl.searchName"></div></div></form></div><form novalidate ng-submit="$ctrl.saveClusterCode()" ng-if="$ctrl.addClusterCode" method="post"><div class="horizontal-align -between" id="add-group"><input type="hidden" ng-model="$ctrl.cluster.id"><div class="form-group col-md-4"><label for="code">Code</label><input ng-model="$ctrl.clusterCode.code" class="form-control -border" autofocus="autofocus" placeholder="Code" type="text" name="code"></div><div class="form-group col-md-4"><label for="name">Title</label><input ng-model="$ctrl.clusterCode.area" class="form-control -border" placeholder="Title" type="text" name="area"></div><div class="form-group col-md-4"><label for="name">Description</label><input ng-model="$ctrl.clusterCode.description" class="form-control -border" placeholder="Description" type="text" name="area"></div></div><div class="action-button horizontal-align -end"><input type="submit" name="commit" value="Save" class="btn btn-create btn-md" data-disable-with="Save"></div></form><div class="wrapper scroll-section"><table class="table find-vendor"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'id\';$ctrl.sortReverse = !$ctrl.sortReverse;">ID <span ng-show="$ctrl.sortType == \'id\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i></span> <span ng-show="$ctrl.sortType == \'id\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'code\';$ctrl.sortReverse = !$ctrl.sortReverse;">Code <span ng-show="$ctrl.sortType == \'code\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'code\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'area\';$ctrl.sortReverse = !$ctrl.sortReverse;">Title <span ng-show="$ctrl.sortType == \'area\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'area\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'description\';$ctrl.sortReverse = !$ctrl.sortReverse;">Description <span ng-show="$ctrl.sortType == \'description\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'description\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="clusterCode in $ctrl.clusterCodes | filter: {code: $ctrl.searchCode, area: $ctrl.searchName} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{clusterCode.id}}</td><td>{{clusterCode.code}}</td><td>{{clusterCode.area}}</td><td>{{clusterCode.description}}</td><td class="tablebutton-form"><div class="holder"><button ng-click="$ctrl.editClusterCode(clusterCode.id)" class="btn btn-compose"><i class="ion-ios-compose-outline"></i></button> <button ng-click="$ctrl.deleteClusterCode(clusterCode.id)" class="btn btn-archive"><i class="ion-android-close"></i></button></div></td></tr></tbody></table></div></div></div></div>');
$templateCache.put('./groups-and-categories.html','<h4 class="modal-title">Groups &amp; Categories</h4><button class="close" data-dismiss="modal" type="button"><span class="ion-android-close close-modal"></span></button><div class="modal-body"><div class="horizontal-align -between"><div class="groups-section"><div class="horizontal-align -between"><p>Groups</p><div class="action-link bold-link"><a class="link" href="#" ng-click="$ctrl.toggleGroupForm()">+ Add</a></div></div><form ng-show="!$ctrl.hideGroup" novalidate ng-submit="$ctrl.submitGroup();" method="post"><div class="horizontal-align -between" id="add-group"><input type="hidden" ng-model="$ctrl.group.id"><div class="form-group"><label for="name">Name</label><input ng-model="$ctrl.group.name" class="form-control -border" placeholder="Name" type="text" name="name"></div></div><div class="action-button horizontal-align -end"><input type="submit" name="commit" value="{{ $ctrl.groupButtonText }}" class="btn btn-create btn-md" data-disable-with="Save"></div></form><ul class="groups-list"><li ng-repeat="group in $ctrl.groups" class="{{ $ctrl.selectedGroup && $ctrl.selectedGroup.id == group.id ? \'-active\' : \'\'}}" ng-click="$ctrl.onSelectGroup(group)">{{group.name}}</li></ul></div><div class="categories-section"><div class="horizontal-align -between"><p>Categories</p><div class="action-link bold-link"><a class="link" href="#" ng-click="$ctrl.toggleCategoryForm()">+ Add</a></div></div><form ng-show="!$ctrl.hideCategory" novalidate ng-submit="$ctrl.submitCategory();" method="post"><div class="horizontal-align -between" id="add-category"><input type="hidden" ng-model="$ctrl.category.id"><div class="form-group"><label for="name">Name</label><input ng-model="$ctrl.category.name" class="form-control -border" placeholder="Name" type="text" name="name"></div></div><div class="action-button horizontal-align -end"><input type="submit" name="commit" value="{{ $ctrl.categoryButtonText }}" class="btn btn-create btn-md" data-disable-with="Save"></div></form><div class="categories scroll-section"><p ng-repeat="category in $ctrl.selectedGroup.categories" class="list">{{category.name}} <span class="delete ion-android-close float-xl-right" ng-click="$ctrl.removeCategory($index);"></span></p></div></div></div></div>');
$templateCache.put('./institutional-codes.html','<div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Institutional Codes <a class="button-link btn btn-create btn-sm float-lg-right" ng-click="$ctrl.showAddInstitutionalCode(true)">+ Add Institutional Codes</a></h4><button class="close" data-dismiss="modal" type="button"><span ng-click="$ctrl.showAddInstitutionalCode(false)" class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="searchbox-modal"><form><div class="searchbox-content"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="code" type="text" name="search" ng-model="$ctrl.searchCode"> <input class="form-control -borderless search" placeholder="name" type="text" name="search" ng-model="$ctrl.searchName"></div></div></form></div><form novalidate ng-submit="$ctrl.saveInstitutionalCode()" ng-if="$ctrl.addInstitutionalCode" method="post"><div class="horizontal-align -between" id="add-group"><input type="hidden" ng-model="$ctrl.institutional.id"><div class="form-group col-md-4"><label for="code">Code</label><input ng-model="$ctrl.institutionalCode.code" class="form-control -border" autofocus="autofocus" placeholder="Code" type="text" name="code"></div><div class="form-group col-md-4"><label for="name">Description</label><input ng-model="$ctrl.institutionalCode.description" class="form-control -border" placeholder="Description" type="text" name="title"></div></div><div class="action-button horizontal-align -end"><input type="submit" name="commit" value="Save" class="btn btn-create btn-md" data-disable-with="Save"></div></form><div class="wrapper scroll-section"><table class="table find-vendor"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'id\';$ctrl.sortReverse = !$ctrl.sortReverse;">ID <span ng-show="$ctrl.sortType == \'id\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i></span> <span ng-show="$ctrl.sortType == \'id\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'code\';$ctrl.sortReverse = !$ctrl.sortReverse;">Code <span ng-show="$ctrl.sortType == \'code\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'code\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'description\';$ctrl.sortReverse = !$ctrl.sortReverse;">Description <span ng-show="$ctrl.sortType == \'description\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'description\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="institutionalCode in $ctrl.institutionalCodes | filter: {code: $ctrl.searchCode} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{institutionalCode.id}}</td><td>{{institutionalCode.code}}</td><td>{{institutionalCode.description}}</td><td class="tablebutton-form"><div class="holder"><button ng-click="$ctrl.editInstitutionalCode(institutionalCode.id)" class="btn btn-compose"><i class="ion-ios-compose-outline"></i></button> <button ng-click="$ctrl.deleteInstitutionalCode(institutionalCode.id)" class="btn btn-archive"><i class="ion-android-close"></i></button></div></td></tr></tbody></table></div></div></div></div>');
$templateCache.put('./product-categories.html','<div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Product Category <a class="button-link btn btn-create btn-sm float-lg-right" ng-click="$ctrl.showAddProductCategory(true)">+ Add Product Category</a></h4><button class="close" data-dismiss="modal" type="button"><span ng-click="$ctrl.showAddProductCategory(false)" class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="searchbox-modal"><form><div class="searchbox-content"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="code" type="text" name="search" ng-model="$ctrl.searchCode"> <input class="form-control -borderless search" placeholder="name" type="text" name="search" ng-model="$ctrl.searchName"></div></div></form></div><form novalidate ng-submit="$ctrl.saveProductCategory()" ng-if="$ctrl.addProductCategory" method="post"><div class="horizontal-align -between" id="add-group"><input type="hidden" ng-model="$ctrl.productCategory.id"><div class="form-group col-md-3"><label for="code">Code</label><input ng-model="$ctrl.productCategory.code" class="form-control -border" autofocus="autofocus" placeholder="Code" type="text" name="code"></div><div class="form-group col-md-3"><label for="name">Title</label><input ng-model="$ctrl.productCategory.title" class="form-control -border" placeholder="Title" type="text" name="title"></div><div class="form-group col-md-3"><label for="name">Description</label><input ng-model="$ctrl.productCategory.description" class="form-control -border" placeholder="Description" type="text" name="title"></div><div class="form-group col-md-3"><label for="name">Division</label><select class="form-control select" ng-model="$ctrl.productCategory.productDivision.id" ng-options="d.id as d.title for d in $ctrl.divisions"></select></div></div><div class="action-button horizontal-align -end"><input type="submit" name="commit" value="Save" class="btn btn-create btn-md" data-disable-with="Save"></div></form><div class="wrapper scroll-section"><table class="table find-vendor"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'id\';$ctrl.sortReverse = !$ctrl.sortReverse;">ID <span ng-show="$ctrl.sortType == \'id\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i></span> <span ng-show="$ctrl.sortType == \'id\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'code\';$ctrl.sortReverse = !$ctrl.sortReverse;">Code <span ng-show="$ctrl.sortType == \'code\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'code\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'title\';$ctrl.sortReverse = !$ctrl.sortReverse;">Title <span ng-show="$ctrl.sortType == \'title\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'title\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'description\';$ctrl.sortReverse = !$ctrl.sortReverse;">Description <span ng-show="$ctrl.sortType == \'description\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'description\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'division\';$ctrl.sortReverse = !$ctrl.sortReverse;">Division <span ng-show="$ctrl.sortType == \'division\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'division\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="productCategory in $ctrl.productCategories | filter: {code: $ctrl.searchCode, title: $ctrl.searchName} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{productCategory.id}}</td><td>{{productCategory.code}}</td><td>{{productCategory.title}}</td><td>{{productCategory.description}}</td><td>{{productCategory.productDivision.title}}</td><td class="tablebutton-form"><div class="holder"><button ng-click="$ctrl.editProductCategory(productCategory.id)" class="btn btn-compose"><i class="ion-ios-compose-outline"></i></button> <button ng-click="$ctrl.deleteProductCategory(productCategory.id)" class="btn btn-archive"><i class="ion-android-close"></i></button></div></td></tr></tbody></table></div></div></div></div>');
$templateCache.put('./product-division-codes.html','<div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Product Division <a class="button-link btn btn-create btn-sm float-lg-right" ng-click="$ctrl.showAddProductDivisionCode(true)">+ Add Product Division</a></h4><button class="close" data-dismiss="modal" type="button"><span ng-click="$ctrl.showAddProductDivisionCode(false)" class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="searchbox-modal"><form><div class="searchbox-content"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="code" type="text" name="search" ng-model="$ctrl.searchCode"> <input class="form-control -borderless search" placeholder="name" type="text" name="search" ng-model="$ctrl.searchName"></div></div></form></div><form novalidate ng-submit="$ctrl.saveProductDivisionCode()" ng-if="$ctrl.addProductDivisionCode" method="post"><div class="horizontal-align -between" id="add-group"><input type="hidden" ng-model="$ctrl.productDivision.id"><div class="form-group col-md-4"><label for="code">Code</label><input ng-model="$ctrl.productDivisionCode.code" class="form-control -border" autofocus="autofocus" placeholder="Code" type="text" name="code"></div><div class="form-group col-md-4"><label for="name">Title</label><input ng-model="$ctrl.productDivisionCode.title" class="form-control -border" placeholder="Title" type="text" name="title"></div><div class="form-group col-md-4"><label for="name">Description</label><input ng-model="$ctrl.productDivisionCode.description" class="form-control -border" placeholder="Description" type="text" name="title"></div></div><div class="action-button horizontal-align -end"><input type="submit" name="commit" value="Save" class="btn btn-create btn-md" data-disable-with="Save"></div></form><div class="wrapper scroll-section"><table class="table find-vendor"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'id\';$ctrl.sortReverse = !$ctrl.sortReverse;">ID <span ng-show="$ctrl.sortType == \'id\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i></span> <span ng-show="$ctrl.sortType == \'id\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'code\';$ctrl.sortReverse = !$ctrl.sortReverse;">Code <span ng-show="$ctrl.sortType == \'code\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'code\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'title\';$ctrl.sortReverse = !$ctrl.sortReverse;">Title <span ng-show="$ctrl.sortType == \'title\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'title\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'description\';$ctrl.sortReverse = !$ctrl.sortReverse;">Description <span ng-show="$ctrl.sortType == \'description\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'description\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="productDivisionCode in $ctrl.productDivisionCodes | filter: {code: $ctrl.searchCode, title: $ctrl.searchName} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{productDivisionCode.id}}</td><td>{{productDivisionCode.code}}</td><td>{{productDivisionCode.title}}</td><td>{{productDivisionCode.description}}</td><td class="tablebutton-form"><div class="holder"><button ng-click="$ctrl.editProductDivisionCode(productDivisionCode.id)" class="btn btn-compose"><i class="ion-ios-compose-outline"></i></button> <button ng-click="$ctrl.deleteProductDivisionCode(productDivisionCode.id)" class="btn btn-archive"><i class="ion-android-close"></i></button></div></td></tr></tbody></table></div></div></div></div>');
$templateCache.put('./province-codes.html','<div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-area">Find Province Codes <a class="button-link btn btn-create btn-sm float-lg-right" ng-click="$ctrl.showAddProvinceCode(true)">+ Add Province Codes</a></h4><button class="close" data-dismiss="modal" type="button"><span ng-click="$ctrl.showAddProvinceCode(false)" class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="searchbox-modal"><form><div class="searchbox-content"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="code" type="text" name="search" ng-model="$ctrl.searchCode"> <input class="form-control -borderless search" placeholder="name" type="text" name="search" ng-model="$ctrl.searchName"></div></div></form></div><form novalidate ng-submit="$ctrl.saveProvinceCode()" ng-if="$ctrl.addProvinceCode" method="post"><div class="horizontal-align -between" id="add-group"><input type="hidden" ng-model="$ctrl.province.id"><div class="form-group col-md-4"><label for="code">Code</label><input ng-model="$ctrl.provinceCode.code" class="form-control -border" autofocus="autofocus" placeholder="Code" type="text" name="code"></div><div class="form-group col-md-4"><label for="name">Title</label><input ng-model="$ctrl.provinceCode.area" class="form-control -border" placeholder="Title" type="text" name="area"></div><div class="form-group col-md-4"><label for="name">Description</label><input ng-model="$ctrl.provinceCode.description" class="form-control -border" placeholder="Description" type="text" name="area"></div></div><div class="action-button horizontal-align -end"><input type="submit" name="commit" value="Save" class="btn btn-create btn-md" data-disable-with="Save"></div></form><div class="wrapper scroll-section"><table class="table find-vendor"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'id\';$ctrl.sortReverse = !$ctrl.sortReverse;">ID <span ng-show="$ctrl.sortType == \'id\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i></span> <span ng-show="$ctrl.sortType == \'id\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'code\';$ctrl.sortReverse = !$ctrl.sortReverse;">Code <span ng-show="$ctrl.sortType == \'code\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'code\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'area\';$ctrl.sortReverse = !$ctrl.sortReverse;">Area <span ng-show="$ctrl.sortType == \'area\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'area\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'description\';$ctrl.sortReverse = !$ctrl.sortReverse;">Description <span ng-show="$ctrl.sortType == \'description\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'description\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="provinceCode in $ctrl.provinceCodes | filter: {code: $ctrl.searchCode, area: $ctrl.searchName} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{provinceCode.id}}</td><td>{{provinceCode.code}}</td><td>{{provinceCode.area}}</td><td>{{provinceCode.description}}</td><td class="tablebutton-form"><div class="holder"><button ng-click="$ctrl.editProvinceCode(provinceCode.id)" class="btn btn-compose"><i class="ion-ios-compose-outline"></i></button> <button ng-click="$ctrl.deleteProvinceCode(provinceCode.id)" class="btn btn-archive"><i class="ion-android-close"></i></button></div></td></tr></tbody></table></div></div></div></div>');
$templateCache.put('./region-codes.html','<div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-area">Find Region Codes <a class="button-link btn btn-create btn-sm float-lg-right" ng-click="$ctrl.showAddRegionCode(true)">+ Add Region Codes</a></h4><button class="close" data-dismiss="modal" type="button"><span ng-click="$ctrl.showAddRegionCode(false)" class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="searchbox-modal"><form><div class="searchbox-content"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="code" type="text" name="search" ng-model="$ctrl.searchCode"> <input class="form-control -borderless search" placeholder="name" type="text" name="search" ng-model="$ctrl.searchName"></div></div></form></div><form novalidate ng-submit="$ctrl.saveRegionCode()" ng-if="$ctrl.addRegionCode" method="post"><div class="horizontal-align -between" id="add-group"><input type="hidden" ng-model="$ctrl.region.id"><div class="form-group col-md-4"><label for="code">Code</label><input ng-model="$ctrl.regionCode.code" class="form-control -border" autofocus="autofocus" placeholder="Code" type="text" name="code"></div><div class="form-group col-md-4"><label for="name">Title</label><input ng-model="$ctrl.regionCode.area" class="form-control -border" placeholder="Title" type="text" name="area"></div><div class="form-group col-md-4"><label for="name">Description</label><input ng-model="$ctrl.regionCode.description" class="form-control -border" placeholder="Description" type="text" name="area"></div></div><div class="action-button horizontal-align -end"><input type="submit" name="commit" value="Save" class="btn btn-create btn-md" data-disable-with="Save"></div></form><div class="wrapper scroll-section"><table class="table find-vendor"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'id\';$ctrl.sortReverse = !$ctrl.sortReverse;">ID <span ng-show="$ctrl.sortType == \'id\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i></span> <span ng-show="$ctrl.sortType == \'id\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'code\';$ctrl.sortReverse = !$ctrl.sortReverse;">Code <span ng-show="$ctrl.sortType == \'code\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'code\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'area\';$ctrl.sortReverse = !$ctrl.sortReverse;">Area <span ng-show="$ctrl.sortType == \'area\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'area\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'description\';$ctrl.sortReverse = !$ctrl.sortReverse;">Description <span ng-show="$ctrl.sortType == \'description\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'description\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="regionCode in $ctrl.regionCodes | filter: {code: $ctrl.searchCode, area: $ctrl.searchName} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{regionCode.id}}</td><td>{{regionCode.code}}</td><td>{{regionCode.area}}</td><td>{{regionCode.description}}</td><td class="tablebutton-form"><div class="holder"><button ng-click="$ctrl.editRegionCode(regionCode.id)" class="btn btn-compose"><i class="ion-ios-compose-outline"></i></button> <button ng-click="$ctrl.deleteRegionCode(regionCode.id)" class="btn btn-archive"><i class="ion-android-close"></i></button></div></td></tr></tbody></table></div></div></div></div>');
$templateCache.put('./sales-reps.html','<div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-area">Find Sales Reps <a class="button-link btn btn-create btn-sm float-lg-right" ng-click="$ctrl.showAddSalesRep(true)">+ Add Sales Reps</a></h4><button class="close" data-dismiss="modal" type="button"><span ng-click="$ctrl.showAddSalesRep(false)" class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="searchbox-modal"><form><div class="searchbox-content"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="code" type="text" name="search" ng-model="$ctrl.searchCode"> <input class="form-control -borderless search" placeholder="name" type="text" name="search" ng-model="$ctrl.searchName"></div></div></form></div><form novalidate ng-submit="$ctrl.saveSalesRep()" ng-if="$ctrl.addSalesRep" method="post"><div class="horizontal-align -between" id="add-group"><input type="hidden" ng-model="$ctrl.salesRep.id"><div class="form-group col-md-3"><label for="code">Code</label><input ng-model="$ctrl.salesRep.code" class="form-control -border" autofocus="autofocus" placeholder="Code" type="text" name="code"></div><div class="form-group col-md-3"><label for="name">Name</label><input ng-model="$ctrl.salesRep.name" class="form-control -border" placeholder="Title" type="text" name="area"></div><div class="form-group col-md-3"><label for="type">Region Codes</label><select class="form-control select -border" ng-model="$ctrl.salesRep.regionCode" ng-options="a as a.code for a in $ctrl.regionCodes" name="regionCodes"></select></div><div class="form-group col-md-3"><label for="type">Prod Category</label><select class="form-control select -border" ng-model="$ctrl.salesRep.productCategory" ng-options="a as a.name for a in $ctrl.productCategories" name="productCategory"></select></div></div><div class="action-button horizontal-align -end"><input type="submit" name="commit" value="Save" class="btn btn-create btn-md" data-disable-with="Save"></div></form><div class="wrapper scroll-section"><table class="table find-vendor"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'id\';$ctrl.sortReverse = !$ctrl.sortReverse;">ID <span ng-show="$ctrl.sortType == \'id\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i></span> <span ng-show="$ctrl.sortType == \'id\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'code\';$ctrl.sortReverse = !$ctrl.sortReverse;">Code <span ng-show="$ctrl.sortType == \'code\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'code\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'name\';$ctrl.sortReverse = !$ctrl.sortReverse;">Name <span ng-show="$ctrl.sortType == \'name\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'name\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'regionCode\';$ctrl.sortReverse = !$ctrl.sortReverse;">Region Code <span ng-show="$ctrl.sortType == \'regionCode\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'regionCode\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'prodCategoryCode\';$ctrl.sortReverse = !$ctrl.sortReverse;">Prod Category <span ng-show="$ctrl.sortType == \'prodCategoryCode\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'prodCategoryCode\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="salesRep in $ctrl.salesReps | filter: {code: $ctrl.searchCode, name: $ctrl.searchName} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{salesRep.id}}</td><td>{{salesRep.code}}</td><td>{{salesRep.name}}</td><td>{{salesRep.regionCode.code}}</td><td>{{salesRep.productCategory.name}}</td><td class="tablebutton-form"><div class="holder"><button ng-click="$ctrl.editSalesRep(salesRep.id)" class="btn btn-compose"><i class="ion-ios-compose-outline"></i></button> <button ng-click="$ctrl.deleteSalesRep(salesRep.id)" class="btn btn-archive"><i class="ion-android-close"></i></button></div></td></tr></tbody></table></div></div></div></div>');
$templateCache.put('./account-codes.html','<div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Account Codes <a class="button-link btn btn-create btn-sm float-lg-right" ng-click="$ctrl.showAddAccountCode(true)">+ Add Account Codes</a></h4><button class="close" data-dismiss="modal" type="button"><span ng-click="$ctrl.showAddAccountCode(false)" class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="searchbox-modal"><form><div class="searchbox-content"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="code" type="text" name="search" ng-model="$ctrl.searchCode"> <input class="form-control -borderless search" placeholder="name" type="text" name="search" ng-model="$ctrl.searchName"></div></div></form></div><form novalidate ng-submit="$ctrl.saveAccountCode()" ng-if="$ctrl.addAccountCode" method="post"><div class="horizontal-align -between" id="add-group"><input type="hidden" ng-model="$ctrl.account.id"><div class="form-group col-md-4"><label for="code">Code</label><input ng-model="$ctrl.accountCode.code" class="form-control -border" autofocus="autofocus" placeholder="Code" type="text" name="code"></div><div class="form-group col-md-4"><label for="name">Description</label><input ng-model="$ctrl.accountCode.description" class="form-control -border" placeholder="Description" type="text" name="title"></div></div><div class="action-button horizontal-align -end"><input type="submit" name="commit" value="Save" class="btn btn-create btn-md" data-disable-with="Save"></div></form><div class="wrapper scroll-section"><table class="table find-vendor"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'id\';$ctrl.sortReverse = !$ctrl.sortReverse;">ID <span ng-show="$ctrl.sortType == \'id\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i></span> <span ng-show="$ctrl.sortType == \'id\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'code\';$ctrl.sortReverse = !$ctrl.sortReverse;">Code <span ng-show="$ctrl.sortType == \'code\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'code\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'description\';$ctrl.sortReverse = !$ctrl.sortReverse;">Description <span ng-show="$ctrl.sortType == \'description\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'description\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="accountCode in $ctrl.accountCodes | filter: {code: $ctrl.searchCode} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{accountCode.id}}</td><td>{{accountCode.code}}</td><td>{{accountCode.description}}</td><td class="tablebutton-form"><div class="holder"><button ng-click="$ctrl.editAccountCode(accountCode.id)" class="btn btn-compose"><i class="ion-ios-compose-outline"></i></button> <button ng-click="$ctrl.deleteAccountCode(accountCode.id)" class="btn btn-archive"><i class="ion-android-close"></i></button></div></td></tr></tbody></table></div></div></div></div>');
$templateCache.put('./zip-codes.html','<div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-area">Find Zip Codes <a class="button-link btn btn-create btn-sm float-lg-right" ng-click="$ctrl.showAddZipCode(true)">+ Add Zip Codes</a></h4><button class="close" data-dismiss="modal" type="button"><span ng-click="$ctrl.showAddZipCode(false)" class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="searchbox-modal"><form><div class="searchbox-content"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0 !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="code" type="text" name="search" ng-model="$ctrl.searchCode"> <input class="form-control -borderless search" placeholder="name" type="text" name="search" ng-model="$ctrl.searchName"></div></div></form></div><form novalidate ng-submit="$ctrl.saveZipCode()" ng-if="$ctrl.addZipCode" method="post"><div class="horizontal-align -between" id="add-group"><input type="hidden" ng-model="$ctrl.zipCode.id"><div class="form-group col-md-3"><label for="code">Code</label><input ng-model="$ctrl.zipCode.code" class="form-control -border" autofocus="autofocus" placeholder="Code" type="text" name="code"></div><div class="form-group col-md-3"><label for="name">Description</label><input ng-model="$ctrl.zipCode.description" class="form-control -border" placeholder="Title" type="text" name="description"></div><div class="form-group col-md-3"><label for="type">Region Codes</label><select class="form-control select -border" ng-model="$ctrl.zipCode.regionCode" ng-options="a as a.code for a in $ctrl.regionCodes" name="regionCodes"></select></div><div class="form-group col-md-3"><label for="type">Province Code</label><select class="form-control select -border" ng-model="$ctrl.zipCode.provinceCode" ng-options="a as a.code for a in $ctrl.provinceCodes" name="productCategory"></select></div></div><div class="action-button horizontal-align -end"><input type="submit" name="commit" value="Save" class="btn btn-create btn-md" data-disable-with="Save"></div></form><div class="wrapper scroll-section"><table class="table find-vendor"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'code\';$ctrl.sortReverse = !$ctrl.sortReverse;">Code <span ng-show="$ctrl.sortType == \'code\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'code\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'description\';$ctrl.sortReverse = !$ctrl.sortReverse;">Description <span ng-show="$ctrl.sortType == \'description\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'description\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'regionCode\';$ctrl.sortReverse = !$ctrl.sortReverse;">Region Code <span ng-show="$ctrl.sortType == \'regionCode\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'regionCode\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'provinceCode\';$ctrl.sortReverse = !$ctrl.sortReverse;">Province Code <span ng-show="$ctrl.sortType == \'provinceCode\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'provinceCode\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="zipCode in $ctrl.zipCodes | filter: {code: $ctrl.searchCode, description: $ctrl.searchName} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{zipCode.code}}</td><td>{{zipCode.description}}</td><td>{{zipCode.regionCode.code}}</td><td>{{zipCode.provinceCode.code}}</td><td class="tablebutton-form"><div class="holder"><button ng-click="$ctrl.editZipCode(zipCode.id)" class="btn btn-compose"><i class="ion-ios-compose-outline"></i></button> <button ng-click="$ctrl.deleteZipCode(zipCode.id)" class="btn btn-archive"><i class="ion-android-close"></i></button></div></td></tr></tbody></table></div></div></div></div>');
$templateCache.put('./account-summary-report.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Account Summary Reports</h3></div></div><div class="client-pris"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" date="dd-MM-yyyy" placeholder="Start Date" type="date" name="search" ng-model="$ctrl.startDate"> <input class="form-control -borderless search" date="dd-MM-yyyy" placeholder="End Date" type="date" name="search" ng-model="$ctrl.endDate"></div></div><table class="table table-list"><thead><tr><th>Type</th><th>Action</th></tr></thead><tbody><tr><td>JV</td><td><button class="btn btn-compose" ng-click="$ctrl.exportJV()" class="btn btn-show"><i class="ion-ios-download"></i></button> <a class="btn btn-compose" href="/admin/shared/print-account-summary-report/jv/start/{{$ctrl.startDate}}/end/{{$ctrl.endDate}}" class="btn btn-show"><i class="ion-ios-printer"></i></a></td></tr><tr><td>PJV</td><td><button class="btn btn-compose" ng-click="$ctrl.exportPJV()" class="btn btn-show"><i class="ion-ios-download"></i></button> <a class="btn btn-compose" href="/admin/shared/print-account-summary-report/pjv/start/{{$ctrl.startDate}}/end/{{$ctrl.endDate}}" class="btn btn-show"><i class="ion-ios-printer"></i></a></td></tr><tr><td>CDV</td><td><button class="btn btn-compose" ng-click="$ctrl.printCDV()" class="btn btn-show"><i class="ion-ios-printer"></i></button></td></tr><tr><td>VP</td><td><button class="btn btn-compose" ng-click="$ctrl.exportVP()" class="btn btn-show"><i class="ion-ios-download"></i></button> <a class="btn btn-compose" href="/admin/shared/print-account-summary-report/vp/start/{{$ctrl.startDate}}/end/{{$ctrl.endDate}}" class="btn btn-show"><i class="ion-ios-printer"></i></a></td></tr><tr><td>CM/DM</td><td><button class="btn btn-compose" ng-click="$ctrl.exportCMDM()" class="btn btn-show"><i class="ion-ios-download"></i></button> <a class="btn btn-compose" href="/admin/shared/print-account-summary-report/vp/start/{{$ctrl.startDate}}/end/{{$ctrl.endDate}}" class="btn btn-show"><i class="ion-ios-printer"></i></a></td></tr></tbody></table>');
$templateCache.put('./depot-inventory.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Depot Inventory<h3></h3></h3></div><a ng-click="$ctrl.exportReport()" class="btn btn-warning btn-md button-link">Export</a> <a href="/admin/shared/print-fg-report/{{$ctrl.userAssignedDepot.id}}" class="btn btn-primary btn-md button-link">Generate Report</a></div><div class="evaluation-content"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="Item code" type="text" name="search" ng-model="$ctrl.searchNumber"></div><div class="search-box horizontal-align -between"><select class="form-control select" ng-model="$ctrl.userAssignedDepot.id" ng-change="$ctrl.selectDepot()" ng-options="d.id as d.name for d in $ctrl.userAssignedDepots" name="fromDepots"></select></div><table class="table table-list"><thead><tr><th>Code</th><th>FG</th><th>Quantity</th><th>Unit(SMALL/BIG)</th><th>Stock Card</th></tr></thead><tbody><tr ng-repeat="depotInventoryItem in $ctrl.depotInventoryList"><td>{{depotInventoryItem[\'product\'].finishedGood.code}}</td><td>{{depotInventoryItem[\'product\'].finishedGood.name}}</td><td>{{depotInventoryItem[\'sum\']}}</td><td>{{depotInventoryItem[\'product\'].smallUnit.code}} / {{depotInventoryItem[\'product\'].bigUnit.code}}</td><td><button type="button" class="btn btn-info" data-target="#viewDepotInventoryModal" data-toggle="modal" ng-click="$ctrl.openModal(depotInventoryItem)">View</button></td></tr></tbody></table></div><view-stock-card-modal stockcards="$ctrl.stockCards" item="$ctrl.finishedGood"></view-stock-card-modal><div class="modal fade" id="viewDepotInventoryModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">View</h4><button data-dismiss="modal" class="close"><span class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="horizontal-align -between modal-information"><p class="title">FG Code: <span class="content">{{$ctrl.finishedGood.code}}</span></p><p class="title">Name: <span class="content">{{$ctrl.finishedGood.name}}</span></p></div><div class="wrapper scroll-section"><table class="table table-list"><thead><tr><th>Lot #</th><th>Expiry</th><th>Quantity</th><th></th></tr></thead><tbody><tr ng-repeat="depotInventory in $ctrl.productList"><td>{{depotInventory.product.lotNumber}}</td><td>{{depotInventory.product.expiration | date}}</td><td>{{depotInventory.quantity}}</td><td><button type="button" class="btn btn-info" data-target="#stockCardModal" data-toggle="modal" ng-click="$ctrl.openStockCard(depotInventory)">View</button></td></tr></tbody></table></div></div><div class="modal-footer"><button class="btn btn-cancel" data-dismiss="modal">Close</button></div></div></div></div>');
$templateCache.put('./delivery-receipts.html','<!DOCTYPE html><html><head><meta charset="UTF-8"><title>Insert title here</title></head><body></body></html>');
$templateCache.put('./engineering-inventory.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Engineering Inventory<h3></h3></h3></div></div><div class="evaluation-content"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="Item code" type="text" name="search" ng-model="$ctrl.searchNumber"></div><table class="table table-list"><thead><tr><th>Code</th><th>Item</th><th>Quantity</th><th>Unit</th><th>Stock Card</th></tr></thead><tbody><tr ng-repeat="inventoryItem in $ctrl.inventoryList"><td>{{inventoryItem.item.code}}</td><td>{{inventoryItem.item.name}}</td><td>{{inventoryItem.quantity}}</td><td>{{inventoryItem.item.unit.code}}</td><td><button type="button" class="btn btn-info" data-target="#stockCardM\r\nodal" data-toggle="modal" ng-click="$ctrl.openStockCard(inventoryItem)">View</button></td></tr></tbody></table></div><view-stock-card-modal stockcards="$ctrl.stockCards" item="$ctrl.item"></view-stock-card-modal>');
$templateCache.put('./engineering-items.html','<div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Item <a class="button-link btn btn-create btn-sm float-lg-right" ng-click="$ctrl.showAddItem(true)">+ Add Item</a></h4><button class="close" data-dismiss="modal" type="button"><span ng-click="$ctrl.showAddItem(false)" class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="searchbox-modal"><form><div class="searchbox-content"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="code" type="text" name="search" ng-model="$ctrl.searchCode"> <input class="form-control -borderless search" placeholder="name" type="text" name="search" ng-model="$ctrl.searchName"></div></div></form></div><item-form ng-show="$ctrl.addItem" item="$ctrl.item" message="{{ $ctrl.error }}" button="Save" on-submit="$ctrl.saveItem($event);"></item-form><div class="wrapper scroll-section"><table class="table find-vendor"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'id\';$ctrl.sortReverse = !$ctrl.sortReverse;">ID <span ng-show="$ctrl.sortType == \'id\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i></span> <span ng-show="$ctrl.sortType == \'id\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'code\';$ctrl.sortReverse = !$ctrl.sortReverse;">Code <span ng-show="$ctrl.sortType == \'code\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'code\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'name\';$ctrl.sortReverse = !$ctrl.sortReverse;">Name <span ng-show="$ctrl.sortType == \'name\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'name\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'type.code\';$ctrl.sortReverse = !$ctrl.sortReverse;">Type <span ng-show="$ctrl.sortType == \'type.code\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'type.code\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'unit\';$ctrl.sortReverse = !$ctrl.sortReverse;">Unit <span ng-show="$ctrl.sortType == \'unit\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'unit\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="item in $ctrl.items | filter: {code: $ctrl.searchCode, name: $ctrl.searchName} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{item.id}}</td><td>{{item.code}}</td><td>{{item.name}}</td><td>{{item.type.code}}</td><td>{{item.unit.code}}</td><td class="tablebutton-form"><div class="holder"><button ng-click="$ctrl.editItem(item.id)" class="btn btn-compose"><i class="ion-ios-compose-outline"></i></button> <button ng-click="$ctrl.deleteItem(item.id)" class="btn btn-archive"><i class="ion-android-close"></i></button></div></td></tr></tbody></table></div></div></div></div>');
$templateCache.put('./inventory.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Inventory<h3></h3></h3></div></div><div class="evaluation-content"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="Item code" type="text" name="search" ng-model="$ctrl.searchNumber"></div><table class="table table-list"><thead><tr><th>Code</th><th>Item</th><th>Quantity</th><th>Unit</th><th>Stock Card</th></tr></thead><tbody><tr ng-repeat="inventoryItem in $ctrl.inventoryList"><td>{{inventoryItem[1].code}}</td><td>{{inventoryItem[1].name}}</td><td>{{inventoryItem[0]}}</td><td>{{inventoryItem[1].unit.code}}</td><td><button type="button" class="btn btn-info" data-target="#viewInventoryModal" data-toggle="modal" ng-click="$ctrl.openModal(inventoryItem)">View</button></td></tr></tbody></table></div><view-stock-card-modal stockcards="$ctrl.stockCards" item="$ctrl.item"></view-stock-card-modal><div class="modal fade" id="viewInventoryModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">View</h4><button data-dismiss="modal" class="close"><span class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="horizontal-align -between modal-information"><p class="title">Item Code: <span class="content">{{$ctrl.item.code}}</span></p><p class="title">Name: <span class="content">{{$ctrl.item.name}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Unit: <span class="content">{{$ctrl.item.unit.code}}</span></p><p class="title">Type: <span class="content">{{$ctrl.item.type.name}}</span></p></div><div class="wrapper scroll-section"><table class="table table-list"><thead><tr><th>Control #</th><th>Expiry</th><th>Quantity</th><th></th></tr></thead><tbody><tr ng-repeat="inventory in $ctrl.controlList"><td>{{inventory.controlNumber}}</td><td>{{inventory.expiration | date}}</td><td>{{inventory.quantity}}</td><td><button type="button" class="btn btn-info" data-target="#stockCardModal" data-toggle="modal" ng-click="$ctrl.openStockCard(inventory)">View</button></td></tr></tbody></table></div></div><div class="modal-footer"><button class="btn btn-cancel" data-dismiss="modal">Close</button></div></div></div></div>');
$templateCache.put('./product-inventory.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Product Inventory<h3></h3></h3></div></div><div class="evaluation-content"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="Item code" type="text" name="search" ng-model="$ctrl.searchNumber"></div><table class="table table-list"><thead><tr><th>Code</th><th>FG</th><th>Quantity</th><th>Unit(SMALL/BIG)</th><th>Stock Card</th></tr></thead><tbody><tr ng-repeat="productInventoryItem in $ctrl.productInventoryList"><td>{{productInventoryItem[\'product\'].finishedGood.code}}</td><td>{{productInventoryItem[\'product\'].finishedGood.name}}</td><td>{{productInventoryItem[\'sum\']}}</td><td>{{productInventoryItem[\'product\'].smallUnit.code}} / {{productInventoryItem[\'product\'].bigUnit.code}}</td><td><button type="button" class="btn btn-info" data-target="#viewProductInventoryModal" data-toggle="modal" ng-click="$ctrl.openModal(productInventoryItem)">View</button></td></tr></tbody></table></div><view-stock-card-modal stockcards="$ctrl.stockCards" item="$ctrl.finishedGood"></view-stock-card-modal><div class="modal fade" id="viewProductInventoryModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">View</h4><button data-dismiss="modal" class="close"><span class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="horizontal-align -between modal-information"><p class="title">FG Code: <span class="content">{{$ctrl.finishedGood.code}}</span></p><p class="title">Name: <span class="content">{{$ctrl.finishedGood.name}}</span></p></div><div class="wrapper scroll-section"><table class="table table-list"><thead><tr><th>Lot #</th><th>Expiry</th><th>Quantity</th><th></th></tr></thead><tbody><tr ng-repeat="productInventory in $ctrl.productList"><td>{{productInventory.product.lotNumber}}</td><td>{{productInventory.product.expiration | date}}</td><td>{{productInventory.quantity}}</td><td><button type="button" class="btn btn-info" data-target="#stockCardModal" data-toggle="modal" ng-click="$ctrl.openStockCard(productInventory)">View</button></td></tr></tbody></table></div></div><div class="modal-footer"><button class="btn btn-cancel" data-dismiss="modal">Close</button></div></div></div></div>');
$templateCache.put('./sales-reports.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Sales Reports</h3></div></div><div class="client-pris"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" date="dd-MM-yyyy" placeholder="Start Date" type="date" name="search" ng-model="$ctrl.startDate"> <input class="form-control -borderless search" date="dd-MM-yyyy" placeholder="End Date" type="date" name="search" ng-model="$ctrl.endDate"></div><div class="search-box horizontal-align -between"><select class="form-control select" ng-model="$ctrl.userAssignedDepot.id" ng-change="$ctrl.selectDepot()" ng-options="d.id as d.name for d in $ctrl.userAssignedDepots" name="fromDepots"></select></div></div><b>General Sales Report</b><table class="table table-list"><thead><tr><th>SR Code</th><th>Division</th><th>Category</th></tr></thead><tbody><tr><td><select class="form-control select" ng-model="$ctrl.salesRep.id" ng-options="d.id as d.name for d in $ctrl.salesReps"></select></td><td>ALL</td><td>ALL</td><td><button class="btn btn-compose" ng-click="$ctrl.generateGeneralSalesReport()" class="btn btn-show"><i class="ion-ios-download"></i></button></td></tr></tbody><tfoot><tr><th>TOTAL AMOUNT:</th><th>{{$ctrl.gsrAmount}}</th><th>TOTAL QUANTITY:</th><th>{{$ctrl.gsrQuantity}}</th></tr></tfoot></table><b>Sales Rep Client Report</b><table class="table table-list"><tr><th>Sales Rep Code</th><th></th></tr><tr><td><select class="form-control select" ng-model="$ctrl.salesRepId" ng-options="d.id as d.name for d in $ctrl.salesReps"></select></td><td><a class="btn btn-compose" href="/admin/shared/sales-rep-client-report/sales-rep/{{$ctrl.salesRepId}}" class="btn btn-show"><i class="ion-ios-printer"></i></a></td></tr></table><b>Item Sales Report (By Product)</b><table class="table table-list"><tr><th>Code</th><th></th></tr><tr><td><select class="form-control select" ng-model="$ctrl.item.id" ng-options="d.id as d.finishedGood.name for d in $ctrl.items"></select></td><td><button class="btn btn-compose" ng-click="$ctrl.generateItemSalesReport()" class="btn btn-show"><i class="ion-ios-download"></i></button> <a class="btn btn-compose" href="/admin/shared/item-sales-report/depot/{{$ctrl.userAssignedDepot.id}}/start/{{$ctrl.startDate}}/end/{{$ctrl.endDate}}/item/{{$ctrl.item.id}}" class="btn btn-show"><i class="ion-ios-printer"></i></a></td></tr><tfoot><tr><th>TOTAL AMOUNT:</th><th>{{$ctrl.itemAmount}}</th><th>TOTAL QUANTITY:</th><th>{{$ctrl.itemQuantity}}</th></tr></tfoot></table><b>Item Sales Report (By Category/Division)</b><table class="table table-list"><tr><th>Division</th><th>Category</th><th></th></tr><tr><td><select class="form-control select" ng-model="$ctrl.division.id" ng-options="d.id as d.title for d in $ctrl.divisions"></select></td><td><select class="form-control select" ng-model="$ctrl.category.id" ng-options="d.id as d.title for d in $ctrl.categories"></select></td><td><button class="btn btn-compose" ng-click="$ctrl.generateItemSalesReportByCategory()" class="btn btn-show"><i class="ion-ios-download"></i></button> <a class="btn btn-compose" href="/admin/shared/item-sales-report/{{$ctrl.salesRepId}}" class="btn btn-show"><i class="ion-ios-printer"></i></a></td></tr><tfoot><tr><th>TOTAL AMOUNT:</th><th>{{$ctrl.itemAmount2}}</th><th>TOTAL QUANTITY:</th><th>{{$ctrl.itemQuantity2}}</th></tr></tfoot></table>');
$templateCache.put('./mo.html','<div class="admin-header"><div class="title horizontal-align -between"><h4 class="bg">Manufacturing Order</h4></div><hr class="devider"></div><div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Manufacturing Order</h3></div><a href="/admin/rnd/mo/multi-test" class="btn btn-warning btn-md button-link">Multi-test</a> <a href="/admin/rnd/mo/new" class="btn btn-create btn-md button-link">Create Pre-Manufacturing Order</a></div><div class="search-box horizontal-align -between"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="id" type="text" name="search" ng-model="$ctrl.searchId"> <input class="form-control -borderless search" placeholder="moNumber" type="text" name="search" ng-model="$ctrl.searchMoNumber"> <input class="form-control -borderless search" placeholder="lotNumber" type="text" name="search" ng-model="$ctrl.searchLotNumber"></div></div><table ng-if="$ctrl.moList" class="table table-list"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'id\';$ctrl.sortReverse = !$ctrl.sortReverse;">Pre-MO # <span ng-show="$ctrl.sortType == \'id\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'id\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'moNumber\';$ctrl.sortReverse = !$ctrl.sortReverse;">MO # <span ng-show="$ctrl.sortType == \'moNumber\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'moNumber\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'lotNumber\';$ctrl.sortReverse = !$ctrl.sortReverse;">Lot # <span ng-show="$ctrl.sortType == \'lotNumber\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'lotNumber\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th>Name</th><th>Batch Size</th><th>Date Created</th><th></th></tr></thead><tbody><tr ng-repeat="mo in $ctrl.moList | filter: {id: $ctrl.searchId, moNumber: $ctrl.searchMoNumber, lotNumber:$ctrl.searchLotNumber}| orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{mo.id}}</td><td>{{mo.moNumber || \'N/A\'}}</td><td>{{mo.lotNumber || \'N/A\'}}</td><td>{{mo.moName}}</td><td>{{mo.batchSize}}</td><td>{{mo.dateCreated | date}}</td><td><i class="ion-ios-compose-outline" ng-click="$ctrl.view(mo.id)"></i> <a href="#" ng-if="!mo.moNumber" ng-click="$ctrl.manufactureOrder(mo);" class="btn btn-create btn-md button-link">Manufacture Order</a></td></tr></tbody></table><view-product-modal product="$ctrl.product"></view-product-modal><div class="clear-float"></div>');
$templateCache.put('./pp.html','<div class="admin-header"><div class="title horizontal-align -between"><h4 class="bg">Packaging Process</h4></div><hr class="devider"></div><div class="mmd-content"><company-nav></company-nav><a href="/admin/rnd/pp/new"><div class="mmd-card"><i class="icon ion-ios-paper-outline"><span class="caption">Create PP</span></i></div></a></div><div class="clear-float"></div>');
$templateCache.put('./user-edit.html','<div class="action-link"><a class="link" href="/admin/users">USERS</a> <span class="devider">/</span> <a class="link" href="/admin/users/edit">EDIT USER</a></div><div class="user-panel"><div class="content horizontal-align -between"><label class="caption">EDIT USER</label><header><a class="btn btn-back back" id="btn-back-action" href="/admin/users"><i class="ion-ios-arrow-thin-left"></i> <span>Cancel</span></a></header></div><hr class="devider"><user-form user="$ctrl.user" permissions="$ctrl.permissions" companies="$ctrl.companies" departments="$ctrl.departments" message="{{ $ctrl.error }}" button="Edit user" on-submit="$ctrl.editUser($event);"></user-form></div>');
$templateCache.put('./user-new.html','<div class="action-link"><a class="link" href="/admin/users">USERS</a> <span class="devider">/</span> <a class="link" href="/admin/users/new">ADD NEW USER</a></div><div class="user-panel"><div class="content horizontal-align -between"><label class="caption">CREATE NEW USER</label><header><a class="btn btn-back back" id="btn-back-action" href="/admin/users"><i class="ion-ios-arrow-thin-left"></i> <span>Cancel</span></a></header></div><hr class="devider"><user-form user="$ctrl.user" permissions="$ctrl.permissions" companies="$ctrl.companies" departments="$ctrl.departments" message="{{ $ctrl.error }}" button="Create user" on-submit="$ctrl.createUser($event);"></user-form></div>');
$templateCache.put('./users.html','<company-nav></company-nav><div class="total-accounts horizontal-align -end"><p class="count">{{ $ctrl.totalAccounts }} accounts</p><div id="btn-create-account" class="button_to" ng-click="$ctrl.createNewUser($event);"><input class="btn btn-create btn-md" type="button" value="Create New Account"></div></div><div class="user-list" ng-repeat="department in $ctrl.departments"><p class="group">{{department.name}}</p><hr class="devider"><div class="user-accounts"><div class="account-card" ng-repeat="user in $ctrl.users" ng-if="user.department.id == department.id"><span class="name"><i class="icon ion-person"></i> {{ user.firstName }} {{ user.lastName }} </span><span class="account-type horizontal-align -between"><label class="type">{{ department.name }} account</label><span class="icon ion-ios-gear-outline" ng-click="$ctrl.goToEdit(user.id)"></span></span></div></div><div class="clear-float"></div></div>');
$templateCache.put('./user-form.html','<form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="horizontal-align -between" id="name-group"><div class="form-group"><label for="first_name">First name</label><input class="form-control -border" ng-model="$ctrl.user.firstName" autofocus="autofocus" placeholder="First name" type="text" name="first_name"></div><div class="form-group"><label for="last_name">Last name</label><input class="form-control -border" ng-model="$ctrl.user.lastName" placeholder="Last name" type="text" name="last_name"></div><div class="form-group initial"><label class="middle" for="M.I">M.i</label><input class="form-control -border" placeholder="MI" ng-model="$ctrl.user.middleInitial" type="text" name="middle_initial"></div></div><div class="horizontal-align -between" id="security-group"><div class="form-group"><label for="email">Email</label><input class="form-control -border" placeholder="Email address" ng-model="$ctrl.user.email" type="email" name="email"></div><div class="form-group"><label for="password">Password</label><input class="form-control -border" type="password" ng-model="$ctrl.user.password" name="password"></div><div class="form-group"><label for="Confirm password">Confirm password</label><input class="form-control -border" type="password" ng-model="$ctrl.user.confirmPassword" name="confirm_password"></div></div><div class="horizontal-align -between" id="account-group"><div class="form-group"><label for="company">Company</label><select class="form-control select -borderless" ng-change="$ctrl.user.department = null; $ctrl.loadDepartments($ctrl.user.company.id)" ng-options="c.id as c.name for c in $ctrl.companies" ng-model="$ctrl.user.company.id" name="company"></select></div><div class="form-group"><label for="department">Department</label><select class="form-control select -borderless" ng-model="$ctrl.user.department.id" ng-options="d.id as d.name for d in $ctrl.departments" name="department"></select></div><div class="form-group initial"><label for="Employee type">Employee type</label><input class="form-control -border" type="text" ng-model="$ctrl.user.employeeType" name="employee_type"></div></div><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Depots</label><select class="form-control select -borderless" ng-model="$ctrl.depot" ng-options="d.code for d in $ctrl.depots" name="depot"></select></div><div class="form-group field"><button type="button" class="btn btn-create btn-md" ng-click="$ctrl.addDepotToUser()">Add Depot to User</button></div></div></div></div><div class="horizontal-align -between"><table class="table table-list"><!-- ng-if="$ctrl.mo.inventoryList.length > 0" --><thead><tr><td>Depot</td><td>Area</td><td>Remove</td></tr></thead><tbody><tr ng-repeat="d in $ctrl.user.depots"><td>{{d.name}} {{d.code}}</td><td>{{d.area.name}} {{d.area.code}}</td><td><button type="button" class="btn btn-create btn-md" ng-click="$ctrl.removeDepotFromUser(d)">X</button></td></tr></tbody></table></div><div><div><label class="type">Account Permissions</label></div><div class="content -between"><div class="user-panel" ng-repeat="permission in $ctrl.permissions"><div class="horizontal-align"><div><label class="type">{{permission.category}}</label></div></div><hr class="devider"><div class="horizontal-align" ng-repeat="permissionSub in permission.permissionSubs"><div class="col"><label class="checkbox"><input name="choice" type="hidden" value="0"> <input ng-if="!$ctrl.hasCrud($ctrl.user.permissions[permissionSub.code].actions)" value="1" type="checkbox" ng-click="$ctrl.checkAction($event, permissionSub.code)" name="choice"> <input ng-if="$ctrl.hasCrud($ctrl.user.permissions[permissionSub.code].actions)" value="1" type="checkbox" ng-click="$ctrl.checkAction($event, permissionSub.code)" checked="checked" name="choice"> <span class="caption">{{ permissionSub.name }}</span></label></div><div class="form-group horizontal-align"><label class="checkbox" ng-repeat="(key, name) in $ctrl.baseAction"><input checklist-model="$ctrl.user.permissions[permissionSub.code].actions" checklist-value="key" type="checkbox" name="{{permissionSub.code}}"> <span class="caption">{{name}}</span></label></div></div></div></div><div class="action-button horizontal-align -end"><input type="submit" name="commit" value="{{ $ctrl.button }}" class="btn btn-create btn-md" data-disable-with="Save"></div></div></form>');
$templateCache.put('./app-searchbox.html','<div class="searchbox-modal"><div class="searchbox-content"><form ng-submit="$ctrl.submitForm();" method="post" novalidate><div class="search-modal horizontal-align -between"><input type="hidden" ng-model="$ctrl.search.form"> <input type="text" class="form-control -borderless search" ng-model="$ctrl.search.value" placeholder="{{$ctrl.placeholder}}"><div class="modal-action"><button type="submit" class="btn btn-action btn-md">{{$ctrl.button}}</button></div></div></form></div></div>');
$templateCache.put('./login.html','<h2>Log in</h2><form novalidate class="new_user" id="new_user" ng-submit="$ctrl.login()" accept-charset="UTF-8"><div class="field"><label for="user_email">Email</label><br><input type="email" ng-model="$ctrl.email" id="user_email"></div><div class="field"><label for="user_password">Password</label><br><input autocomplete="off" type="password" ng-model="$ctrl.password"></div><!-- <div class="field">\r\n          <input name="user[remember_me]" type="hidden" value="0"><input type="checkbox" value="1" name="user[remember_me]" id="user_remember_me">\r\n          <label for="user_remember_me">Remember me</label>\r\n        </div> --><div class="actions"><input type="submit" name="commit" value="Log in" data-disable-with="Log in"></div></form>');
$templateCache.put('./account-title-table.html','<style>.dropdown-submenu {\r\n    position: relative;\r\n}\r\n\r\n.dropdown-submenu .dropdown-menu {\r\n    top: 0;\r\n    left: 100%;\r\n    margin-top: -1px;\r\n}</style><script>$(document).ready(function(){\r\n  $(\'.dropdown-submenu a.test\').on("click", function(e){\r\n    $(this).next(\'ul\').toggle();\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n  });\r\n});</script><table class="table table-list"><thead><tr><th>Account Title</th><th>Department</th><th>Group</th><th>Area</th><th>Debit</th><th>Credit</th><th ng-if="!$ctrl.readonly">Action</th></tr></thead><tbody><tr ng-if="!$ctrl.readonly"><td><div class="dropdown"><button type="button" ng-click="$ctrl.myFunction()" ng-if="$ctrl.accountTitle.id == null" class="dropbtn">Select</button> <button type="button" ng-click="$ctrl.myFunction()" ng-if="$ctrl.accountTitle.id != null" class="dropbtn">{{$ctrl.accountTitle.title}}</button><div id="myDropdown" class="dropdown-content"><input type="text" ng-model="$ctrl.search" placeholder="Search.." id="myInput" ng-change="$ctrl.filterFunction()"> <a ng-if="$ctrl.accountTitle.parent != null" ng-click="$ctrl.selectAccountTitle($ctrl.accountTitle.parent)">Parent: {{$ctrl.accountTitle.parent.title}}</a> <a ng-repeat="a in $ctrl.accountTitlesList" ng-click="$ctrl.selectAccountTitle(a)">{{a.title}}</a></div></div></td><td><select class="form-control select -border" ng-model="$ctrl.department" ng-options="d as d.name for d in $ctrl.departments" name="departments"></select></td><td><select class="form-control select -border" ng-model="$ctrl.group" ng-options="g as g.name for g in $ctrl.groups" name="groups"></select></td><td><select class="form-control select -border" ng-model="$ctrl.area" ng-options="a as a.name for a in $ctrl.areas" name="areas"></select></td><td><input type="number" ng-if="$ctrl.accountTitle.type == \'Debit\'" ng-model="$ctrl.amount"></td><td><input type="number" ng-if="$ctrl.accountTitle.type == \'Credit\'" ng-model="$ctrl.amount"></td><td><button type="button" ng-click="$ctrl.addRow()" class="btn btn-success">Add</button></td></tr><tr ng-repeat="at in $ctrl.accounttitles"><td>{{at.accountTitle.title}}</td><td>{{at.department.name}}</td><td>{{at.group.name}}</td><td>{{at.area.name}}</td><td ng-if="at.accountTitle.type == \'Debit\'">{{at.amount.toFixed(2)}}</td><td ng-if="at.accountTitle.type == \'Debit\'">-------</td><td ng-if="at.accountTitle.type == \'Credit\'">-------</td><td ng-if="at.accountTitle.type == \'Credit\'">{{at.amount.toFixed(2)}}</td><td><button type="button" ng-click="$ctrl.deleteRow($index)" ng-if="!$ctrl.readonly" class="btn btn-danger">Remove</button></td></tr></tbody><tfoot><tr ng-if="!$ctrl.readonly"><th>Total</th><th></th><th></th><th></th><th>{{$ctrl.debitAmount.toFixed(2)}}</th><th>{{$ctrl.creditAmount.toFixed(2)}}</th><th></th></tr></tfoot></table>');
$templateCache.put('./print-account-summary-report.html','<div class="horizontal-align -between modal-information"><p class="title">Report: <span class="content">{{$ctrl.reportType}}</span></p><p class="title">Dates: <span class="content">{{$ctrl.dates}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Company: <span class="content">{{$ctrl.company.name}}</span></p></div><div class="wrapper scroll-section"><table class="table table-list"><thead><tr><th>Account Title</th><th>Credit</th><th>Debit</th></tr></thead><tbody><tr ng-repeat="entry in $ctrl.entries"><td>{{entry.title}}</td><td>{{entry.credit}}</td><td>{{entry.debit}}</td></tr></tbody></table></div>');
$templateCache.put('./company-nav.html','<ul ng-show="$ctrl.showCompanyNav()" class="companyTabs nav nav-tabs"><li class="nav-item" ng-repeat="company in $ctrl.companies"><a class="nav-link {{ $ctrl.company != null && $ctrl.company.id == company.id ? \'active\' : \'\'}}" ng-click="$ctrl.selectCompany(company);">{{company.name}}</a></li></ul>');
$templateCache.put('./find-client-modal.html','<div class="modal fade" id="findClientModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Client</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="modal-body"><div class="search-box horizontal-align -between"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="Code" type="text" name="search" ng-model="$ctrl.searchCode"> <input class="form-control -borderless search" placeholder="Name" type="text" name="search" ng-model="$ctrl.searchName"> <input class="form-control -borderless search" placeholder="Tin" type="text" name="search" ng-model="$ctrl.searchTin"></div></div></div><div class="wrapper scroll-section"><table class="table table-hover"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'code\';$ctrl.sortReverse = !$ctrl.sortReverse;">code <span ng-show="$ctrl.sortType == \'code\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'code\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'name\';$ctrl.sortReverse = !$ctrl.sortReverse;">name <span ng-show="$ctrl.sortType == \'name\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'name\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'tin\';$ctrl.sortReverse = !$ctrl.sortReverse;">tin <span ng-show="$ctrl.sortType == \'tin\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'tin\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th></tr></thead><tbody><tr ng-repeat="client in $ctrl.clients | filter: {number: $ctrl.searchCode, name: $ctrl.searchName, tin: $ctrl.searchTin } | orderBy:$ctrl.sortType:$ctrl.sortReverse" ng-click="$ctrl.getClient(client)" data-dismiss="modal"><td>{{client.code}}</td><td>{{client.name}}</td><td>{{client.tin}}</td></tr></tbody></table></div></div></div></div>');
$templateCache.put('./find-fg-inventory-modal.html','<style>.highlight{\r\n\t\tbackground-color:#7ed321;\r\n\t}</style><div class="modal fade" id="findFgInventoryModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Finished Good</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="modal-body"><div class="search-box horizontal-align -between"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="FG Code" type="text" name="search" ng-model="$ctrl.searchFG"></div></div><div class="wrapper scroll-section"><table class="table table-hover"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'fg\';$ctrl.sortReverse = !$ctrl.sortReverse;">FG Code <span ng-show="$ctrl.sortType == \'fg\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'fg\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th>Name</th><th>Reserved</th><th>Stock on Hand</th></tr></thead><tbody><tr ng-repeat="fg in $ctrl.fglistview | orderBy:$ctrl.sortType:$ctrl.sortReverse" ng-click="$ctrl.selectFG(fg)" ng-class="{highlight: $ctrl.fglist.indexOf(fg) !== -1}"><td>{{fg.finishedGood.code}}</td><td>{{fg.finishedGood.name}}</td><td>{{ctrl.reserved[$index]}}</td><td>{{fg.sum}}</td></tr></tbody></table><div class="request-action"><button type="button" data-dismiss="modal" class="btn btn-create btn-md">Select</button></div></div></div></div></div></div>');
$templateCache.put('./find-fg-modal.html','<div class="modal fade" id="findFgModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Finished Good</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="modal-body"><div class="search-box horizontal-align -between"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="FG Code" type="text" name="search" ng-model="$ctrl.searchFG"></div></div><div class="wrapper scroll-section"><table class="table table-hover"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'fg\';$ctrl.sortReverse = !$ctrl.sortReverse;">FG Code <span ng-show="$ctrl.sortType == \'fg\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'fg\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th>Name</th></tr></thead><tbody><tr ng-repeat="fg in $ctrl.fgList | orderBy:$ctrl.sortType:$ctrl.sortReverse" data-dismiss="modal" ng-click="$ctrl.selectFG(fg)"><td>{{fg.code}}</td><td>{{fg.name}}</td></tr></tbody></table><div class="request-action"><button type="button" data-dismiss="modal" class="btn btn-create btn-md">Select</button></div></div></div></div></div></div>');
$templateCache.put('./find-item-modal.html','<style>.highlight{\r\n\t\tbackground-color:#7ed321;\r\n\t}</style><div class="modal fade" id="findItemModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Item</h4><button class="close"><span data-dismiss="modal" class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="wrapper scroll-section"><table datatable="ng" ng-if="$ctrl.items" class="table table-list"><thead><tr><th>Type</th><th>Item Code</th><th>Item Description</th><th>Unit</th><th>Current Stocks</th><th>Pending PRF</th><th>Pending PO</th><th>Quarantined</th></tr></thead><tbody id="table-less-padding"><tr ng-repeat="item in $ctrl.itemsWithDetails" ng-click="$ctrl.getItem(item)" ng-class="{highlight: $ctrl.isItemPresent(item) !== -1}"><td>{{item.item.type.code}}</td><td>{{item.item.code}}</td><td>{{item.item.name}}</td><td>{{item.item.unit.code}}</td><td>{{item.stockOnHand}}</td><td>{{item.pendingPrf}}</td><td>{{item.pendingPo}}</td><td>{{item.pendingRr}}</td></tr></tbody></table></div><a class="btn btn-info">Selected Item List</a><div class="wrapper scroll-section"><table class="table table-list"><thead><tr><th>Type</th><th>Item Code</th><th>Name</th><th>Unit</th><th>Current Stocks</th><th>Pending PRF</th><th>Pending PO</th><th>Quarantined</th></tr></thead><tbody><tr ng-repeat="item in $ctrl.itemlist"><td>{{item.item.type.code}}</td><td>{{item.item.code}}</td><td>{{item.item.name}}</td><td>{{item.item.unit.code}}</td><td>{{item.stockOnHand}}</td><td>{{item.pendingPrf}}</td><td>{{item.pendingPo}}</td><td>{{item.pendingRr}}</td></tr></tbody></table></div><div class="modal-footer"><button class="btn btn-cancel" data-dismiss="modal" ng-click="$ctrl.onButtonSelect()">Done</button></div></div></div></div></div>');
$templateCache.put('./find-inventory-modal.html','<style>.highlight{\r\n\t\tbackground-color:#7ed321;\r\n\t}</style><div class="modal fade" id="findInventoryModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Inventory</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="modal-body"><div class="search-box horizontal-align -between"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="Control #" type="text" name="search" ng-model="$ctrl.searchControlNumber"></div></div><div class="wrapper scroll-section"><table class="table table-hover"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'controlNumber\';$ctrl.sortReverse = !$ctrl.sortReverse;">Control Number <span ng-show="$ctrl.sortType == \'controlNumber\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'controlNumber\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th>Date Entry</th><th>Expiration</th><th>Item</th><th>Type</th><th>Stock on Hand</th></tr></thead><tbody><tr ng-repeat="inventory in $ctrl.inventorylist | filter: {controlNumber: $ctrl.searchControlNumber} | orderBy:$ctrl.sortType:$ctrl.sortReverse" ng-click="$ctrl.selectInventory(inventory)" ng-class="{highlight: $ctrl.issuedlist.indexOf(inventory) !== -1}"><td>{{inventory.controlNumber}}</td><td>{{inventory.dateCreated | date}}</td><td>{{inventory.expiration | date}}</td><td>{{inventory.item.code}}-{{inventory.item.name}} {{inventory.item.unit.code}}</td><td>{{inventory.item.type.code}}</td><td>{{inventory.quantity}}</td></tr></tbody></table><div class="request-action"><button type="button" data-dismiss="modal" class="btn btn-create btn-md">Select</button></div></div></div></div></div></div>');
$templateCache.put('./find-mis-modal.html','<div class="modal fade" id="findMISModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">MIS</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="modal-body"><div class="search-box horizontal-align -between"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="MIS #" type="text" name="search" ng-model="$ctrl.searchMIS"></div></div><div class="wrapper scroll-section"><table class="table table-hover"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'mis\';$ctrl.sortReverse = !$ctrl.sortReverse;">MIS <span ng-show="$ctrl.sortType == \'mis\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'mis\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th>Date</th><th>Requested By</th></tr></thead><tbody><tr ng-repeat="mis in $ctrl.misList | filter: {mis.misNo: $ctrl.searchMIS} | orderBy:$ctrl.sortType:$ctrl.sortReverse" data-dismiss="modal" ng-click="$ctrl.selectMIS(mis)"><td>{{mis.misNo}}</td><td>{{mis.date | date}}</td><td>{{mis.requestedBy.firstName}} {{mis.requestedBy.lastName}}</td></tr></tbody></table><div class="request-action"><button type="button" data-dismiss="modal" class="btn btn-create btn-md">Select</button></div></div></div></div></div></div>');
$templateCache.put('./find-product-modal.html','<style>.highlight{\r\n\t\tbackground-color:#7ed321;\r\n\t}</style><div class="modal fade" id="findProductModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">{{$ctrl.fg.code}} {{$ctrl.fg.name}}</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="modal-body"><div class="search-box horizontal-align -between"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="FG Code" type="text" name="search" ng-model="$ctrl.searchFG"></div></div><div class="wrapper scroll-section"><table class="table table-hover"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'fg\';$ctrl.sortReverse = !$ctrl.sortReverse;">Lot # <span ng-show="$ctrl.sortType == \'fg\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'fg\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th>FG Code</th><th>Name</th><th>Expiration</th><th>Stock</th></tr></thead><tbody><tr ng-repeat="productInventory in $ctrl.productlist | orderBy:$ctrl.sortType:$ctrl.sortReverse" ng-click="$ctrl.selectProduct(productInventory)" ng-class="{highlight: $ctrl.issuedproductlist.indexOf(productInventory.product) !== -1}"><td>{{productInventory.product.lotNumber}}</td><td>{{productInventory.product.finishedGood.code}}</td><td>{{productInventory.product.finishedGood.name}}</td><td>{{productInventory.product.expiration | date}}</td><td>{{productInventory.quantity}}</td></tr></tbody></table><div class="request-action"><button type="button" data-dismiss="modal" class="btn btn-create btn-md">Select</button></div></div></div></div></div></div>');
$templateCache.put('./find-product-inventory-modal.html','<style>.highlight {\r\n\tbackground-color: #7ed321;\r\n}</style><div class="modal fade" id="findInventoryModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Inventory</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="modal-body"><div class="search-box horizontal-align -between"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0 !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="Control #" type="text" name="search" ng-model="$ctrl.searchlotNumber"></div></div><div class="wrapper scroll-section"><table class="table table-hover"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'lotNumber\';$ctrl.sortReverse = !$ctrl.sortReverse;">Lot Number <span ng-show="$ctrl.sortType == \'lotNumber\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'lotNumber\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th>Date Entry</th><th>Expiration</th><th>FG</th><th>Stock on Hand</th></tr></thead><tbody><tr ng-repeat="inventory in $ctrl.inventorylist | filter: {lotNumber: $ctrl.searchlotNumber} | orderBy:$ctrl.sortType:$ctrl.sortReverse" ng-click="$ctrl.selectInventory(inventory)" ng-class="{highlight: $ctrl.issuedlist.indexOf(inventory) !== -1}"><td>{{inventory.product.lotNumber}}</td><td>{{inventory.dateCreated | date}}</td><td>{{inventory.product.expiration | date}}</td><td>{{inventory.product.finishedGood.code}}-{{inventory.product.finishedGood.name}}</td><td>{{inventory.quantity}}</td></tr></tbody></table><div class="request-action"><button type="button" data-dismiss="modal" class="btn btn-create btn-md">Select</button></div></div></div></div></div></div>');
$templateCache.put('./find-requested-items-modal.html','<style>.highlight{\r\n\t\tbackground-color:#7ed321;\r\n\t}</style><div class="modal fade" id="findRequestedItemsModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Requested Items</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="modal-body"><div class="search-box horizontal-align -between"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="PRF #" type="text" name="search" ng-model="$ctrl.searchNumber"></div></div><div class="wrapper scroll-section"><table class="table table-hover"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'number\';$ctrl.sortReverse = !$ctrl.sortReverse;">PRF # <span ng-show="$ctrl.sortType == \'number\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'number\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th>Code</th><th>Item</th><th>Type</th><th>Quantity</th><th>Unit</th><th></th></tr></thead><tbody><tr ng-repeat="requestedItem in $ctrl.requestedItems | filter: {number: $ctrl.searchNumber} | orderBy:$ctrl.sortType:$ctrl.sortReverse" ng-click="$ctrl.selectRequestedItem(requestedItem)" ng-class="{highlight: $ctrl.selectedItems.indexOf(requestedItem) !== -1}"><td>{{requestedItem.prfNumber}}</td><td>{{requestedItem.item.code}}</td><td>{{requestedItem.item.name}}</td><td>{{requestedItem.item.type.code}}</td><td>{{requestedItem.quantityRequested}}</td><td>{{requestedItem.unit.code}}</td><td></td></tr></tbody></table><div class="request-action"><button type="button" data-dismiss="modal" class="btn btn-create btn-md">Select PRF</button></div></div></div></div></div></div>');
$templateCache.put('./find-purchase-order-modal.html','<div class="modal fade" id="findPurchaseOrderModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Purchase Order</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="modal-body"><div class="search-box horizontal-align -between"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="PRF #" type="text" name="search" ng-model="$ctrl.searchNumber"></div></div><div class="wrapper scroll-section"><table class="table table-hover"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'number\';$ctrl.sortReverse = !$ctrl.sortReverse;">PO # <span ng-show="$ctrl.sortType == \'number\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'number\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th>Date</th><th>Vendor</th><th>Action</th></tr></thead><tbody><tr ng-repeat="po in $ctrl.purchaseOrders  | filter: {number: $ctrl.searchNumber} | orderBy:$ctrl.sortType:$ctrl.sortReverse" ng-click="$ctrl.getPurchaseOrder(po)" data-dismiss="modal"><td>{{po.number}}</td><td>{{po.date | date}}</td><td>{{po.vendor.code}}-{{po.vendor.name}}</td><td><button class="btn btn-primary" type="button">View</button></td></tr></tbody></table></div></div></div></div></div>');
$templateCache.put('./find-sales-slip-modal.html','<div class="modal fade" id="findSalesSlipModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Sales Slip</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="modal-body"><div class="search-box horizontal-align -between"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !imsortant"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="PRF #" type="text" name="search" ng-model="$ctrl.searchNumber"></div></div><div class="wrapper scroll-section"><table class="table table-hover"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'number\';$ctrl.sortReverse = !$ctrl.sortReverse;">No <span ng-show="$ctrl.sortType == \'number\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'number\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th>Date</th><th>Type</th><th>Client</th><th>Amount</th></tr></thead><tbody><tr ng-repeat="ss in $ctrl.salesslips  | filter: {number: $ctrl.searchNumber} | orderBy:$ctrl.sortType:$ctrl.sortReverse" ng-click="$ctrl.getSalesSlip(ss)" data-dismiss="modal"><td>{{ss.number}}</td><td>{{ss.date | date}}</td><td>{{ss.type}}</td><td>{{ss.salesOrder.client.code}}-{{ss.salesOrder.client.name}}</td><td>{{ss.remainingBalance.toFixed(2)}}</td></tr></tbody></table></div></div></div></div></div>');
$templateCache.put('./find-so-modal.html','<div class="modal fade" id="findSoModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Sales Order</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="modal-body"><div class="search-box horizontal-align -between"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !imsortant"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="PRF #" type="text" name="search" ng-model="$ctrl.searchNumber"></div></div><div class="wrapper scroll-section"><table class="table table-hover"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'number\';$ctrl.sortReverse = !$ctrl.sortReverse;">PO # <span ng-show="$ctrl.sortType == \'number\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'number\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th>Date</th><th>Client</th><th>Action</th></tr></thead><tbody><tr ng-repeat="so in $ctrl.salesorders  | filter: {number: $ctrl.searchNumber} | orderBy:$ctrl.sortType:$ctrl.sortReverse" ng-click="$ctrl.getSalesOrder(so)" data-dismiss="modal"><td>{{so.number}}</td><td>{{so.date | date}}</td><td>{{so.client.code}}-{{so.client.name}}</td><td><button class="btn btn-primary" type="button">View</button></td></tr></tbody></table></div></div></div></div></div>');
$templateCache.put('./find-so-product-modal.html','<style>.highlight{\r\n\t\tbackground-color:#7ed321;\r\n\t}</style><div class="modal fade" id="findSoProductModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Sales Order Product</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="modal-body"><div class="search-box horizontal-align -between"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !imsortant"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="PRF #" type="text" name="search" ng-model="$ctrl.searchNumber"></div></div><div class="wrapper scroll-section"><table class="table table-list"><thead><tr><th>FG</th><th>Unit</th><th>Lot Number</th><th>Expiration Date</th><th>Stock On Hand</th></tr></thead><tbody><tr ng-repeat="i in $ctrl.inventorylist | filter: {number: $ctrl.searchNumber} | orderBy:$ctrl.sortType:$ctrl.sortReverse" ng-click="$ctrl.selectSoProduct(i)" ng-class="{highlight: $ctrl.isProductPresent(i) !== -1}"><td>{{i.product.finishedGood.name}}</td><td>{{i.product.smallUnit.code}}</td><td>{{i.product.lotNumber}}</td><td>{{i.product.expiration | date}}</td><td>{{i.quantity}}</td></tr></tbody><tfoot></tfoot></table></div></div></div></div></div>');
$templateCache.put('./find-vendor-modal.html','<div class="modal fade" id="findVendorModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Vendor</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="modal-body"><div class="search-box horizontal-align -between"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="Code" type="text" name="search" ng-model="$ctrl.searchCode"> <input class="form-control -borderless search" placeholder="Name" type="text" name="search" ng-model="$ctrl.searchName"> <input class="form-control -borderless search" placeholder="Tin" type="text" name="search" ng-model="$ctrl.searchTin"></div></div></div><div class="wrapper scroll-section"><table class="table table-hover"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'code\';$ctrl.sortReverse = !$ctrl.sortReverse;">code <span ng-show="$ctrl.sortType == \'code\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'code\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'name\';$ctrl.sortReverse = !$ctrl.sortReverse;">name <span ng-show="$ctrl.sortType == \'name\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'name\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'tin\';$ctrl.sortReverse = !$ctrl.sortReverse;">tin <span ng-show="$ctrl.sortType == \'tin\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'tin\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th></tr></thead><tbody><tr ng-repeat="vendor in $ctrl.vendors | filter: {number: $ctrl.searchCode, name: $ctrl.searchName, tin: $ctrl.searchTin } | orderBy:$ctrl.sortType:$ctrl.sortReverse" ng-click="$ctrl.getVendor(vendor)" data-dismiss="modal"><td>{{vendor.code}}</td><td>{{vendor.name}}</td><td>{{vendor.tin}}</td></tr></tbody></table></div></div></div></div>');
$templateCache.put('./item-sales-report.html','<div class="horizontal-align -between modal-information"><p class="title">Report: <span class="content">{{$ctrl.reportType}}</span></p><p class="title">Dates: <span class="content">{{$ctrl.dates}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Company: <span class="content">{{$ctrl.company.name}}</span></p></div><div class="wrapper scroll-section"><table class="table table-list"><thead><tr><th>Item</th><th ng-repeat="n in range($ctrl.startDate.getMonth(), $ctrl.endDate.getMonth())">{{$ctrl.months[n]}}</th><th>Total Amount</th></tr></thead><tbody><tr ng-repeat="entry in entries"><td>{{vp.number}}</td><td>{{vp.date | date}}</td><td>{{vp.bank}}</td><td>{{vp.voucher}}</td><td>{{vp.amount}}</td></tr></tbody></table></div>');
$templateCache.put('./print-crv-report.html','<div class="horizontal-align -between modal-information"><p class="title">Report: <span class="content">{{$ctrl.reportType}}</span></p><p class="title">Dates: <span class="content">{{$ctrl.dates}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Company: <span class="content">{{$ctrl.company.name}}</span></p></div><div class="wrapper scroll-section"><table class="table table-list"><thead><tr><th>CRV No</th><th>Date</th><th>Bank</th><th>Voucher</th><th>Amount</th></tr></thead><tbody><tr ng-repeat="vp in $ctrl.entries"><td>{{vp.number}}</td><td>{{vp.date | date}}</td><td>{{vp.bank}}</td><td>{{vp.voucher}}</td><td>{{vp.amount}}</td></tr></tbody></table></div>');
$templateCache.put('./print-fg-report.html','<div class="horizontal-align -between modal-information"><p class="title">Report: <span class="content">{{$ctrl.reportType}}</span></p><p class="title">Depot: <span class="content">{{$ctrl.dates}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Company: <span class="content">{{$ctrl.company.name}}</span></p></div><div class="wrapper scroll-section"><table class="table table-list"><thead><tr><th>Code</th><th>Finished Good</th><th>Unit (Small/Big)</th><th>Quantity</th></tr></thead><tbody><tr ng-repeat="vp in $ctrl.entries"><td>{{vp.code}}</td><td>{{vp.fg}}</td><td>{{vp.unit}}</td><td>{{vp.quantity}}</td></tr></tbody></table></div>');
$templateCache.put('./print-journal-voucher.html','<div><div><div><div><h4>Journal Voucher</h4></div><div><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">JV Number</label><input type="text" readonly="readonly" class="form-control -border" ng-model="$ctrl.jv.number"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date</label><p class="form-control -border">{{$ctrl.jv.date | date}}</p></div></div></div></div></div></div></div><div><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">RR Number</label><input type="text" readonly="readonly" class="form-control -border" ng-model="$ctrl.jv.rrNumber"></div><div class="form-group field"><label class="label capitalize-text">Date</label><p class="form-control -border">{{$ctrl.jv.rrDate | date}}</p></div></div></div></div></div></div><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Payee Code</label><input type="text" readonly="readonly" class="form-control -border" ng-model="$ctrl.jv.vendor.code"></div><div class="form-group field"><label class="label capitalize-text">Payee</label><input type="text" readonly="readonly" ng-model="$ctrl.jv.vendor.name" class="form-control -border"></div></div></div></div></div></div><table class="table table-list"><tbody><tr><th>SI #</th><td>{{$ctrl.jv.siNumber}}</td></tr><tr><th>DR #</th><td>{{$ctrl.jv.drNumber}}</td></tr><tr><th>PO #</th><td>{{$ctrl.jv.poNumber}}</td></tr></tbody></table></div><account-title-table accounttitles="$ctrl.jv.accountTitles" readonly="true"></account-title-table><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Total Debit Amount</label><input type="text" readonly="readonly" class="form-control -border" ng-model="$ctrl.jv.totalDebitAmount"></div><div class="form-group field"><label class="label capitalize-text">Total Credit Amount</label><input type="text" readonly="readonly" ng-model="$ctrl.jv.totalCreditAmount" class="form-control -border"></div></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" disabled="disabled" ng-model="$ctrl.jv.remarks"></textarea></div></div></div></div></div><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Prepared By:</label><input type="text" readonly="readonly" class="form-control -border" ng-value="$ctrl.preparedBy"></div><div class="form-group field"><label class="label capitalize-text">Approved By:</label><input type="text" readonly="readonly" ng-value="$ctrl.approvedBy" class="form-control -border"></div><div class="form-group field"><label class="label capitalize-text">Checked By:</label><input type="text" readonly="readonly" class="form-control -border"></div></div></div></div></div></div></div><div class="modal-footer"><p class="date">Created at {{$ctrl.jv.date | date}}</p></div></div></div></div>');
$templateCache.put('./print-journal-report.html','<div class="horizontal-align -between modal-information"><p class="title">Report: <span class="content">{{$ctrl.reportType}}</span></p><p class="title">Dates: <span class="content">{{$ctrl.dates}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Company: <span class="content">{{$ctrl.company.name}}</span></p></div><div class="wrapper scroll-section"><table class="table table-condensed"><thead><tr><th>Date</th><th>DR#</th><th>PO#</th><th>RR#</th><th>JV#</th><th>Account Titles</th><th>Credit</th><th>Debit</th></tr></thead><tbody ng-repeat="vp in $ctrl.entries"><tr><td>{{vp.date | date}}</td><td>{{vp.dr}}</td><td>{{vp.po}}</td><td>{{vp.rr}}</td><td>{{vp.number}}</td><td>{{vp.accountTitles[0].title}}</td><td>{{vp.accountTitles[0].credit}}</td><td>{{vp.accountTitles[0].debit}}</td></tr><tr style="padding-top: 1em" ng-repeat="title in vp.accountTitles" ng-if="$index > 0"><td></td><td></td><td></td><td></td><td></td><td>{{title.title}}</td><td>{{title.credit}}</td><td>{{title.debit}}</td></tr></tbody></table></div>');
$templateCache.put('./print-jv-report.html','<div class="horizontal-align -between modal-information"><p class="title">Report: <span class="content">{{$ctrl.reportType}}</span></p><p class="title">Dates: <span class="content">{{$ctrl.dates}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Company: <span class="content">{{$ctrl.company.name}}</span></p></div><div class="wrapper scroll-section"><table class="table table-list"><thead><tr><th>JV No</th><th>Date</th><th>Payee</th><th>Amount</th><th>Status</th></tr></thead><tbody><tr ng-repeat="vp in $ctrl.entries"><td>{{vp.number}}</td><td>{{vp.date | date}}</td><td>{{vp.payee}}</td><td>{{vp.amount}}</td><td>{{vp.status}}</td></tr></tbody></table></div>');
$templateCache.put('./print-osdr-report.html','<div class="horizontal-align -between modal-information"><p class="title">Report: <span class="content">{{$ctrl.reportType}}</span></p><p class="title">Dates: <span class="content">{{$ctrl.dates}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Company: <span class="content">{{$ctrl.company.name}}</span></p></div><div class="wrapper scroll-section"><table class="table table-list"><thead><tr><th>SO No</th><th>Date</th><th>OS/DR#</th><th>Date</th><th>Item</th><th>Qty</th><th>Unit Price</th><th>Amount</th><th>Batch</th></tr></thead><tbody><tr ng-repeat="vp in $ctrl.entries"><td>{{vp.soNumber}}</td><td>{{vp.soDate | date}}</td><td>{{vp.number}}</td><td>{{vp.date | date}}</td><td>{{vp.product}}</td><td>{{vp.quantity}}</td><td>{{vp.unitPrice}}</td><td>{{vp.amount}}</td><td>{{vp.lotNumber}}</td></tr></tbody></table></div>');
$templateCache.put('./print-pdc-report.html','<div class="horizontal-align -between modal-information"><p class="title">Report: <span class="content">{{$ctrl.reportType}}</span></p><p class="title">Dates: <span class="content">{{$ctrl.dates}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Company: <span class="content">{{$ctrl.company.name}}</span></p></div><div class="wrapper scroll-section"><table class="table table-list"><thead><tr><th>Payee</th><th>Cheque Details</th><th>Chk Date</th><th>Amount</th><th>Status</th></tr></thead><tbody><tr ng-repeat="vp in $ctrl.entries"><td>{{vp.payee}}</td><td>{{vp.chequeNumber}}</td><td>{{vp.chequeDate}}</td><td>{{vp.amount}}</td><td>{{vp.status}}</td></tr></tbody></table></div>');
$templateCache.put('./print-pjv-report.html','<div class="horizontal-align -between modal-information"><p class="title">Report: <span class="content">{{$ctrl.reportType}}</span></p><p class="title">Dates: <span class="content">{{$ctrl.dates}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Company: <span class="content">{{$ctrl.company.name}}</span></p></div><div class="wrapper scroll-section"><table class="table table-list"><thead><tr><th>PJV No</th><th>Date</th><th>Payee</th><th>Amount</th><th>Status</th></tr></thead><tbody><tr ng-repeat="vp in $ctrl.entries"><td>{{vp.number}}</td><td>{{vp.date | date}}</td><td>{{vp.payee}}</td><td>{{vp.amount}}</td><td>{{vp.status}}</td></tr></tbody></table></div>');
$templateCache.put('./print-prf.html','<div id="prfInfoModal"><div><div><div><h4>PRF No. {{ $ctrl.prf.number }} {{$ctrl.prf.date | date}}</h4></div><div><div class="horizontal-align -between modal-information"><p class="title">Date Needed <span class="content">{{ $ctrl.prf.dateNeeded | date }}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Requested By: <span class="content">{{$ctrl.prf.requestedBy.firstName}} {{$ctrl.prf.requestedBy.lastName}}</span></p></div><div id="purchaseRequestsDiv"><table class="table table-hover"><thead><tr><th>Code</th><th>Item</th><th>Quantity</th><th>Unit</th><th></th></tr></thead><tbody><tr ng-repeat="requestedItem in $ctrl.prf.requestedItems"><td>{{requestedItem.item.code}}</td><td>{{requestedItem.item.name}}</td><td>{{requestedItem.quantityRequested}}</td><td>{{requestedItem.item.unit.code}}</td><td></td></tr></tbody></table></div><div class="horizontal-align -between modal-information"><p class="title">Remarks: <span class="content">{{$ctrl.prf.remarks}}</span></p></div></div></div></div></div>');
$templateCache.put('./print-purchase-voucher.html','<div><div><div><div><h4>Purchase Journal Voucher</h4></div><div><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">PJV Number</label><input type="text" readonly="readonly" class="form-control -border" ng-model="$ctrl.pv.number"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date</label><p class="form-control -border">{{$ctrl.pv.date | date}}</p></div></div></div></div></div></div></div><div><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">RR Number</label><input type="text" readonly="readonly" class="form-control -border" ng-model="$ctrl.pv.rrNumber"></div><div class="form-group field"><label class="label capitalize-text">Date</label><p class="form-control -border">{{$ctrl.pv.rrDate | date}}</p></div></div></div></div></div></div><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Payee Code</label><input type="text" readonly="readonly" class="form-control -border" ng-model="$ctrl.pv.vendor.code"></div><div class="form-group field"><label class="label capitalize-text">Payee</label><input type="text" readonly="readonly" ng-model="$ctrl.pv.vendor.name" class="form-control -border"></div></div></div></div></div></div><table class="table table-list"><tbody><tr><th>SI #</th><td>{{$ctrl.pv.siNumber}}</td></tr><tr><th>DR #</th><td>{{$ctrl.pv.drNumber}}</td></tr><tr><th>PO #</th><td>{{$ctrl.pv.poNumber}}</td></tr></tbody></table></div><account-title-table accounttitles="$ctrl.pv.accountTitles" readonly="true"></account-title-table><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Total Debit Amount</label><input type="text" readonly="readonly" class="form-control -border" ng-model="$ctrl.pv.totalDebitAmount"></div><div class="form-group field"><label class="label capitalize-text">Total Credit Amount</label><input type="text" readonly="readonly" ng-model="$ctrl.pv.totalCreditAmount" class="form-control -border"></div></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" disabled="disabled" ng-model="$ctrl.pv.remarks"></textarea></div></div></div></div></div><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Prepared By:</label><input type="text" readonly="readonly" class="form-control -border" ng-value="$ctrl.preparedBy"></div><div class="form-group field"><label class="label capitalize-text">Approved By:</label><input type="text" readonly="readonly" ng-value="$ctrl.approvedBy" class="form-control -border"></div><div class="form-group field"><label class="label capitalize-text">Checked By:</label><input type="text" readonly="readonly" class="form-control -border"></div></div></div></div></div></div></div><div class="modal-footer"><p class="date">Created at {{$ctrl.pv.date | date}}</p></div></div></div></div>');
$templateCache.put('./print-rs-report.html','<div class="horizontal-align -between modal-information"><p class="title">Report: <span class="content">{{$ctrl.reportType}}</span></p><p class="title">Dates: <span class="content">{{$ctrl.dates}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Company: <span class="content">{{$ctrl.company.name}}</span></p></div><div class="wrapper scroll-section"><table class="table table-list"><thead><tr><th>RS#</th><th>Date</th><th>OS/DR#</th><th>SR</th><th>Client</th><th>Item</th><th>Qty</th><th>Amount</th></tr></thead><tbody><tr ng-repeat="vp in $ctrl.entries"><td>{{vp.number}}</td><td>{{vp.date | date}}</td><td>{{vp.dr}}</td><td>{{vp.sr}}</td><td>{{vp.client}}</td><td>{{vp.product}}</td><td>{{vp.quantity}}</td><td>{{vp.amount}}</td></tr></tbody></table></div>');
$templateCache.put('./print-stock-card.html','<h4>Control #{{$ctrl.stockcards[0].controlNumber}}</h4><div class="horizontal-align -between modal-information"><p class="title">Item Code: <span class="content">{{$ctrl.item.code}}</span></p><p class="title">Name: <span class="content">{{$ctrl.item.name}}</span></p></div><div class="horizontal-align -between modal-information" ng-if="$ctrl.item.unit != null"><p class="title">Unit: <span class="content">{{$ctrl.item.unit.code}}</span></p><p class="title">Type: <span class="content">{{$ctrl.item.type.name}}</span></p></div><div class="wrapper scroll-section"><table class="table table-list"><thead><tr><th>Action</th><th>Date</th><th>User</th><th>IN/OUT</th><th>Quantity</th><th>Remarks</th></tr></thead><tbody><tr ng-repeat="stockCard in $ctrl.stockcards"><td>{{stockCard.action}}</td><td>{{stockCard.date | date}}</td><td>{{stockCard.user.firstName}} {{stockCard.user.lastName}}</td><td>{{stockCard.sign}}</td><td>{{stockCard.quantity}}</td><td>{{stockCard.remarks}}</td></tr></tbody></table></div>');
$templateCache.put('./print-vp-report.html','<div class="horizontal-align -between modal-information"><p class="title">Report: <span class="content">{{$ctrl.reportType}}</span></p><p class="title">Dates: <span class="content">{{$ctrl.dates}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Company: <span class="content">{{$ctrl.company.name}}</span></p></div><div class="wrapper scroll-section"><table class="table table-list"><thead><tr><th>VP No</th><th>Date</th><th>Payee</th><th>Amount</th><th>Status</th></tr></thead><tbody><tr ng-repeat="vp in $ctrl.entries"><td>{{vp.number}}</td><td>{{vp.date | date}}</td><td>{{vp.payee}}</td><td>{{vp.amount}}</td><td>{{vp.status}}</td></tr></tbody></table></div>');
$templateCache.put('./sales-rep-client-report.html','<div class="horizontal-align -between modal-information"><p class="title">Report: <span class="content">{{$ctrl.reportType}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Company: <span class="content">{{$ctrl.company.name}}</span></p></div><div class="wrapper scroll-section"><table class="table table-list"><thead><tr><th>Client Code</th><th>Client Name</th><th>Address</th><th>Contact Person</th><th>Telephone Number</th><th>TIN Number</th></tr></thead><tbody><tr ng-repeat="entry in $ctrl.entries"><td>{{entry.code}}</td><td>{{entry.name}}</td><td>{{entry.businessAddress}}</td><td>{{entry.proprietor}}</td><td>{{entry.telephoneNumbers}}</td><td>{{entry.tin}}</td></tr></tbody></table></div>');
$templateCache.put('./view-ackreceipt-modal.html','<div class="modal fade" id="ackReceiptInfoModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Acknowledgement Receipt No. {{$ctrl.ar.number}}</h4><button class="close"><span class="ion-android-close close-modal" data-dismiss="modal"></span></button></div><div class="modal-body"><div class="horizontal-align -between modal-information"><p class="title">Prepared By: <span class="content">{{$ctrl.ar.preparedBy.firstName}} {{$ctrl.ar.preparedBy.lastName}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Date: <span class="content">{{$ctrl.ar.date | date}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Client: <span class="content">{{$ctrl.ar.client.name}}</span></p></div><a target="_blank" href="/admin/shared/print-os/{{$ctrl.os.id}}" class="btn btn-info">Print Receipt</a><div id="purchaseRequestsDiv"><table class="table table-hover"><thead><tr><th>Type</th><th>Number</th><th>Date</th><th>Amount</th><th>Paid</th></tr></thead><tbody><tr ng-repeat="payment in $ctrl.ar.payments"><td>{{payment.reference.type}}</td><td>{{payment.reference.number}}</td><td>{{payment.reference.date | date}}</td><td>{{payment.reference.totalAmount.toFixed(2)}}</td><td>{{payment.appliedAmount.toFixed(2)}}</td></tr></tbody><tfoot><tr><td>Total Applied Amount:</td><td>{{$ctrl.ar.osAmount.toFixed(2)}}</td><td>Total SI Amount:</td><td>{{$ctrl.ar.siAmount.toFixed(2)}}</td></tr></tfoot></table></div><div class="horizontal-align -between modal-information"><p class="title">Remarks: <span class="content">{{$ctrl.ar.remarks}}</span></p></div></div><div class="modal-footer"><p class="date">Created at {{$ctrl.ar.date | date}}</p><button class="btn btn-cancel" data-dismiss="modal">Close</button></div></div></div></div>');
$templateCache.put('./view-os-modal.html','<div class="modal fade" id="osInfoModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">{{$ctrl.os.salesOrder.type}} No. {{ $ctrl.os.number }} {{$ctrl.os.date | date}}</h4><button class="close"><span class="ion-android-close close-modal" data-dismiss="modal"></span></button></div><div class="modal-body"><div class="horizontal-align -between modal-information"><p class="title">Prepared By: <span class="content">{{$ctrl.os.preparedBy.firstName}} {{$ctrl.os.preparedBy.lastName}}</span></p></div><a target="_blank" href="/admin/shared/print-os/{{$ctrl.os.id}}" class="btn btn-info">Print {{$ctrl.os.salesOrder.type}}</a><div id="purchaseRequestsDiv"><table class="table table-hover"><thead><tr><th>Code</th><th>FG</th><th>Lot #</th><th>Expiration</th><th>Quantity</th><th>Status</th><th></th></tr></thead><tbody><tr ng-repeat="product in $ctrl.os.orderedProducts"><td>{{product.product.finishedGood.code}}</td><td>{{product.product.finishedGood.name}}</td><td>{{product.product.lotNumber}}</td><td>{{product.product.expiration | date}}</td><td>{{product.quantity}}</td><td>{{product.status}}</td></tr></tbody></table></div><div class="horizontal-align -between modal-information"><p class="title">Remarks: <span class="content">{{$ctrl.os.remarks}}</span></p></div></div><div class="modal-footer"><p class="date">Created at {{$ctrl.os.date | date}}</p><button class="btn btn-cancel" data-dismiss="modal">Close</button></div></div></div></div>');
$templateCache.put('./view-product-modal.html','<div class="modal fade" id="productInfoModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">View Product</h4><button class="close"><span class="ion-android-close close-modal" data-dismiss="modal"></span></button></div><div class="modal-body"><div class="horizontal-align -between modal-information"><p class="title">FG Code <span class="content">{{ $ctrl.product.finishedGood.code }}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Name <span class="content">{{$ctrl.product.finishedGood.name }}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Lot # <span class="content">{{ $ctrl.product.lotNumber }}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Expiration <span class="content">{{$ctrl.product.expiration | date }}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Classification <span class="content">{{ $ctrl.product.classification.name}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Category <span class="content">{{$ctrl.product.category.name }}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Small UOM <span class="content">{{ $ctrl.product.smallUnit.name }}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Big UOM <span class="content">{{$ctrl.product.bigUnit.name }}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Unit Price <span class="content">{{ $ctrl.product.unitPrice }}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Quantity Per Box <span class="content">{{$ctrl.product.quantityPerBox }}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Reorder Level <span class="content">{{$ctrl.product.reorderLevel}}</span></p></div></div><div class="modal-footer"><button class="btn btn-cancel" data-dismiss="modal">Close</button></div></div></div></div>');
$templateCache.put('./view-rr-modal.html','<div class="modal fade" id="rrModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Receiving Slip {{$ctrl.rr.number}}</h4><button data-dismiss="modal" class="close"><span class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="horizontal-align -between modal-information"><p class="title">R.R No: <span class="content">{{$ctrl.rr.number}}</span></p><p class="title">DR / SI: <span class="content">{{$ctrl.rr.drNumber}}/{{$ctrl.rr.siNumber}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Vendor: <span class="content">{{$ctrl.rr.purchaseOrder.vendor.code}} {{$ctrl.rr.purchaseOrder.vendor.name}}</span></p><p class="title">Received By: <span class="content">{{$ctrl.rr.receivedBy.department.name}}</span></p></div><div class="wrapper scroll-section"><table class="table table-list"><thead><tr><th>Item Code</th><th>Item Name</th><th>Material Type</th><th>Status</th><th>Quantity</th></tr></thead><tbody><tr ng-repeat="receivedItem in $ctrl.rr.receivedItems"><td>{{receivedItem.item.code}}</td><td>{{receivedItem.item.name}}</td><td><label class="custom-label -narrow" ng-class="{\'-apple\':receivedItem.item.type.code == \'RM\', \'-orangish\':receivedItem.item.type.code ==\'PM\'}">{{receivedItem.item.type.code}}</label></td><td>{{receivedItem.status}}</td><td>{{receivedItem.quantity}} {{receivedItem.unit.code}}</td></tr></tbody></table></div></div><div class="modal-footer"><p class="date">Created at {{$ctrl.rr.date}}</p><button class="btn btn-cancel" data-dismiss="modal">Close</button></div></div></div></div>');
$templateCache.put('./view-so-modal.html','<div class="modal fade" id="soInfoModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">SO No. {{ $ctrl.so.number }} {{$ctrl.so.date | date}}</h4><button class="close"><span class="ion-android-close close-modal" data-dismiss="modal"></span></button></div><div class="modal-body"><div class="horizontal-align -between modal-information"><p class="title">Prepared By: <span class="content">{{$ctrl.so.preparedBy.firstName}} {{$ctrl.so.preparedBy.lastName}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Type: <span class="content">{{$ctrl.so.type}}</span></p></div><a target="_blank" href="/admin/shared/print-so/{{$ctrl.so.id}}" class="btn btn-info">Print Sales Order</a><div id="purchaseRequestsDiv"><table class="table table-hover"><thead><tr><th>Code</th><th>FG</th><th>Quantity</th><th>Status</th><th>Remaining</th><th></th></tr></thead><tbody><tr ng-repeat="product in $ctrl.so.products"><td>{{product.finishedGood.code}}</td><td>{{product.finishedGood.name}}</td><td>{{product.quantity}}</td><td>{{product.status}}</td><td>{{product.quantityRemaining}}</td><td><p ng-if="product.status == \'Cancelled\'">{{product.cancelReq.reason}}</p><a ng-if="product.status != \'In Transit\' && product.status != \'Incomplete\' && product.status != \'Cancelled\' " target="_blank" ng-click="$ctrl.cancelItem(product)" data-toggle="modal" data-target="#cancelItemDiv" class="btn btn-danger">Cancel</a></td></tr></tbody></table></div><div class="horizontal-align -between modal-information"><p class="title">Remarks: <span class="content">{{$ctrl.so.remarks}}</span></p></div></div><div class="modal-footer"><p class="date">Created at {{$ctrl.so.date | date}}</p><button class="btn btn-create" ng-if="$ctrl.so.status == \'Pending\'" ng-click="$ctrl.approve($ctrl.so.id)" data-dismiss="modal">Approve</button> <button class="btn btn-danger" ng-if="$ctrl.so.status == \'Pending\'" ng-click="$ctrl.reject($ctrl.so.id)">Reject</button> <button class="btn btn-cancel" data-dismiss="modal">Close</button></div></div></div></div><div class="modal fade" id="cancelItemDiv"><div class="modal-dialog -bg"><div class="modal-content"><form novalidate ng-submit="$ctrl.submitCancel();" method="post"><div class="modal-header"><h4 class="modal-title">Cancel {{$ctrl.cancelledItem.requestedItem.item.code}}</h4><button class="close"><span class="ion-android-close close-modal" data-dismiss="modal"></span></button></div><div class="horizontal-align -between modal-information"><input class="form-control -border" placeholder="Cancel reason" ng-model="$ctrl.cancelledItem.reason" type="text" name="last_name"></div><div class="modal-footer"><p class="date">Created at {{$ctrl.so.date | date}}</p><button ng-click="$ctrl.submitCancel()" data-dismiss="modal">OK</button></div></form></div></div></div>');
$templateCache.put('./view-prf-modal.html','<div class="modal fade" id="prfInfoModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">PRF No. {{ $ctrl.prf.number }} {{$ctrl.prf.date | date}}</h4><button class="close"><span class="ion-android-close close-modal" data-dismiss="modal"></span></button></div><div class="modal-body"><div class="horizontal-align -between modal-information"><p class="title">Date Needed <span class="content">{{ $ctrl.prf.dateNeeded | date }}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Requested By: <span class="content">{{$ctrl.prf.requestedBy.firstName}} {{$ctrl.prf.requestedBy.lastName}}</span></p></div><a target="_blank" href="/admin/shared/print-prf/{{$ctrl.prf.id}}" class="btn btn-info">Print Purchase Request</a><div id="purchaseRequestsDiv"><table class="table table-hover"><thead><tr><th>Code</th><th>Item</th><th>Quantity</th><th>Unit</th><th>Status</th><th></th></tr></thead><tbody><tr ng-repeat="requestedItem in $ctrl.prf.requestedItems"><td>{{requestedItem.item.code}}</td><td>{{requestedItem.item.name}}</td><td>{{requestedItem.quantityRequested}}</td><td>{{requestedItem.item.unit.code}}</td><td>{{requestedItem.status}}</td><td><p ng-if="requestedItem.status == \'Cancelled\'">{{requestedItem.cancelReq.reason}}</p><a ng-if="requestedItem.status != \'PO Created\' && requestedItem.status != \'Cancelled\' " target="_blank" ng-click="$ctrl.cancelItem(requestedItem)" data-toggle="modal" data-target="#cancelItemDiv" class="btn btn-danger">Cancel</a></td></tr></tbody></table></div><div class="horizontal-align -between modal-information"><p class="title">Remarks: <span class="content">{{$ctrl.prf.remarks}}</span></p></div></div><div class="modal-footer"><p class="date">Created at {{$ctrl.prf.date | date}}</p><button class="btn btn-create" ng-if="$ctrl.prf.status != \'Approved\' && $ctrl.prf.status != \'Rejected\' && $ctrl.prf.status != \'Cancelled\'" ng-click="$ctrl.approve($ctrl.prf.id)" data-dismiss="modal">Approve</button> <button class="btn btn-danger" ng-if="$ctrl.prf.status != \'Approved\' && $ctrl.prf.status != \'Rejected\' && $ctrl.prf.status != \'Cancelled\'" ng-click="$ctrl.reject($ctrl.prf.id)">Reject</button> <button class="btn btn-cancel" data-dismiss="modal">Close</button></div></div></div></div><div class="modal fade" id="cancelItemDiv"><div class="modal-dialog -bg"><div class="modal-content"><form novalidate ng-submit="$ctrl.submitCancel();" method="post"><div class="modal-header"><h4 class="modal-title">Cancel {{$ctrl.cancelledItem.requestedItem.item.code}}</h4><button class="close"><span class="ion-android-close close-modal" data-dismiss="modal"></span></button></div><div class="horizontal-align -between modal-information"><input class="form-control -border" placeholder="Cancel reason" ng-model="$ctrl.cancelledItem.reason" type="text" name="last_name"></div><div class="modal-footer"><p class="date">Created at {{$ctrl.prf.date | date}}</p><button ng-click="$ctrl.submitCancel()" data-dismiss="modal">OK</button></div></form></div></div></div>');
$templateCache.put('./view-stock-card.html','<div class="modal fade" id="stockCardModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Control #{{$ctrl.stockcards[0].controlNumber}}</h4><button data-dismiss="modal" class="close"><span class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="horizontal-align -between modal-information"><p class="title">Item Code: <span class="content">{{$ctrl.item.code}}</span></p><p class="title">Name: <span class="content">{{$ctrl.item.name}}</span></p></div><div class="horizontal-align -between modal-information" ng-if="$ctrl.item.unit != null"><p class="title">Unit: <span class="content">{{$ctrl.item.unit.code}}</span></p><p class="title">Type: <span class="content">{{$ctrl.item.type.name}}</span></p></div><a target="_blank" href="/admin/shared/print-stock-card/{{$ctrl.stockcards[0].controlNumber}}" class="btn btn-info">Print Stock Card</a><div class="wrapper scroll-section"><table class="table table-list"><thead><tr><th>Action</th><th>Date</th><th>User</th><th>IN/OUT</th><th>Quantity</th><th>Remarks</th></tr></thead><tbody><tr ng-repeat="stockCard in $ctrl.stockcards"><td>{{stockCard.action}}</td><td>{{stockCard.date | date}}</td><td>{{stockCard.user.firstName}} {{stockCard.user.lastName}}</td><td>{{stockCard.sign}}</td><td>{{stockCard.quantity}}</td><td>{{stockCard.remarks}}</td></tr></tbody></table></div></div><div class="modal-footer"><button class="btn btn-cancel" data-dismiss="modal">Close</button></div></div></div></div>');
$templateCache.put('./view-vp-modal.html','<div class="modal fade" id="vpModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Vouchers Payable</h4><button data-dismiss="modal" class="close"><span class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">VP Number</label><input type="text" readonly="readonly" class="form-control -border" ng-model="$ctrl.vp.number"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date</label><p class="form-control -border">{{$ctrl.vp.date | date}}</p></div></div></div></div></div></div></div><div ng-if="$ctrl.vp.variation == \'1 Voucher\'"><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm"><label class="label capitalize-text">Voucher Number</label><input disabled="disabled" type="text" ng-model="$ctrl.vp.voucher.number" readonly="readonly" class="form-control -border"></div><div class="form-group rmpm"><label class="label capitalize-text">Date</label><p class="form-control -border">{{$ctrl.vp.voucher.date | date}}</p></div></div></div><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Payee Code</label><input type="text" readonly="readonly" class="form-control -border" ng-model="$ctrl.vp.vendor.code"></div><div class="form-group field"><label class="label capitalize-text">Payee</label><input type="text" readonly="readonly" ng-model="$ctrl.vp.vendor.name" class="form-control -border"></div></div></div></div></div></div><table class="table table-list"><thead><tr><th>#</th><th>SI #</th><th>DR #</th><th>PO #</th><th>RR #</th><th>Amount</th></tr></thead><tbody><tr><td>{{$ctrl.vp.voucher.number}}</td><td>{{$ctrl.vp.voucher.siNumber}}</td><td>{{$ctrl.vp.voucher.drNumber}}</td><td>{{$ctrl.vp.voucher.poNumber}}</td><td>{{$ctrl.vp.voucher.rrNumber}}</td><td>{{$ctrl.vp.voucher.totalAmount.toFixed(2)}}</td></tr><tr ng-repeat="a in $ctrl.adjustments"><td>{{a.number}}</td><td>{{a.siNumber}}</td><td>{{a.drNumber}}</td><td>{{a.poNumber}}</td><td>{{a.rrNumber}}</td><td>{{a.totalAmount.toFixed(2)}}</td></tr></tbody><tfoot><tr><td></td><td></td><td></td><td></td><td>Total Amount:</td><td>{{$ctrl.totalAmount.toFixed(2)}}</td></tr></tfoot></table></div><div ng-if="$ctrl.vp.variation == \'Multiple PJV\'"><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm"><label class="label capitalize-text">Payee Code</label><input type="text" ng-model="$ctrl.vp.vendor.code" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Payee</label><input type="text" ng-model="$ctrl.vp.vendor.name" class="form-control -border"></div></div></div><div ng-if="$ctrl.vp.vendor"><table class="table table-list"><thead><tr><th>#</th><th>SI #</th><th>DR #</th><th>PO #</th><th>RR #</th><th>Amount</th></tr></thead><tbody><tr ng-repeat="v in $ctrl.vp.vouchers"><td>{{v.number}}</td><td>{{v.siNumber}}</td><td>{{v.drNumber}}</td><td>{{v.poNumber}}</td><td>{{v.rrNumber}}</td><td>{{v.totalAmount.toFixed(2)}}</td></tr></tbody></table></div></div><div ng-if="$ctrl.vp.variation == \'Multiple JV\'"><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm"><label class="label capitalize-text">Payee Code</label><input type="text" ng-model="$ctrl.vp.vendor.code" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Payee</label><input type="text" ng-model="$ctrl.vp.vendor.name" class="form-control -border"></div></div></div><div ng-if="$ctrl.vp.vendor"><table class="table table-list"><thead><tr><th>#</th><th>SI #</th><th>DR #</th><th>PO #</th><th>RR #</th><th>Amount</th></tr></thead><tbody><tr ng-repeat="v in $ctrl.vp.vouchers"><td>{{v.number}}</td><td>{{v.siNumber}}</td><td>{{v.drNumber}}</td><td>{{v.poNumber}}</td><td>{{v.rrNumber}}</td><td>{{v.totalAmount.toFixed(2)}}</td></tr></tbody></table></div></div><account-title-table accounttitles="$ctrl.vp.accountTitles" readonly="true"></account-title-table><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Total Debit Amount</label><input type="text" readonly="readonly" class="form-control -border" ng-model="$ctrl.vp.totalDebitAmount"></div><div class="form-group field"><label class="label capitalize-text">Total Credit Amount</label><input type="text" readonly="readonly" ng-model="$ctrl.vp.totalCreditAmount" class="form-control -border"></div></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" disabled="disabled" ng-model="$ctrl.vp.remarks"></textarea></div></div></div></div></div></div><div class="modal-footer"><p class="date">Created at {{$ctrl.vp.date | date}}</p><button class="btn btn-create" ng-if="$ctrl.vp.status == \'Pending\'" ng-click="$ctrl.approveVp($ctrl.vp.id)" data-dismiss="modal">Approve</button> <button class="btn btn-danger" ng-if="$ctrl.vp.status == \'Pending\'" ng-click="$ctrl.reject($ctrl.vp.id)" data-dismiss="modal">Reject</button> <a target="_blank" href="/admin/shared/print-vouchers-payable/{{$ctrl.vp.id}}" class="btn btn-info">Print PJV</a> <button class="btn btn-cancel" data-dismiss="modal">Close</button></div></div></div></div>');
$templateCache.put('./cash-receipt-voucher-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Cash Receipt Voucher Form</h3></div></div><header class="header-form"><a href="/admin/accounting/cash-receipt-voucher" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">New Cash Receipt Voucher Form</h3></header><cash-receipt-voucher-form crv="$ctrl.crv" message="{{ $ctrl.error }}" button="Create Cash Receipt Voucher" on-submit="$ctrl.createCashReceiptVoucher($event);"></cash-receipt-voucher-form>');
$templateCache.put('./cash-receipt-voucher-form.html','<style>.highlightred {\r\n\tbackground-color: red;\r\n}\r\n\r\n.highlight {\r\n\tbackground-color: #7ed321;\r\n}</style><form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">CRV Number</label><input type="text" class="form-control -border" ng-model="$ctrl.crv.number"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date</label><input type="text" class="form-control -border" readonly="readonly" ng-value="$ctrl.crv.date\r\n\t\t\t\t\t\t\t\t\t | date:\'dd/MM/yyyy\'"></div></div></div></div></div></div></div><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Variation</label><select class="form-control select -border" ng-model="$ctrl.crv.variation" ng-change="$ctrl.toggleVariation()"><option value="New">New</option><option value="Adjustment">Adjustment</option></select></div></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Bank Account</label><select class="form-control select -border" ng-model="$ctrl.crv.bankAccount" ng-options="b as b.name for b in $ctrl.bankAccounts" name="bankAccounts"></select></div></div></div></div></div></div></div><div ng-if="$ctrl.crv.variation == \'Adjustment\'"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">AR Number</label><input type="text" class="form-control -border" ng-model="$ctrl.crv.arNumber"></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" ng-click="$ctrl.findNewVouchers()" data-target="#selectVoucherModal" data-toggle="modal">Select Voucher</a></div><div class="form-group rmpm"><label class="label capitalize-text">Voucher Number</label><input disabled="disabled" type="text" ng-model="$ctrl.crv.voucher.number" readonly="readonly" class="form-control -border"></div><div class="form-group rmpm"><label class="label capitalize-text">Date</label><p class="form-control -border">{{$ctrl.crv.voucher.date | date}}</p></div></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm"><label class="label capitalize-text">Payee Code</label><input type="text" ng-model="$ctrl.crv.voucher.vendor.code" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Payee</label><input type="text" ng-model="$ctrl.crv.voucher.vendor.name" class="form-control -border"></div></div></div><table class="table table-list"><thead><tr><th>#</th><th>SI #</th><th>DR #</th><th>PO #</th><th>RR #</th><th>Amount</th></tr></thead><tbody><tr><td>{{$ctrl.crv.voucher.number}}</td><td>{{$ctrl.crv.voucher.siNumber}}</td><td>{{$ctrl.crv.voucher.drNumber}}</td><td>{{$ctrl.crv.voucher.poNumber}}</td><td>{{$ctrl.crv.voucher.rrNumber}}</td><td>{{$ctrl.crv.voucher.totalAmount.toFixed(2)}}</td></tr><tr ng-repeat="a in $ctrl.adjustments"><td>{{a.number}}</td><td>{{a.siNumber}}</td><td>{{a.drNumber}}</td><td>{{a.poNumber}}</td><td>{{a.rrNumber}}</td><td>{{a.totalAmount.toFixed(2)}}</td></tr></tbody><tfoot><tr><td></td><td></td><td></td><td></td><td>Total Amount:</td><td>{{$ctrl.totalAmount.toFixed(2)}}</td></tr></tfoot></table></div><account-title-table accounttitles="$ctrl.crv.accountTitles" readonly="false"></account-title-table><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" ng-model="$ctrl.crv.remarks"></textarea></div></div></div></div></div><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></form><div class="modal fade" id="selectVoucherModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Voucher</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="wrapper scroll-section"><table class="table table-hover"><thead><tr><th>Number</th><th>Date</th><th>Status</th><th>DR</th><th>SI</th><th>PO</th><th>RR</th><th></th></tr></thead><tbody><tr ng-repeat="v in $ctrl.vouchers"><td>{{v.number}}</td><td>{{v.date | date}}</td><td>{{v.status}}</td><td>{{v.drNumber}}</td><td>{{v.siNumber}}</td><td>{{v.poNumber}}</td><td>{{v.rrNumber}}</td><td><button class="btn btn-primary" ng-click="$ctrl.selectVoucher(v)" data-dismiss="modal" type="button">Select</button></td></tr></tbody></table></div></div></div></div>');
$templateCache.put('./cash-receipt-vouchers.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Cash Receipt Vouchers</h3></div><a ng-click="$ctrl.exportReport()" class="btn btn-warning btn-md button-link">Export</a> <a href="/admin/shared/print-crv-report/start/{{$ctrl.startDate}}/end/{{$ctrl.endDate}}" class="btn btn-primary btn-md button-link">Generate Report</a><!-- <a href="/admin/accounting/cash-receipt-voucher-tolling/new" ng-click="" class="btn btn-create btn-md button-link" style="background-color:blueviolet;">Create AR Tolling</a> --> <a href="/admin/accounting/cash-receipt-voucher/new" ng-click="" class="btn btn-create btn-md button-link">Create Cash Receipt Voucher</a></div><div class="client-pris"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="Cheque No" type="text" name="search" ng-model="$ctrl.searchNumber"></div><div class="search-box horizontal-align -between"><input class="form-control -borderless search" type="date" name="search" ng-model="$ctrl.startDate"> <input class="form-control -borderless search" type="date" name="search" ng-model="$ctrl.endDate"></div></div><table class="table table-list"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'number\';$ctrl.sortReverse = !$ctrl.sortReverse;">No <span ng-show="$ctrl.sortType == \'number\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'number\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'date\';$ctrl.sortReverse = !$ctrl.sortReverse;">Date <span ng-show="$ctrl.sortType == \'date\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'date\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'bankAccount\';$ctrl.sortReverse = !$ctrl.sortReverse;">Bank <span ng-show="$ctrl.sortType == \'bankAccount\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'bankAccount\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'journalVoucher\';$ctrl.sortReverse = !$ctrl.sortReverse;">Voucher <span ng-show="$ctrl.sortType == \'journalVoucher\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'journalVoucher\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'preparedBy\';$ctrl.sortReverse = !$ctrl.sortReverse;">Prepared By <span ng-show="$ctrl.sortType == \'preparedBy\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'preparedBy\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th>Variation</th><th></th></tr></thead><tbody><tr ng-repeat="crv in $ctrl.cashReceiptVouchers "><td>{{crv.number}}</td><td>{{crv.date | date}}</td><td>{{crv.bankAccount.name}}</td><td>{{crv.voucher.number}}</td><td>{{crv.preparedBy.firstName }} {{crv.preparedBy.lastName}}</td><td>{{crv.variation}}</td><td class="tablebutton-form"><div class="holder"><button class="btn btn-compose" data-toggle="modal" ng-click="$ctrl.openModal(crv)" data-target="#crvModal" class="btn btn-show"><i class="ion-ios-eye-outline"></i></button></div></td></tr></tbody></table><div class="modal fade" id="crvModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Cash Receipt Voucher</h4><button class="close"><span class="ion-android-close close-modal" data-dismiss="modal"></span></button></div><div class="modal-body"><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">CRV Number</label><input type="text" class="form-control -border" ng-model="$ctrl.crv.number"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date</label><input type="text" class="form-control -border" readonly="readonly" ng-value="$ctrl.crv.date\r\n\t\t\t\t\t\t\t\t\t | date:\'dd/MM/yyyy\'"></div></div></div></div></div></div></div><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Variation</label><select class="form-control select -border" ng-model="$ctrl.crv.variation" ng-change="$ctrl.toggleVariation()"><option value="New">New</option><option value="Adjustment">Adjustment</option></select></div></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Bank Account</label><input type="text" class="form-control -border" readonly="readonly" value="{{$ctrl.crv.bankAccount.name}}"></div></div></div></div></div></div></div><div ng-if="$ctrl.crv.variation == \'Adjustment\'"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">AR Number</label><input type="text" class="form-control -border" ng-model="$ctrl.crv.arNumber"></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" ng-click="$ctrl.findNewVouchers()" data-target="#selectVoucherModal" data-toggle="modal">Select Voucher</a></div><div class="form-group rmpm"><label class="label capitalize-text">Voucher Number</label><input disabled="disabled" type="text" ng-model="$ctrl.crv.voucher.number" readonly="readonly" class="form-control -border"></div><div class="form-group rmpm"><label class="label capitalize-text">Date</label><p class="form-control -border">{{$ctrl.crv.voucher.date | date}}</p></div></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm"><label class="label capitalize-text">Payee Code</label><input type="text" ng-model="$ctrl.crv.voucher.vendor.code" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Payee</label><input type="text" ng-model="$ctrl.crv.voucher.vendor.name" class="form-control -border"></div></div></div><table class="table table-list"><thead><tr><th>#</th><th>SI #</th><th>DR #</th><th>PO #</th><th>RR #</th><th>Amount</th></tr></thead><tbody><tr><td>{{$ctrl.crv.voucher.number}}</td><td>{{$ctrl.crv.voucher.siNumber}}</td><td>{{$ctrl.crv.voucher.drNumber}}</td><td>{{$ctrl.crv.voucher.poNumber}}</td><td>{{$ctrl.crv.voucher.rrNumber}}</td><td>{{$ctrl.crv.voucher.totalAmount.toFixed(2)}}</td></tr><tr ng-repeat="a in $ctrl.adjustments"><td>{{a.number}}</td><td>{{a.siNumber}}</td><td>{{a.drNumber}}</td><td>{{a.poNumber}}</td><td>{{a.rrNumber}}</td><td>{{a.totalAmount.toFixed(2)}}</td></tr></tbody><tfoot><tr><td></td><td></td><td></td><td></td><td>Total Amount:</td><td>{{$ctrl.totalAmount.toFixed(2)}}</td></tr></tfoot></table></div><account-title-table accounttitles="$ctrl.crv.accountTitles" readonly="true"></account-title-table><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" ng-model="$ctrl.crv.remarks"></textarea></div></div></div></div></div></div></div></div></div>');
$templateCache.put('./cheque-disbursement-form.html','<style>.highlightred{\r\n\t\tbackground-color:red;\r\n\t}\r\n\t\r\n\t.highlight{\r\n\t\tbackground-color:#7ed321;\r\n\t}</style><form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="request-action"><a href="#" class="button-link btn btn-action btn-md" data-target="#selectChequePrintingModal" data-toggle="modal">Select CP</a></div><div ng-if="$ctrl.cp.chequePrinting"><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">CP Number</label><input type="text" ng-if="$ctrl.cp.chequePrinting.number" readonly="readonly" class="form-control -border" ng-value="$ctrl.cp.chequePrinting.number"> <input type="text" ng-if="$ctrl.cp.chequePrinting.number == null" readonly="readonly" class="form-control -border" value="AUTOGENERATED UPON CREATION"></div></div></div></div></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm"><label class="label capitalize-text">Payee Code</label><input type="text" ng-model="$ctrl.cp.chequePrinting.vendor.code" readonly="readonly" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Payee</label><input type="text" ng-model="$ctrl.cp.chequePrinting.vendor.name" readonly="readonly" class="form-control -border"></div></div></div><div ng-if="$ctrl.cp.chequePrinting.vendor"><table class="table table-list"><thead><tr><th>VP #</th><th>Date</th><th>Payee</th><th>Remarks</th><th>Amount</th><th>View</th></tr></thead><tbody><tr ng-repeat="v in $ctrl.cp.chequePrinting.payables"><td>{{v.number}}</td><td>{{v.date | date}}</td><td>{{v.vendor.name}}</td><td>{{v.remarks}}</td><td>{{v.totalAmount.toFixed(2)}}</td><td><a href="#" class="button-link btn btn-primary btn-md" ng-click="$ctrl.viewVp(v)" data-target="#vpModal" data-toggle="modal">View</a></td></tr></tbody><tfoot><tr><th></th><th></th><th></th><th></th><th>Total Amount:</th><th>{{$ctrl.cp.chequePrinting.totalAmount.toFixed(2)}}</th></tr></tfoot></table></div><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Cheque No</label><input type="text" ng-model="$ctrl.cp.chequePrinting.chequeNumber" readonly="readonly" class="form-control -border"></div></div></div><div class="side-two"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Cheque Date</label><input type="text" ng-model="$ctrl.cp.chequePrinting.chequeDate" readonly="readonly" class="form-control -border"></div></div></div></div></div></div><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Payee Name</label><input type="text" ng-model="$ctrl.cp.chequePrinting.payeeName" readonly="readonly" class="form-control -border"></div></div></div><div class="side-two"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Bank Account</label><input type="text" ng-model="$ctrl.cp.chequePrinting.bankAccount.name" readonly="readonly" class="form-control -border"></div></div></div></div></div></div><account-title-table accounttitles="$ctrl.cp.accountTitles" , readonly="false"></account-title-table><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></div></form><div class="modal fade" id="selectChequePrintingModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Select CP</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="CP No" type="text" name="search" ng-model="$ctrl.searchNumber"> <input class="form-control -borderless search" placeholder="Date" type="text" name="search" ng-model="$ctrl.searchDate"></div><div class="wrapper scroll-section"><table class="table table-hover"><thead><tr><th>CP #</th><th>Code</th><th>Name</th><th>Cheque #</th><th>Cheque Date</th><th>Amount</th><th>Status</th></tr></thead><tbody><tr data-dismiss="modal" ng-repeat="p in $ctrl.cpList" ng-click="$ctrl.selectChequePrinting(p)"><td>{{p.number}}</td><td>{{p.vendor.code}}</td><td>{{p.vendor.name}}</td><td>{{p.chequeNumber}}</td><td>{{p.chequeDate | date}}</td><td>{{p.totalAmount}}</td><td>{{p.status}}</td></tr></tbody></table></div></div></div></div><view-vp-modal vp="$ctrl.vp"></view-vp-modal>');
$templateCache.put('./cheque-disbursement-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Cheque Disbursement Form</h3></div></div><header class="header-form"><a href="/admin/accounting/cheque-disbursement" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">New Cheque Disbursement Form</h3></header><cheque-disbursement-form cp="$ctrl.cp" message="{{ $ctrl.error }}" button="Create Cheque Disbursement" on-submit="$ctrl.createChequeDisbursement($event);"></cheque-disbursement-form>');
$templateCache.put('./cheque-disbursements.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Cheque Disbursements</h3></div><!-- <a href="/admin/accounting/cheque-disbursement-tolling/new" ng-click="" class="btn btn-create btn-md button-link" style="background-color:blueviolet;">Create AR Tolling</a> --> <a href="/admin/accounting/cheque-disbursement/new" ng-click="" class="btn btn-create btn-md button-link">Create Cheque Disbursement</a></div><div class="client-pris"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="Cheque No" type="text" name="search" ng-model="$ctrl.searchNumber"></div></div><table class="table table-list"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'number\';$ctrl.sortReverse = !$ctrl.sortReverse;">No <span ng-show="$ctrl.sortType == \'number\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'number\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'date\';$ctrl.sortReverse = !$ctrl.sortReverse;">Date <span ng-show="$ctrl.sortType == \'date\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'date\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'payeeName\';$ctrl.sortReverse = !$ctrl.sortReverse;">Payee Name <span ng-show="$ctrl.sortType == \'payeeName\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'payeeName\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'chequeNumber\';$ctrl.sortReverse = !$ctrl.sortReverse;">Cheque No <span ng-show="$ctrl.sortType == \'chequeNumber\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'chequeNumber\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'chequeDate\';$ctrl.sortReverse = !$ctrl.sortReverse;">Cheque Date <span ng-show="$ctrl.sortType == \'chequeDate\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'chequeDate\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'bankAccount\';$ctrl.sortReverse = !$ctrl.sortReverse;">Bank Acc <span ng-show="$ctrl.sortType == \'bankAccount\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'bankAccount\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'totalAmount\';$ctrl.sortReverse = !$ctrl.sortReverse;">Amount <span ng-show="$ctrl.sortType == \'totalAmount\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'totalAmount\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="cp in $ctrl.chequeDisbursements "><td>{{cp.chequePrinting.number}}</td><td>{{cp.chequePrinting.vendor.code}}</td><td>{{cp.chequePrinting.vendor.name}}</td><td>{{cp.chequePrinting.chequeNumber}}</td><td>{{cp.chequePrinting.chequeDate | date}}</td><td>{{cp.chequePrinting.bankAccount.name}}</td><td>{{cp.chequePrinting.totalAmount}}</td><td class="tablebutton-form"><div class="holder"><button class="btn btn-compose" data-toggle="modal" ng-click="$ctrl.openModal(cp)" data-target="#cpModal" class="btn btn-show"><i class="ion-ios-eye-outline"></i></button></div></td></tr></tbody></table><div class="modal fade" id="cpModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Select CP</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">CP Number</label><input type="text" ng-if="$ctrl.cp.chequePrinting.number" readonly="readonly" class="form-control -border" ng-value="$ctrl.cp.chequePrinting.number"> <input type="text" ng-if="$ctrl.cp.chequePrinting.number == null" readonly="readonly" class="form-control -border" value="AUTOGENERATED UPON CREATION"></div></div></div></div></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm"><label class="label capitalize-text">Payee Code</label><input type="text" ng-model="$ctrl.cp.chequePrinting.vendor.code" readonly="readonly" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Payee</label><input type="text" ng-model="$ctrl.cp.chequePrinting.vendor.name" readonly="readonly" class="form-control -border"></div></div></div><div ng-if="$ctrl.cp.chequePrinting.vendor"><table class="table table-list"><thead><tr><th>VP #</th><th>Date</th><th>Payee</th><th>Remarks</th><th>Amount</th><th>View</th></tr></thead><tbody><tr ng-repeat="v in $ctrl.cp.chequePrinting.payables"><td>{{v.number}}</td><td>{{v.date | date}}</td><td>{{v.vendor.name}}</td><td>{{v.remarks}}</td><td>{{v.totalAmount.toFixed(2)}}</td><td><a href="#" class="button-link btn btn-primary btn-md" ng-click="$ctrl.viewVp(v)" data-target="#vpModal" data-toggle="modal">View</a></td></tr></tbody><tfoot><tr><th></th><th></th><th></th><th></th><th>Total Amount:</th><th>{{$ctrl.cp.chequePrinting.totalAmount.toFixed(2)}}</th></tr></tfoot></table></div><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Cheque No</label><input type="text" ng-model="$ctrl.cp.chequePrinting.chequeNumber" readonly="readonly" class="form-control -border"></div></div></div><div class="side-two"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Cheque Date</label><input type="text" ng-model="$ctrl.cp.chequePrinting.chequeDate" readonly="readonly" class="form-control -border"></div></div></div></div></div></div><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Payee Name</label><input type="text" ng-model="$ctrl.cp.chequePrinting.payeeName" readonly="readonly" class="form-control -border"></div></div></div><div class="side-two"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Bank Account</label><input type="text" ng-model="$ctrl.cp.chequePrinting.bankAccount.name" readonly="readonly" class="form-control -border"></div></div></div></div></div></div><account-title-table accounttitles="$ctrl.cp.accountTitles" , readonly="false"></account-title-table></div></div></div>');
$templateCache.put('./cheque-printing-form.html','<style>.highlightred{\r\n\t\tbackground-color:red;\r\n\t}\r\n\t\r\n\t.highlight{\r\n\t\tbackground-color:#7ed321;\r\n\t}</style><form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">CP Number</label><input type="text" ng-if="$ctrl.cp.number" readonly="readonly" class="form-control -border" ng-value="$ctrl.cp.number"> <input type="text" ng-if="$ctrl.cp.number == null" readonly="readonly" class="form-control -border" value="AUTOGENERATED UPON CREATION"></div></div></div></div></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" data-target="#findVendorModal" data-toggle="modal">Select Payee</a></div><div class="form-group rmpm"><label class="label capitalize-text">Payee Code</label><input type="text" ng-model="$ctrl.cp.vendor.code" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Payee</label><input type="text" ng-model="$ctrl.cp.vendor.name" class="form-control -border"></div></div></div><div ng-if="$ctrl.cp.vendor"><table class="table table-list"><thead><tr><th>VP #</th><th>Date</th><th>Payee</th><th>Remarks</th><th>Amount</th><th>View</th></tr></thead><tbody><tr ng-repeat="v in $ctrl.cp.payables"><td>{{v.number}}</td><td>{{v.date | date}}</td><td>{{v.vendor.name}}</td><td>{{v.remarks}}</td><td>{{v.totalAmount.toFixed(2)}}</td><td><a href="#" class="button-link btn btn-primary btn-md" ng-click="$ctrl.viewVp(v)" data-target="#vpModal" data-toggle="modal">View</a></td></tr></tbody><tfoot><tr><th></th><th></th><th></th><th></th><th>Total Amount:</th><th>{{$ctrl.totalAmount.toFixed(2)}}</th></tr></tfoot></table><div class="request-action"><a href="#" class="button-link btn btn-action btn-md" ng-click="$ctrl.findVouchersPayable()" data-target="#selectMultipleVoucherModal" data-toggle="modal">Select Voucher</a></div></div><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Cheque No</label><input type="text" ng-model="$ctrl.cp.chequeNumber" class="form-control -border"></div></div></div><div class="side-two"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Cheque Date</label><input type="date" ng-model="$ctrl.cp.chequeDate" class="form-control -border"></div></div></div></div></div></div><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Payee Name</label><input type="text" ng-model="$ctrl.cp.payeeName" class="form-control -border"></div></div></div><div class="side-two"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Bank Account</label><select class="form-control select -border" ng-model="$ctrl.cp.bankAccount" ng-options="b as b.name for b in $ctrl.bankAccounts" name="bankAccounts"></select></div></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" ng-model="$ctrl.cp.remarks"></textarea></div></div></div></div></div><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></form><div class="modal fade" id="selectMultipleVoucherModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Select VP</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="VP No" type="text" name="search" ng-model="$ctrl.searchNumber"> <input class="form-control -borderless search" placeholder="Date" type="text" name="search" ng-model="$ctrl.searchDate"></div><div class="wrapper scroll-section"><table class="table table-hover"><thead><tr><th>VP #</th><th>Date</th><th>Payee</th><th>Remarks</th><th>Amount</th></tr></thead><tbody><tr ng-click="$ctrl.selectMultipleVouchers(p) | filter: {number: $ctrl.searchNumber, date: $ctrl.searchDate} " ng-class="{highlight: $ctrl.cp.payables.indexOf(p) !== -1}" ng-repeat="p in $ctrl.payables"><td>{{p.number}}</td><td>{{p.date | date}}</td><td>{{p.vendor.name}}</td><td>{{p.remarks}}</td><td>{{p.totalAmount.toFixed(2)}}</td></tr></tbody></table></div></div></div></div><find-vendor-modal vendor="$ctrl.cp.vendor" message="{{ $ctrl.error }}" button="Select Vendor"></find-vendor-modal><view-vp-modal vp="$ctrl.vp"></view-vp-modal>');
$templateCache.put('./cheque-printing-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Cheque Printing Form</h3></div></div><header class="header-form"><a href="/admin/accounting/cheque-printing" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">New Cheque Printing Form</h3></header><cheque-printing-form cp="$ctrl.cp" message="{{ $ctrl.error }}" button="Create Cheque Printing" on-submit="$ctrl.createChequePrinting($event);"></cheque-printing-form>');
$templateCache.put('./cheque-printings.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Cheque Printings</h3></div><!-- <a href="/admin/accounting/cheque-printing-tolling/new" ng-click="" class="btn btn-create btn-md button-link" style="background-color:blueviolet;">Create AR Tolling</a> --> <a href="/admin/accounting/cheque-printing/new" ng-click="" class="btn btn-create btn-md button-link">Create Cheque Printing</a></div><div class="client-pris"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="Cheque No" type="text" name="search" ng-model="$ctrl.searchNumber"></div></div><table class="table table-list"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'number\';$ctrl.sortReverse = !$ctrl.sortReverse;">No <span ng-show="$ctrl.sortType == \'number\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'number\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'payeeCode\';$ctrl.sortReverse = !$ctrl.sortReverse;">Payee Code <span ng-show="$ctrl.sortType == \'payeeCode\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'payeeCode\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'payeeName\';$ctrl.sortReverse = !$ctrl.sortReverse;">Payee Name <span ng-show="$ctrl.sortType == \'payeeName\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'payeeName\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'chequeNumber\';$ctrl.sortReverse = !$ctrl.sortReverse;">Cheque No <span ng-show="$ctrl.sortType == \'chequeNumber\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'chequeNumber\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'chequeDate\';$ctrl.sortReverse = !$ctrl.sortReverse;">Cheque Date <span ng-show="$ctrl.sortType == \'chequeDate\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'chequeDate\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'totalAmount\';$ctrl.sortReverse = !$ctrl.sortReverse;">Amount <span ng-show="$ctrl.sortType == \'totalAmount\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'totalAmount\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th>Status</th><th></th></tr></thead><tbody><tr ng-repeat="cp in $ctrl.chequePrintings "><td>{{cp.number}}</td><td>{{cp.vendor.code}}</td><td>{{cp.vendor.name}}</td><td>{{cp.chequeNumber}}</td><td>{{cp.chequeDate | date}}</td><td>{{cp.totalAmount}}</td><td>{{cp.status}}</td><td class="tablebutton-form"><div class="holder"><button class="btn btn-compose" data-toggle="modal" ng-click="$ctrl.openModal(cp)" data-target="#cpModal" class="btn btn-show"><i class="ion-ios-eye-outline"></i></button> <button class="btn btn-compose" ng-if="cp.status == \'Pending\'"><i class="ion-ios-compose-outline" ng-click="$ctrl.goToEdit(cp.id)"></i></button></div></td></tr></tbody></table><div class="modal fade" id="cpModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Cheque Printing</h4><button data-dismiss="modal" class="close"><span class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">CP Number</label><input type="text" ng-if="$ctrl.cp.number" readonly="readonly" class="form-control -border" ng-value="$ctrl.cp.number"> <input type="text" ng-if="$ctrl.cp.number == null" readonly="readonly" class="form-control -border" value="AUTOGENERATED UPON CREATION"></div></div></div></div></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm"><label class="label capitalize-text">Payee Code</label><input type="text" ng-model="$ctrl.cp.vendor.code" readonly="readonly" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Payee</label><input type="text" ng-model="$ctrl.cp.vendor.name" readonly="readonly" class="form-control -border"></div></div></div><div ng-if="$ctrl.cp.vendor"><table class="table table-list"><thead><tr><th>VP #</th><th>Date</th><th>Payee</th><th>Remarks</th><th>Amount</th><th>View</th></tr></thead><tbody><tr ng-repeat="v in $ctrl.cp.payables"><td>{{v.number}}</td><td>{{v.date | date}}</td><td>{{v.vendor.name}}</td><td>{{v.remarks}}</td><td>{{v.totalAmount.toFixed(2)}}</td><td><a href="#" class="button-link btn btn-primary btn-md" ng-click="$ctrl.viewVp(v)" data-target="#vpModal" data-toggle="modal">View</a></td></tr></tbody><tfoot><tr><th></th><th></th><th></th><th></th><th>Total Amount:</th><th>{{$ctrl.totalAmount.toFixed(2)}}</th></tr></tfoot></table></div><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Cheque No</label><input type="text" ng-model="$ctrl.cp.chequeNumber" readonly="readonly" class="form-control -border"></div></div></div><div class="side-two"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Cheque Date</label><input type="date" ng-model="$ctrl.cp.chequeDate" readonly="readonly" class="form-control -border"></div></div></div></div></div></div><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Payee Name</label><input type="text" ng-model="$ctrl.cp.payeeName" readonly="readonly" class="form-control -border"></div></div></div><div class="side-two"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Bank Account</label><select class="form-control select -border" readonly="readonly" ng-model="$ctrl.cp.bankAccount" ng-options="b as b.name for b in $ctrl.bankAccounts" name="bankAccounts"></select></div></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" ng-model="$ctrl.cp.remarks"></textarea></div></div></div></div></div></div><div class="modal-footer"><p class="date">Created at {{$ctrl.cp.date | date}}</p><a ng-click="$ctrl.approve($ctrl.cp.id)" data-dismiss="modal" class="btn btn-info">Approve</a> <a target="_blank" href="/admin/shared/print-purchase-voucher/{{$ctrl.pv.id}}" class="btn btn-info">Print Cheque</a></div></div></div></div><view-vp-modal vp="$ctrl.vp"></view-vp-modal>');
$templateCache.put('./journal-voucher-edit.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Journal Voucher Form</h3></div></div><header class="header-form"><a href="/admin/accounting/journal-voucher" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">Edit Journal Voucher Form</h3></header><journal-voucher-form jv="$ctrl.jv" message="{{ $ctrl.error }}" button="Save" on-submit="$ctrl.editJournalVoucher($event);"></journal-voucher-form>');
$templateCache.put('./journal-voucher-form.html','<style>.highlightred{\r\n\t\tbackground-color:red;\r\n\t}</style><form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">JV Number</label><input type="text" ng-if="$ctrl.jv.number" readonly="readonly" class="form-control -border" ng-value="$ctrl.jv.number"> <input type="text" ng-if="$ctrl.jv.number == null" readonly="readonly" class="form-control -border" value="AUTOGENERATED UPON CREATION"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date</label><input type="text" class="form-control -border" readonly="readonly" ng-value="$ctrl.jv.date\r\n\t\t\t\t\t\t\t\t\t | date:\'dd/MM/yyyy\'"></div></div></div></div></div></div></div><input type="radio" ng-model="$ctrl.adjustment" ng-checked="!$ctrl.jv.adjustment" value="auto" ng-change="$ctrl.toggleAdjustment(false)"> New <input type="radio" ng-model="$ctrl.adjustment" ng-checked="$ctrl.jv.adjustment" value="manual" ng-change="$ctrl.toggleAdjustment(true)"> With Adjustment<div ng-if="!$ctrl.jv.adjustment"><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" data-target="#findVendorModal" data-toggle="modal">Select Vendor</a></div><div class="form-group rmpm"><label class="label capitalize-text">Payee Code</label><input type="text" ng-model="$ctrl.jv.vendor.code" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Payee</label><input type="text" ng-model="$ctrl.jv.vendor.name" class="form-control -border"></div></div></div><table class="table table-list"><tbody><tr><th>SI #</th><td><input type="text" ng-model="$ctrl.jv.siNumber"></td></tr><tr><th>DR #</th><td><input type="text" ng-model="$ctrl.jv.drNumber"></td></tr><tr><th>PO #</th><td><input type="text" ng-model="$ctrl.jv.poNumber"></td></tr><tr><th>RR #</th><td><input type="text" ng-model="$ctrl.jv.rrNumber"></td><th>Date</th><td><input type="date" ng-model="$ctrl.jv.rrDate"></td></tr></tbody></table></div><div ng-if="$ctrl.jv.adjustment"><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" ng-click="$ctrl.findNewVouchers()" data-target="#selectVoucherModal" data-toggle="modal">Select Voucher</a></div><div class="form-group rmpm"><label class="label capitalize-text">Voucher Number</label><input disabled="disabled" type="text" ng-model="$ctrl.jv.voucher.number" readonly="readonly" class="form-control -border"></div><div class="form-group rmpm"><label class="label capitalize-text">Date</label><p class="form-control -border">{{$ctrl.jv.voucher.date | date}}</p></div></div></div><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Payee Code</label><input type="text" readonly="readonly" class="form-control -border" ng-model="$ctrl.jv.vendor.code"></div><div class="form-group field"><label class="label capitalize-text">Payee</label><input type="text" readonly="readonly" ng-model="$ctrl.jv.vendor.name" class="form-control -border"></div></div></div></div></div></div><table class="table table-list"><tbody><tr><th>SI #</th><td>{{$ctrl.jv.siNumber}}</td></tr><tr><th>DR #</th><td>{{$ctrl.jv.drNumber}}</td></tr><tr><th>PO #</th><td>{{$ctrl.jv.poNumber}}</td></tr><tr><th>RR #</th><td>{{$ctrl.jv.rrNumber}}</td><th>Date</th><td>{{$ctrl.jv.rrDate | date}}</td></tr></tbody></table></div><account-title-table accounttitles="$ctrl.jv.accountTitles" , readonly="false"></account-title-table><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" ng-model="$ctrl.jv.remarks"></textarea></div></div></div></div></div><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></form><div class="modal fade" id="selectVoucherModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Voucher</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="Voucher No" type="text" name="search" ng-model="$ctrl.searchNumber"> <input class="form-control -borderless search" placeholder="RR No" type="text" name="search" ng-model="$ctrl.searchRRNumber"></div><div class="wrapper scroll-section"><table class="table table-hover"><thead><tr><th>Number</th><th>Date</th><th>Status</th><th>DR</th><th>SI</th><th>PO</th><th>RR</th><th></th></tr></thead><tbody><tr ng-repeat="v in $ctrl.vouchers | filter: {number: $ctrl.searchNumber, rrNumber: $ctrl.searchRRNumber}"><td>{{v.number}}</td><td>{{v.date | date}}</td><td>{{v.status}}</td><td>{{v.drNumber}}</td><td>{{v.siNumber}}</td><td>{{v.poNumber}}</td><td>{{v.rrNumber}}</td><td><button class="btn btn-primary" ng-click="$ctrl.selectVoucher(v)" data-dismiss="modal" type="button">Select</button></td></tr></tbody></table></div></div></div></div><find-vendor-modal vendor="$ctrl.jv.vendor" message="{{ $ctrl.error }}" button="Select Vendor"></find-vendor-modal>');
$templateCache.put('./journal-voucher-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Journal Voucher Form</h3></div></div><header class="header-form"><a href="/admin/accounting/journal-voucher" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">New Journal Voucher Form</h3></header><journal-voucher-form jv="$ctrl.jv" message="{{ $ctrl.error }}" button="Create Journal Voucher" on-submit="$ctrl.createJournalVoucher($event);"></journal-voucher-form>');
$templateCache.put('./credit-memo-form.html','<form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Credit Memo #</label><input type="text" readonly="readonly" class="form-control -border" value="AUTOGENERATED UPON CREATION"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date</label><input type="date" class="form-control -border" ng-model="$ctrl.cm.date"></div></div></div></div></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm"><label class="label capitalize-text">Depot Code</label><select class="form-control select -border" ng-model="$ctrl.cm.depot.id" ng-options="d.id as d.code for d in $ctrl.depots" name="depot"></select></div></div></div><div ng-if="$ctrl.cm.depot"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><h5>Memo Type</h5><div class="horizontal-align -between content"><div class="form-group field"><select class="form-control select -border" ng-model="$ctrl.cm.type.id" ng-options="m.id as m.code for m in $ctrl.memoTypes" name="memo"></select></div></div></div></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" ng-click="$ctrl.loadSalesSlips()">Select DR/SI, OS</a></div><div class="form-group rmpm"><label class="label capitalize-text">Reference #</label><input type="text" ng-model="$ctrl.cm.reference.number" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Remaining Balance</label><input type="text" ng-model="$ctrl.cm.reference.remainingBalance" class="form-control -border"></div></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm"><label class="label capitalize-text">Client Code</label><input type="text" ng-model="$ctrl.cm.reference.salesOrder.client.code" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Client</label><input type="text" ng-model="$ctrl.cm.reference.salesOrder.client.name" class="form-control -border"></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Amount Paid</label><input type="number" class="form-control -border" ng-model="$ctrl.cm.amount"></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" ng-model="$ctrl.cm.remarks"></textarea></div></div></div></div></div><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></div></form><find-sales-slip-modal ss="$ctrl.cm.reference" salesslips="$ctrl.salesSlips" message="{{ $ctrl.error }}" button="Select Sales Slip"></find-sales-slip-modal>');
$templateCache.put('./journal-vouchers.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Journal Vouchers</h3></div><!-- <a href="/admin/accounting/purchase-voucher-tolling/new" ng-click="" class="btn btn-create btn-md button-link" style="background-color:blueviolet;">Create AR Tolling</a> --> <a ng-click="$ctrl.exportReport()" class="btn btn-warning btn-md button-link">Export</a> <a href="/admin/shared/print-journal-report/start/{{$ctrl.startDate}}/end/{{$ctrl.endDate}}" class="btn btn-primary btn-md button-link">Journal Report</a> <a href="/admin/shared/print-jv-report/start/{{$ctrl.startDate}}/end/{{$ctrl.endDate}}" class="btn btn-primary btn-md button-link">Generate Report</a> <a href="/admin/accounting/journal-voucher/new" ng-click="" class="btn btn-create btn-md button-link">Create JV</a></div><div class="client-pris"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="JV No" type="text" name="search" ng-model="$ctrl.searchNumber"> <input class="form-control -borderless search" placeholder="RR No" type="text" name="search" ng-model="$ctrl.searchRRNumber"></div><div class="search-box horizontal-align -between"><input class="form-control -borderless search" type="date" name="search" ng-model="$ctrl.startDate"> <input class="form-control -borderless search" type="date" name="search" ng-model="$ctrl.endDate"></div></div><table class="table table-list"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'number\';$ctrl.sortReverse = !$ctrl.sortReverse;">JV No <span ng-show="$ctrl.sortType == \'number\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'number\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'rrNumber\';$ctrl.sortReverse = !$ctrl.sortReverse;">RR No <span ng-show="$ctrl.sortType == \'rrNumber\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'rrNumber\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'materialType\';$ctrl.sortReverse = !$ctrl.sortReverse;">Vendor <span ng-show="$ctrl.sortType == \'materialType\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'materialType\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'quantity\';$ctrl.sortReverse = !$ctrl.sortReverse;">DR <span ng-show="$ctrl.sortType == \'quantity\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'quantity\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'drNumber\';$ctrl.sortReverse = !$ctrl.sortReverse;">SI <span ng-show="$ctrl.sortType == \'drNumber\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'drNumber\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'drsi\';$ctrl.sortReverse = !$ctrl.sortReverse;">PO <span ng-show="$ctrl.sortType == \'drsi\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'drsi\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'drsi\';$ctrl.sortReverse = !$ctrl.sortReverse;">Amount <span ng-show="$ctrl.sortType == \'drsi\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'drsi\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'drsi\';$ctrl.sortReverse = !$ctrl.sortReverse;">Status <span ng-show="$ctrl.sortType == \'drsi\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'drsi\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="jv in $ctrl.journalVouchers | filter: {number: $ctrl.searchNumber, rrNumber: $ctrl.searchRRNumber} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{jv.number}}</td><td>{{jv.rrNumber}}</td><td>{{jv.vendor.name}}</td><td>{{jv.drNumber}}</td><td>{{jv.siNumber}}</td><td>{{jv.poNumber}}</td><td>{{jv.totalAmount}}</td><td>{{jv.status}}</td><td class="tablebutton-form"><div class="holder"><button class="btn btn-compose" data-toggle="modal" ng-click="$ctrl.openModal(jv)" data-target="#jvModal" class="btn btn-show"><i class="ion-ios-eye-outline"></i></button> <button class="btn btn-compose" ng-if="jv.status == \'Pending\'"><i class="ion-ios-compose-outline" ng-click="$ctrl.goToEdit(jv.id)"></i></button></div></td></tr></tbody></table><div class="modal fade" id="jvModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Journal Voucher</h4><button data-dismiss="modal" class="close"><span class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">JV Number</label><input type="text" readonly="readonly" class="form-control -border" ng-model="$ctrl.jv.number"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date</label><p class="form-control -border">{{$ctrl.jv.date | date}}</p></div></div></div></div></div></div></div><div><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">RR Number</label><input type="text" readonly="readonly" class="form-control -border" ng-model="$ctrl.jv.rrNumber"></div><div class="form-group field"><label class="label capitalize-text">Date</label><p class="form-control -border">{{$ctrl.jv.rrDate | date}}</p></div></div></div></div></div></div><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Payee Code</label><input type="text" readonly="readonly" class="form-control -border" ng-model="$ctrl.jv.vendor.code"></div><div class="form-group field"><label class="label capitalize-text">Payee</label><input type="text" readonly="readonly" ng-model="$ctrl.jv.vendor.name" class="form-control -border"></div></div></div></div></div></div><table class="table table-list"><tbody><tr><th>SI #</th><td>{{$ctrl.jv.siNumber}}</td></tr><tr><th>DR #</th><td>{{$ctrl.jv.drNumber}}</td></tr><tr><th>PO #</th><td>{{$ctrl.jv.poNumber}}</td></tr></tbody></table></div><account-title-table accounttitles="$ctrl.jv.accountTitles" readonly="true"></account-title-table><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Total Debit Amount</label><input type="text" readonly="readonly" class="form-control -border" ng-model="$ctrl.jv.totalDebitAmount"></div><div class="form-group field"><label class="label capitalize-text">Total Credit Amount</label><input type="text" readonly="readonly" ng-model="$ctrl.jv.totalCreditAmount" class="form-control -border"></div></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" disabled="disabled" ng-model="$ctrl.jv.remarks"></textarea></div></div></div></div></div></div><div class="modal-footer"><p class="date">Created at {{$ctrl.jv.date | date}}</p><button class="btn btn-create" ng-if="$ctrl.jv.status == \'Pending\'" ng-click="$ctrl.approve($ctrl.jv.id)" data-dismiss="modal">Approve</button> <button class="btn btn-danger" ng-if="$ctrl.jv.status == \'Pending\'" ng-click="$ctrl.reject($ctrl.jv.id)" data-dismiss="modal">Reject</button> <a target="_blank" href="/admin/shared/print-journal-voucher/{{$ctrl.jv.id}}" class="btn btn-info">Print JV</a> <button class="btn btn-cancel" data-dismiss="modal">Close</button></div></div></div></div>');
$templateCache.put('./credit-memo-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Credit Memos</h3></div></div><header class="header-form"><a href="/admin/accounting/credit-memo" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">New Credit Memo Form</h3></header><credit-memo-form cm="$ctrl.cm" message="{{ $ctrl.error }}" button="Create Credit Memo" on-submit="$ctrl.createCreditMemo($event);"></credit-memo-form>');
$templateCache.put('./credit-memos.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Credit Memos</h3></div><a ng-click="$ctrl.exportReport()" class="btn btn-warning btn-md button-link">Export</a> <a href="/admin/shared/print-cmdm-report/depot/{{$ctrl.userAssignedDepot.id}}/{{$ctrl.startDate}}/end/{{$ctrl.endDate}}" class="btn btn-primary btn-md button-link">Generate Report</a> <a href="#" ng-click="$ctrl.createNewCreditMemo($event);" class="btn btn-create btn-md button-link">Create New CM</a></div><div class="client-pris"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="Credit Memo No" type="text" name="search" ng-model="$ctrl.searchNumber"> <input class="form-control -borderless search" placeholder="Date" type="text" name="search" ng-model="$ctrl.searchDate"></div></div><div class="search-box horizontal-align -between"><input class="form-control -borderless search" type="date" name="search" ng-model="$ctrl.startDate"> <input class="form-control -borderless search" type="date" name="search" ng-model="$ctrl.endDate"></div><div class="search-box horizontal-align -between"><select class="form-control select" ng-model="$ctrl.userAssignedDepot.id" ng-change="$ctrl.selectDepot()" ng-options="d.id as d.name for d in $ctrl.userAssignedDepots" name="fromDepots"></select></div><table class="table table-list"><thead><tr><th>CM No.</th><th>Date</th><th>Type</th><th>Client</th><th>Amount</th><th>Depot</th><th></th></tr></thead><tbody><tr ng-repeat="cm in $ctrl.creditMemos | filter: {date: $ctrl.searchDate, number: $ctrl.searchNumber} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{cm.id}}</td><td>{{cm.date | date}}</td><td>{{cm.type.code}}</td><td>{{cm.reference.salesOrder.client.name}}</td><td>{{cm.amount.toFixed(2)}}</td><td>{{cm.depot.name}}</td><td class="tablebutton-form"><div class="holder"><button data-toggle="modal" ng-click="$ctrl.openModal(cm)" class="btn btn-show"><i class="ion-ios-eye-outline"></i></button></div></td></tr></tbody></table>');
$templateCache.put('./debit-memo-form.html','<form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Debit Memo #</label><input type="text" readonly="readonly" class="form-control -border" value="AUTOGENERATED UPON CREATION"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date</label><input type="date" class="form-control -border" ng-model="$ctrl.dm.date"></div></div></div></div></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm"><label class="label capitalize-text">Depot Code</label><select class="form-control select -border" ng-model="$ctrl.dm.depot.id" ng-options="d.id as d.code for d in $ctrl.depots" name="depot"></select></div></div></div><div ng-if="$ctrl.dm.depot"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><h5>Memo Type</h5><div class="horizontal-align -between content"><div class="form-group field"><select class="form-control select -border" ng-model="$ctrl.dm.type.id" ng-options="m.id as m.code for m in $ctrl.memoTypes" name="memo"></select></div></div></div></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" ng-click="$ctrl.loadSalesSlips()">Select DR/SI, OS</a></div><div class="form-group rmpm"><label class="label capitalize-text">Reference #</label><input type="text" ng-model="$ctrl.dm.reference.number" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Remaining Balance</label><input type="text" ng-model="$ctrl.dm.reference.remainingBalance" class="form-control -border"></div></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm"><label class="label capitalize-text">Client Code</label><input type="text" ng-model="$ctrl.dm.reference.salesOrder.client.code" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Client</label><input type="text" ng-model="$ctrl.dm.reference.salesOrder.client.name" class="form-control -border"></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Amount Paid</label><input type="number" class="form-control -border" ng-model="$ctrl.dm.amount"></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" ng-model="$ctrl.dm.remarks"></textarea></div></div></div></div></div><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></div></form><find-sales-slip-modal ss="$ctrl.dm.reference" salesslips="$ctrl.salesSlips" message="{{ $ctrl.error }}" button="Select Sales Slip"></find-sales-slip-modal>');
$templateCache.put('./debit-memos.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Debit Memos</h3></div><a href="#" ng-click="$ctrl.createNewDebitMemo($event);" class="btn btn-create btn-md button-link">Create New DM</a></div><div class="client-pris"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="Debit Memo No" type="text" name="search" ng-model="$ctrl.searchNumber"> <input class="form-control -borderless search" placeholder="Date" type="text" name="search" ng-model="$ctrl.searchDate"></div></div><div class="search-box horizontal-align -between"><select class="form-control select" ng-model="$ctrl.userAssignedDepot.id" ng-change="$ctrl.selectDepot()" ng-options="d.id as d.name for d in $ctrl.userAssignedDepots" name="fromDepots"></select></div><table class="table table-list"><thead><tr><th>DM No.</th><th>Date</th><th>Type</th><th>Client</th><th>Amount</th><th>Depot</th><th></th></tr></thead><tbody><tr ng-repeat="cm in $ctrl.debitMemos | filter: {date: $ctrl.searchDate, number: $ctrl.searchNumber} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{cm.id}}</td><td>{{cm.date | date}}</td><td>{{cm.type.code}}</td><td>{{cm.reference.salesOrder.client.name}}</td><td>{{cm.amount.toFixed(2)}}</td><td>{{cm.depot.name}}</td><td class="tablebutton-form"><div class="holder"><button data-toggle="modal" ng-click="$ctrl.openModal(cm)" class="btn btn-show"><i class="ion-ios-eye-outline"></i></button></div></td></tr></tbody></table>');
$templateCache.put('./debit-memo-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Debit Memos</h3></div></div><header class="header-form"><a href="/admin/accounting/debit-memo" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">New Debit Memo Form</h3></header><debit-memo-form dm="$ctrl.dm" message="{{ $ctrl.error }}" button="Create Debit Memo" on-submit="$ctrl.createDebitMemo($event);"></debit-memo-form>');
$templateCache.put('./pdc-disbursement-form.html','<form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">PDC Disbursement #</label><input type="text" readonly="readonly" class="form-control -border" value="AUTOGENERATED UPON CREATION"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date</label><input type="date" class="form-control -border" ng-model="$ctrl.pdc.date"></div></div></div></div></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" data-target="#findVendorModal" data-toggle="modal">Select Payee</a></div><div class="form-group rmpm"><label class="label capitalize-text">Payee Code</label><input type="text" ng-model="$ctrl.pdc.payee.code" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Payee</label><input type="text" ng-model="$ctrl.pdc.payee.name" class="form-control -border"></div></div></div><table class="table table-list"><thead><tr><th>Cheque #</th><th>Date</th><th>Amount</th><th>Remarks</th><th ng-if="!$ctrl.readonly">Action</th></tr></thead><tbody><tr ng-if="!$ctrl.readonly"><td><input type="text" class="form-control -border" ng-model="$ctrl.chequeNumber"></td><td><input type="date" class="form-control -border" ng-model="$ctrl.chequeDate"></td><td><input type="number" class="form-control -border" ng-model="$ctrl.amount"></td><td><input type="text" class="form-control -border" ng-model="$ctrl.remarks"></td><td><button type="button" ng-click="$ctrl.addRow()" class="btn btn-success">Add</button></td></tr><tr ng-repeat="cheque in $ctrl.pdc.cheques"><td>{{cheque.number}}</td><td>{{cheque.date | date}}</td><td>{{cheque.amount.toFixed(2)}}</td><td>{{cheque.remarks}}</td><td><button type="button" ng-click="$ctrl.deleteRow($index)" ng-if="!$ctrl.readonly" class="btn btn-danger">Remove</button></td></tr></tbody></table><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" ng-model="$ctrl.pdc.remarks"></textarea></div></div></div></div></div><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></form><find-vendor-modal vendor="$ctrl.pdc.payee" message="{{ $ctrl.error }}" button="Select Payee"></find-vendor-modal>');
$templateCache.put('./pdc-disbursement-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">PDC Disbursement Form</h3></div></div><header class="header-form"><a href="/admin/accounting/pdc-disbursement" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">New PDC Disbursement Form</h3></header><pdc-disbursement-form pdc="$ctrl.pdc" message="{{ $ctrl.error }}" button="Create PDC Disbursement" on-submit="$ctrl.createPdcDisbursement($event);"></pdc-disbursement-form>');
$templateCache.put('./pdc-disbursements.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">PDC Disbursements</h3></div><a ng-click="$ctrl.exportReport()" class="btn btn-warning btn-md button-link">Export</a> <a href="/admin/shared/print-pdc-report/start/{{$ctrl.startDate}}/end/{{$ctrl.endDate}}" class="btn btn-primary btn-md button-link">Generate Report</a><!-- <a href="/admin/accounting/pdc-disbursement-tolling/new" ng-click="" class="btn btn-create btn-md button-link" style="background-color:blueviolet;">Create AR Tolling</a> --> <a href="/admin/accounting/pdc-disbursement/new" ng-click="" class="btn btn-create btn-md button-link">Create PJV</a></div><div class="client-pris"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="PJV No" type="text" name="search" ng-model="$ctrl.searchNumber"> <input class="form-control -borderless search" placeholder="RR No" type="text" name="search" ng-model="$ctrl.searchRRNumber"></div><div class="search-box horizontal-align -between"><input class="form-control -borderless search" type="date" name="search" ng-model="$ctrl.startDate"> <input class="form-control -borderless search" type="date" name="search" ng-model="$ctrl.endDate"></div></div><table class="table table-list"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'number\';$ctrl.sortReverse = !$ctrl.sortReverse;"># <span ng-show="$ctrl.sortType == \'number\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'number\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'materialType\';$ctrl.sortReverse = !$ctrl.sortReverse;">Date <span ng-show="$ctrl.sortType == \'materialType\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'materialType\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'quantity\';$ctrl.sortReverse = !$ctrl.sortReverse;">Payee <span ng-show="$ctrl.sortType == \'quantity\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'quantity\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'drsi\';$ctrl.sortReverse = !$ctrl.sortReverse;">Status <span ng-show="$ctrl.sortType == \'drsi\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'drsi\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="pdc in $ctrl.pdcDisbursements "><td>{{pdc.number}}</td><td>{{pdc.date | date}}</td><td>{{pdc.payee.name}}</td><td>{{pdc.status}}</td><td class="tablebutton-form"><div class="holder"><button class="btn btn-compose" data-toggle="modal" ng-click="$ctrl.openModal(pdc)" data-target="#pdcModal" class="btn btn-show"><i class="ion-ios-eye-outline"></i></button></div></td></tr></tbody></table><div class="modal fade" id="pdcModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">{{ $ctrl.pdc.number }} {{$ctrl.pdc.date | date}}</h4><button class="close"><span class="ion-android-close close-modal" data-dismiss="modal"></span></button></div><div class="modal-body"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">PDC Disbursement #</label><input type="text" readonly="readonly" class="form-control -border" ng-model="$ctrl.pdc.number"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date</label><input type="text" readonly="readonly" class="form-control -border" ng-value="$ctrl.pdc.date | date"></div></div></div></div></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm"><label class="label capitalize-text">Payee Code</label><input type="text" readonly="readonly" ng-model="$ctrl.pdc.payee.code" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Payee</label><input type="text" readonly="readonly" ng-model="$ctrl.pdc.payee.name" class="form-control -border"></div></div></div><table class="table table-list"><thead><tr><th>Cheque #</th><th>Date</th><th>Amount</th><th>Remarks</th><th ng-if="!$ctrl.readonly">Action</th></tr></thead><tbody><tr ng-if="!$ctrl.readonly"><td><input type="text" class="form-control -border" ng-model="$ctrl.chequeNumber"></td><td><input type="date" class="form-control -border" ng-model="$ctrl.chequeDate"></td><td><input type="number" class="form-control -border" ng-model="$ctrl.amount"></td><td><input type="text" class="form-control -border" ng-model="$ctrl.remarks"></td><td><button type="button" ng-click="$ctrl.addRow()" class="btn btn-success">Add</button></td></tr><tr ng-repeat="cheque in $ctrl.pdc.cheques"><td>{{cheque.number}}</td><td>{{cheque.date | date}}</td><td>{{cheque.amount.toFixed(2)}}</td><td>{{cheque.remarks}}</td><td><button type="button" ng-click="$ctrl.deleteRow($index)" ng-if="!$ctrl.readonly" class="btn btn-danger">Remove</button></td></tr></tbody></table><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" readonly="readonly" ng-model="$ctrl.pdc.remarks"></textarea></div></div></div></div></div></div></div></div></div>');
$templateCache.put('./purchase-voucher-form.html','<style>.highlightred{\r\n\t\tbackground-color:red;\r\n\t}</style><form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">PJV Number</label><input type="text" ng-if="$ctrl.pv.number != null" readonly="readonly" class="form-control -border" ng-value="$ctrl.pv.number"> <input type="text" ng-if="$ctrl.pv.number == null" readonly="readonly" class="form-control -border" value="AUTOGENERATED UPON CREATION"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date</label><input type="text" class="form-control -border" readonly="readonly" ng-value="$ctrl.pv.date\r\n\t\t\t\t\t\t\t\t\t | date:\'dd/MM/yyyy\'"></div></div></div></div></div></div></div><input type="radio" ng-model="$ctrl.manual" ng-checked="!$ctrl.pv.manual" value="auto" ng-change="$ctrl.toggleAdjustment(false)"> Auto <input type="radio" ng-model="$ctrl.manual" ng-checked="$ctrl.pv.manual" value="manual" ng-change="$ctrl.toggleAdjustment(true)"> Manual<div ng-if="!$ctrl.pv.manual"><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" ng-click="$ctrl.findReceivingReceipts()" data-target="#selectRRModal" data-toggle="modal">Select Receiving Receipt</a></div><div class="form-group rmpm"><label class="label capitalize-text">RR Number</label><input disabled="disabled" type="text" ng-model="$ctrl.pv.rrNumber" readonly="readonly" class="form-control -border"></div><div class="form-group rmpm"><label class="label capitalize-text">Date</label><p class="form-control -border">{{$ctrl.pv.rrDate | date}}</p></div></div></div><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Payee Code</label><input type="text" readonly="readonly" class="form-control -border" ng-model="$ctrl.pv.vendor.code"></div><div class="form-group field"><label class="label capitalize-text">Payee</label><input type="text" readonly="readonly" ng-model="$ctrl.pv.vendor.name" class="form-control -border"></div></div></div></div></div></div><table class="table table-list"><tbody><tr><th>SI #</th><td>{{$ctrl.pv.siNumber}}</td></tr><tr><th>DR #</th><td>{{$ctrl.pv.drNumber}}</td></tr><tr><th>PO #</th><td>{{$ctrl.pv.poNumber}}</td></tr></tbody></table></div><div ng-if="$ctrl.pv.manual"><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm" ng-class="{highlightred: $ctrl.rrValidFlag === \'false\'}"><label class="label capitalize-text">RR Number</label><input type="text" ng-model="$ctrl.pv.rrNumber" class="form-control -border"></div><div class="form-group rmpm"><label class="label capitalize-text">Date</label><input type="date" ng-if="$ctrl.pv.rrDate == null" ng-model="$ctrl.pv.rrDate" class="form-control -border"><p ng-if="$ctrl.pv.rrDate != null" class="form-control -border">{{$ctrl.pv.rrDate | date}}</p></div></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" data-target="#findVendorModal" data-toggle="modal">Select Vendor</a></div><div class="form-group rmpm"><label class="label capitalize-text">Payee Code</label><input type="text" ng-model="$ctrl.pv.vendor.code" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Payee</label><input type="text" ng-model="$ctrl.pv.vendor.name" class="form-control -border"></div></div></div><table class="table table-list"><tbody><tr><th>SI #</th><td><input type="text" ng-model="$ctrl.pv.siNumber"></td></tr><tr><th>DR #</th><td><input type="text" ng-model="$ctrl.pv.drNumber"></td></tr><tr><th>PO #</th><td><input type="text" ng-model="$ctrl.pv.poNumber"></td></tr></tbody></table></div><account-title-table accounttitles="$ctrl.pv.accountTitles" , readonly="false"></account-title-table><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" ng-model="$ctrl.pv.remarks"></textarea></div></div></div></div></div><div class="request-action" ng-if="!$ctrl.printFlag"><button type="submit" ng-if="$ctrl.rrValidFlag || !$ctrl.pv.manual" class="btn btn-create btn-md">{{$ctrl.button}}</button> <button type="button" ng-if="!$ctrl.rrValidFlag && $ctrl.pv.manual" ng-click="$ctrl.validateRrNumber()" class="btn btn-create btn-md">Validate</button></div><div class="request-action" ng-if="$ctrl.printFlag"><a target="_blank" href="/admin/shared/print-purchase-voucher/{{$ctrl.pv.id}}" class="btn btn-info">Print PJV</a></div></form><div class="modal fade" id="selectRRModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Receiving Receipt</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="wrapper scroll-section"><table class="table table-hover"><thead><tr><th>RR</th><th>Date</th><th>Status</th><th>DR</th><th>SI</th><th>PO</th><th></th></tr></thead><tbody><tr ng-repeat="rr in $ctrl.receivingReceipts"><td>{{rr.number}}</td><td>{{rr.date | date}}</td><td>{{rr.status}}</td><td>{{rr.drNumber}}</td><td>{{rr.siNumber}}</td><td>{{rr.poNumber}}</td><td><button class="btn btn-primary" ng-click="$ctrl.selectReceivingReceipt(rr)" data-dismiss="modal" type="button">Select</button></td></tr></tbody></table></div></div></div></div><account-titles maintenance="false"></account-titles><find-vendor-modal vendor="$ctrl.pv.vendor" message="{{ $ctrl.error }}" button="Select Vendor"></find-vendor-modal>');
$templateCache.put('./purchase-voucher-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Purchase Voucher Form</h3></div></div><header class="header-form"><a href="/admin/accounting/purchase-voucher" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">New Purchase Voucher Form</h3></header><purchase-voucher-form pv="$ctrl.pv" message="{{ $ctrl.error }}" button="Create Purchase Voucher" on-submit="$ctrl.createPurchaseVoucher($event);"></purchase-voucher-form>');
$templateCache.put('./purchase-voucher-edit.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Purchase Voucher Form</h3></div></div><header class="header-form"><a href="/admin/accounting/purchase-voucher" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">Edit Purchase Voucher Form</h3></header><purchase-voucher-form pv="$ctrl.pv" message="{{ $ctrl.error }}" button="Save" on-submit="$ctrl.editPurchaseVoucher($event);"></purchase-voucher-form>');
$templateCache.put('./purchase-vouchers.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Purchase Vouchers</h3></div><a ng-click="$ctrl.exportReport()" class="btn btn-warning btn-md button-link">Export</a> <a href="/admin/shared/print-pjv-report/start/{{$ctrl.startDate}}/end/{{$ctrl.endDate}}" class="btn btn-primary btn-md button-link">Generate Report</a><!-- <a href="/admin/accounting/purchase-voucher-tolling/new" ng-click="" class="btn btn-create btn-md button-link" style="background-color:blueviolet;">Create AR Tolling</a> --> <a href="/admin/accounting/purchase-voucher/new" ng-click="" class="btn btn-create btn-md button-link">Create PJV</a></div><div class="client-pris"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="PJV No" type="text" name="search" ng-model="$ctrl.searchNumber"> <input class="form-control -borderless search" placeholder="RR No" type="text" name="search" ng-model="$ctrl.searchRRNumber"></div><div class="search-box horizontal-align -between"><input class="form-control -borderless search" type="date" name="search" ng-model="$ctrl.startDate"> <input class="form-control -borderless search" type="date" name="search" ng-model="$ctrl.endDate"></div></div><table class="table table-list"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'number\';$ctrl.sortReverse = !$ctrl.sortReverse;">PV No <span ng-show="$ctrl.sortType == \'number\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'number\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'rrNumber\';$ctrl.sortReverse = !$ctrl.sortReverse;">RR No <span ng-show="$ctrl.sortType == \'rrNumber\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'rrNumber\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'materialType\';$ctrl.sortReverse = !$ctrl.sortReverse;">Vendor <span ng-show="$ctrl.sortType == \'materialType\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'materialType\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'quantity\';$ctrl.sortReverse = !$ctrl.sortReverse;">DR <span ng-show="$ctrl.sortType == \'quantity\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'quantity\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'drNumber\';$ctrl.sortReverse = !$ctrl.sortReverse;">SI <span ng-show="$ctrl.sortType == \'drNumber\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'drNumber\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'drsi\';$ctrl.sortReverse = !$ctrl.sortReverse;">PO <span ng-show="$ctrl.sortType == \'drsi\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'drsi\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'drsi\';$ctrl.sortReverse = !$ctrl.sortReverse;">Amount <span ng-show="$ctrl.sortType == \'drsi\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'drsi\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'drsi\';$ctrl.sortReverse = !$ctrl.sortReverse;">Status <span ng-show="$ctrl.sortType == \'drsi\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'drsi\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="pv in $ctrl.purchaseVouchers | filter: {number: $ctrl.searchNumber, rrNumber: $ctrl.searchRRNumber} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{pv.number}}</td><td>{{pv.rrNumber}}</td><td>{{pv.vendor.name}}</td><td>{{pv.drNumber}}</td><td>{{pv.siNumber}}</td><td>{{pv.poNumber}}</td><td>{{pv.totalAmount}}</td><td>{{pv.status}}</td><td class="tablebutton-form"><div class="holder"><button class="btn btn-compose" data-toggle="modal" ng-click="$ctrl.openModal(pv)" data-target="#pvModal" class="btn btn-show"><i class="ion-ios-eye-outline"></i></button> <button class="btn btn-compose" ng-if="pv.status == \'Pending\'"><i class="ion-ios-compose-outline" ng-click="$ctrl.goToEdit(pv.id)"></i></button></div></td></tr></tbody></table><div class="modal fade" id="pvModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Purchase Journal Voucher</h4><button data-dismiss="modal" class="close"><span class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">PJV Number</label><input type="text" readonly="readonly" class="form-control -border" ng-model="$ctrl.pv.number"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date</label><p class="form-control -border">{{$ctrl.pv.date | date}}</p></div></div></div></div></div></div></div><div><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">RR Number</label><input type="text" readonly="readonly" class="form-control -border" ng-model="$ctrl.pv.rrNumber"></div><div class="form-group field"><label class="label capitalize-text">Date</label><p class="form-control -border">{{$ctrl.pv.rrDate | date}}</p></div></div></div></div></div></div><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Payee Code</label><input type="text" readonly="readonly" class="form-control -border" ng-model="$ctrl.pv.vendor.code"></div><div class="form-group field"><label class="label capitalize-text">Payee</label><input type="text" readonly="readonly" ng-model="$ctrl.pv.vendor.name" class="form-control -border"></div></div></div></div></div></div><table class="table table-list"><tbody><tr><th>SI #</th><td>{{$ctrl.pv.siNumber}}</td></tr><tr><th>DR #</th><td>{{$ctrl.pv.drNumber}}</td></tr><tr><th>PO #</th><td>{{$ctrl.pv.poNumber}}</td></tr></tbody></table></div><account-title-table accounttitles="$ctrl.pv.accountTitles" readonly="true"></account-title-table><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Total Debit Amount</label><input type="text" readonly="readonly" class="form-control -border" ng-model="$ctrl.pv.totalDebitAmount"></div><div class="form-group field"><label class="label capitalize-text">Total Credit Amount</label><input type="text" readonly="readonly" ng-model="$ctrl.pv.totalCreditAmount" class="form-control -border"></div></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" disabled="disabled" ng-model="$ctrl.pv.remarks"></textarea></div></div></div></div></div></div><div class="modal-footer"><p class="date">Created at {{$ctrl.pv.date | date}}</p><button class="btn btn-create" ng-if="$ctrl.pv.status == \'Pending\'" ng-click="$ctrl.approve($ctrl.pv.id)" data-dismiss="modal">Approve</button> <button class="btn btn-danger" ng-if="$ctrl.pv.status == \'Pending\'" ng-click="$ctrl.reject($ctrl.pv.id)" data-dismiss="modal">Reject</button> <a target="_blank" href="/admin/shared/print-purchase-voucher/{{$ctrl.pv.id}}" class="btn btn-info">Print PJV</a> <button class="btn btn-cancel" data-dismiss="modal">Close</button></div></div></div></div>');
$templateCache.put('./pdc-voucher-form.html','<form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">PDC Voucher #</label><input type="text" readonly="readonly" class="form-control -border" value="AUTOGENERATED UPON CREATION"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date</label><input type="date" class="form-control -border" ng-model="$ctrl.pdc.date"></div></div></div></div></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" ng-click="$ctrl.loadDisbursements()" data-target="#findDisbursementModal" data-toggle="modal">Select PDC Disbursement</a></div><div class="form-group rmpm"><label class="label capitalize-text">PDC #</label><input type="text" ng-model="$ctrl.pdc.disbursement.number" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Date</label><input type="text" ng-value="$ctrl.pdc.disbursement.date | date" class="form-control -border"></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Payee Code</label><input type="text" readonly="readonly" class="form-control -border" ng-value="$ctrl.pdc.disbursement.payee.code"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Name</label><input type="text" readonly="readonly" class="form-control -border" ng-value="$ctrl.pdc.disbursement.payee.name"></div></div></div></div></div></div><table class="table table-list"><thead><tr><th>Cheque #</th><th>Date</th><th>Amount</th><th>Remarks</th></tr></thead><tbody><tr ng-repeat="cheque in $ctrl.pdc.disbursement.cheques"><td>{{cheque.number}}</td><td>{{cheque.date | date}}</td><td>{{cheque.amount.toFixed(2)}}</td><td>{{cheque.remarks}}</td></tr></tbody></table><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" ng-model="$ctrl.pdc.remarks"></textarea></div></div></div></div></div><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></form><div class="modal fade" id="findDisbursementModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find PDC Disbursement</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="modal-body"><div class="search-box horizontal-align -between"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="Code" type="text" name="search" ng-model="$ctrl.searchCode"> <input class="form-control -borderless search" placeholder="Name" type="text" name="search" ng-model="$ctrl.searchName"> <input class="form-control -borderless search" placeholder="Tin" type="text" name="search" ng-model="$ctrl.searchTin"></div></div></div><div class="wrapper scroll-section"><table class="table table-hover"><thead><tr><th>#</th><th>Date</th><th>Payee</th></tr></thead><tbody><tr ng-repeat="disbursement in $ctrl.disbursements " ng-click="$ctrl.getDisbursement(disbursement)" data-dismiss="modal"><td>{{disbursement.number}}</td><td>{{disbursement.date | date}}</td><td>{{disbursement.payee.name}}</td></tr></tbody></table></div></div></div></div>');
$templateCache.put('./pdc-voucher-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">PDC Voucher Form</h3></div></div><header class="header-form"><a href="/admin/accounting/pdc-voucher" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">New PDC Voucher Form</h3></header><pdc-voucher-form pdc="$ctrl.pdc" message="{{ $ctrl.error }}" button="Create PDC Voucher" on-submit="$ctrl.createPdcVoucher($event);"></pdc-voucher-form>');
$templateCache.put('./pdc-vouchers.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">PDC Vouchers</h3></div><!-- <a href="/admin/accounting/pdc-voucher-tolling/new" ng-click="" class="btn btn-create btn-md button-link" style="background-color:blueviolet;">Create AR Tolling</a> --> <a href="/admin/accounting/pdc-voucher/new" ng-click="" class="btn btn-create btn-md button-link">Create PJV</a></div><div class="client-pris"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="PJV No" type="text" name="search" ng-model="$ctrl.searchNumber"> <input class="form-control -borderless search" placeholder="RR No" type="text" name="search" ng-model="$ctrl.searchRRNumber"></div></div><table class="table table-list"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'number\';$ctrl.sortReverse = !$ctrl.sortReverse;"># <span ng-show="$ctrl.sortType == \'number\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'number\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'materialType\';$ctrl.sortReverse = !$ctrl.sortReverse;">Date <span ng-show="$ctrl.sortType == \'materialType\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'materialType\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'quantity\';$ctrl.sortReverse = !$ctrl.sortReverse;">Payee <span ng-show="$ctrl.sortType == \'quantity\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'quantity\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="pdc in $ctrl.pdcVouchers "><td>{{pdc.id}}</td><td>{{pdc.date | date}}</td><td>{{pdc.disbursement.payee.name}}</td><td class="tablebutton-form"><div class="holder"><button class="btn btn-compose" data-toggle="modal" ng-click="$ctrl.openModal(pdc)" data-target="#pdcModal" class="btn btn-show"><i class="ion-ios-eye-outline"></i></button></div></td></tr></tbody></table><div class="modal fade" id="pdcModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">{{ $ctrl.pdc.number}} {{$ctrl.pdc.date | date}}</h4><button class="close"><span class="ion-android-close close-modal" data-dismiss="modal"></span></button></div><div class="modal-body"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">PDC Voucher #</label><input type="text" readonly="readonly" class="form-control -border" ng-model="$ctrl.pdc.number"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date</label><input type="text" class="form-control -border" readonly="readonly" ng-value="$ctrl.pdc.date | date"></div></div></div></div></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm"><label class="label capitalize-text">PDC #</label><input type="text" ng-model="$ctrl.pdc.disbursement.number" readonly="readonly" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Date</label><input type="text" ng-value="$ctrl.pdc.disbursement.date | date" readonly="readonly" class="form-control -border"></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Payee Code</label><input type="text" readonly="readonly" class="form-control -border" ng-value="$ctrl.pdc.disbursement.payee.code"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Name</label><input type="text" readonly="readonly" class="form-control -border" ng-value="$ctrl.pdc.disbursement.payee.name"></div></div></div></div></div></div><table class="table table-list"><thead><tr><th>Cheque #</th><th>Date</th><th>Amount</th><th>Remarks</th></tr></thead><tbody><tr ng-repeat="cheque in $ctrl.pdc.disbursement.cheques"><td>{{cheque.number}}</td><td>{{cheque.date | date}}</td><td>{{cheque.amount.toFixed(2)}}</td><td>{{cheque.remarks}}</td></tr></tbody></table><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" readonly="readonly" class="form-control -border" ng-model="$ctrl.pdc.remarks"></textarea></div></div></div></div></div></div></div></div></div>');
$templateCache.put('./vouchers-payable-edit.html','');
$templateCache.put('./vouchers-payable-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Vouchers Payable Form</h3></div></div><header class="header-form"><a href="/admin/accounting/vouchers-payable" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">New Vouchers Payable Form</h3></header><vouchers-payable-form vp="$ctrl.vp" message="{{ $ctrl.error }}" button="Create Vouchers Payable" on-submit="$ctrl.createVouchersPayable($event);"></vouchers-payable-form>');
$templateCache.put('./vouchers-payable-form.html','<style>.highlightred{\r\n\t\tbackground-color:red;\r\n\t}\r\n\t\r\n\t.highlight{\r\n\t\tbackground-color:#7ed321;\r\n\t}</style><form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">VP Number</label><input type="text" ng-if="$ctrl.vp.number" readonly="readonly" class="form-control -border" ng-value="$ctrl.vp.number"> <input type="text" ng-if="$ctrl.vp.number == null" readonly="readonly" class="form-control -border" value="AUTOGENERATED UPON CREATION"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date</label><input type="text" class="form-control -border" readonly="readonly" ng-value="$ctrl.vp.date\r\n\t\t\t\t\t\t\t\t\t | date:\'dd/MM/yyyy\'"></div></div></div></div></div></div></div><select ng-model="$ctrl.vp.variation" ng-change="$ctrl.toggleVariation()"><option value="1 Voucher">1 Voucher</option><option value="Multiple PJV">Multiple PJV</option><option value="Multiple JV">Multiple JV</option></select><div ng-if="$ctrl.vp.variation == \'1 Voucher\'"><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" ng-click="$ctrl.findNewVouchers()" data-target="#selectVoucherModal" data-toggle="modal">Select Voucher</a></div><div class="form-group rmpm"><label class="label capitalize-text">Voucher Number</label><input disabled="disabled" type="text" ng-model="$ctrl.vp.voucher.number" readonly="readonly" class="form-control -border"></div><div class="form-group rmpm"><label class="label capitalize-text">Date</label><p class="form-control -border">{{$ctrl.vp.voucher.date | date}}</p></div></div></div><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Payee Code</label><input type="text" readonly="readonly" class="form-control -border" ng-model="$ctrl.vp.vendor.code"></div><div class="form-group field"><label class="label capitalize-text">Payee</label><input type="text" readonly="readonly" ng-model="$ctrl.vp.vendor.name" class="form-control -border"></div></div></div></div></div></div><table class="table table-list"><thead><tr><th>#</th><th>SI #</th><th>DR #</th><th>PO #</th><th>RR #</th><th>Amount</th></tr></thead><tbody><tr><td>{{$ctrl.vp.voucher.number}}</td><td>{{$ctrl.vp.voucher.siNumber}}</td><td>{{$ctrl.vp.voucher.drNumber}}</td><td>{{$ctrl.vp.voucher.poNumber}}</td><td>{{$ctrl.vp.voucher.rrNumber}}</td><td>{{$ctrl.vp.voucher.totalAmount.toFixed(2)}}</td></tr><tr ng-repeat="a in $ctrl.adjustments"><td>{{a.number}}</td><td>{{a.siNumber}}</td><td>{{a.drNumber}}</td><td>{{a.poNumber}}</td><td>{{a.rrNumber}}</td><td>{{a.totalAmount.toFixed(2)}}</td></tr></tbody><tfoot><tr><td></td><td></td><td></td><td></td><td>Total Amount:</td><td>{{$ctrl.totalAmount.toFixed(2)}}</td></tr></tfoot></table></div><div ng-if="$ctrl.vp.variation == \'Multiple PJV\'"><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" data-target="#findVendorModal" data-toggle="modal">Select Payee</a></div><div class="form-group rmpm"><label class="label capitalize-text">Payee Code</label><input type="text" ng-model="$ctrl.vp.vendor.code" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Payee</label><input type="text" ng-model="$ctrl.vp.vendor.name" class="form-control -border"></div></div></div><div ng-if="$ctrl.vp.vendor"><table class="table table-list"><thead><tr><th>#</th><th>SI #</th><th>DR #</th><th>PO #</th><th>RR #</th><th>Amount</th></tr></thead><tbody><tr ng-repeat="v in $ctrl.vp.vouchers"><td>{{v.number}}</td><td>{{v.siNumber}}</td><td>{{v.drNumber}}</td><td>{{v.poNumber}}</td><td>{{v.rrNumber}}</td><td>{{v.totalAmount.toFixed(2)}}</td></tr></tbody><tfoot><tr><th></th><th></th><th></th><th></th><th>Total Amount:</th><th>{{$ctrl.totalAmount.toFixed(2)}}</th></tr></tfoot></table><div class="request-action"><a href="#" class="button-link btn btn-action btn-md" ng-click="$ctrl.findPurchaseVouchersWithoutAdjustments()" data-target="#selectMultipleVoucherModal" data-toggle="modal">Select Voucher</a></div></div></div><div ng-if="$ctrl.vp.variation == \'Multiple JV\'"><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" data-target="#findVendorModal" data-toggle="modal">Select Payee</a></div><div class="form-group rmpm"><label class="label capitalize-text">Payee Code</label><input type="text" ng-model="$ctrl.vp.vendor.code" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Payee</label><input type="text" ng-model="$ctrl.vp.vendor.name" class="form-control -border"></div></div></div><div ng-if="$ctrl.vp.vendor"><table class="table table-list"><thead><tr><th>#</th><th>SI #</th><th>DR #</th><th>PO #</th><th>RR #</th><th>Amount</th></tr></thead><tbody><tr ng-repeat="v in $ctrl.vp.vouchers"><td>{{v.number}}</td><td>{{v.siNumber}}</td><td>{{v.drNumber}}</td><td>{{v.poNumber}}</td><td>{{v.rrNumber}}</td><td>{{v.totalAmount.toFixed(2)}}</td></tr></tbody><tfoot><tr><th></th><th></th><th></th><th></th><th>Total Amount:</th><th>{{$ctrl.totalAmount.toFixed(2)}}</th></tr></tfoot></table><div class="request-action"><a href="#" class="button-link btn btn-action btn-md" ng-click="$ctrl.findJournalVouchersWithoutAdjustments()" data-target="#selectMultipleVoucherModal" data-toggle="modal">Select JV</a></div></div></div><account-title-table accounttitles="$ctrl.vp.accountTitles" , readonly="false"></account-title-table><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" ng-model="$ctrl.vp.remarks"></textarea></div></div></div></div></div><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></form><div class="modal fade" id="selectVoucherModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Voucher</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="wrapper scroll-section"><table class="table table-hover"><thead><tr><th>Number</th><th>Date</th><th>Status</th><th>DR</th><th>SI</th><th>PO</th><th>RR</th><th></th></tr></thead><tbody><tr ng-repeat="v in $ctrl.vouchers"><td>{{v.number}}</td><td>{{v.date | date}}</td><td>{{v.status}}</td><td>{{v.drNumber}}</td><td>{{v.siNumber}}</td><td>{{v.poNumber}}</td><td>{{v.rrNumber}}</td><td><button class="btn btn-primary" ng-click="$ctrl.selectVoucher(v)" data-dismiss="modal" type="button">Select</button></td></tr></tbody></table></div></div></div></div><div class="modal fade" id="selectMultipleVoucherModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Select Voucher</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="Voucher No" type="text" name="search" ng-model="$ctrl.searchNumber"> <input class="form-control -borderless search" placeholder="RR No" type="text" name="search" ng-model="$ctrl.searchRRNumber"></div><div class="wrapper scroll-section"><table class="table table-hover"><thead><tr><th>Number</th><th>Date</th><th>Status</th><th>DR</th><th>SI</th><th>PO</th><th>RR</th><th></th></tr></thead><tbody><tr ng-click="$ctrl.selectMultipleVouchers(v) | filter: {number: $ctrl.searchNumber, rrNumber: $ctrl.searchRRNumber} " ng-class="{highlight: $ctrl.vp.vouchers.indexOf(v) !== -1}" ng-repeat="v in $ctrl.vouchers"><td>{{v.number}}</td><td>{{v.date | date}}</td><td>{{v.status}}</td><td>{{v.drNumber}}</td><td>{{v.siNumber}}</td><td>{{v.poNumber}}</td><td>{{v.rrNumber}}</td></tr></tbody></table></div></div></div></div><find-vendor-modal vendor="$ctrl.vp.vendor" message="{{ $ctrl.error }}" button="Select Vendor"></find-vendor-modal>');
$templateCache.put('./vouchers-payables.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Vouchers Payables</h3></div><!-- <a href="/admin/accounting/vouchers-payable-tolling/new" ng-click="" class="btn btn-create btn-md button-link" style="background-color:blueviolet;">Create AR Tolling</a> --> <a ng-click="$ctrl.exportReport()" class="btn btn-warning btn-md button-link">Export</a> <a href="/admin/shared/print-vp-report/start/{{$ctrl.startDate}}/end/{{$ctrl.endDate}}" class="btn btn-primary btn-md button-link">Generate Report</a> <a href="/admin/accounting/vouchers-payable/new" ng-click="" class="btn btn-create btn-md button-link">Create VP</a></div><div class="client-pris"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="VP No" type="text" name="search" ng-model="$ctrl.searchNumber"> <input class="form-control -borderless search" placeholder="RR No" type="text" name="search" ng-model="$ctrl.searchRRNumber"></div><div class="search-box horizontal-align -between"><input class="form-control -borderless search" type="date" name="search" ng-model="$ctrl.startDate"> <input class="form-control -borderless search" type="date" name="search" ng-model="$ctrl.endDate"></div></div><table class="table table-list"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'number\';$ctrl.sortReverse = !$ctrl.sortReverse;">VP No <span ng-show="$ctrl.sortType == \'number\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'number\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'rrNumber\';$ctrl.sortReverse = !$ctrl.sortReverse;">Date <span ng-show="$ctrl.sortType == \'rrNumber\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'rrNumber\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'materialType\';$ctrl.sortReverse = !$ctrl.sortReverse;">Vendor <span ng-show="$ctrl.sortType == \'materialType\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'materialType\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'drsi\';$ctrl.sortReverse = !$ctrl.sortReverse;">Amount <span ng-show="$ctrl.sortType == \'drsi\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'drsi\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'drsi\';$ctrl.sortReverse = !$ctrl.sortReverse;">Status <span ng-show="$ctrl.sortType == \'drsi\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'drsi\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="vp in $ctrl.vouchersPayables "><td>{{vp.number}}</td><td>{{vp.date | date}}</td><td>{{vp.vendor.name}}</td><td>{{vp.totalAmount}}</td><td>{{vp.status}}</td><td class="tablebutton-form"><div class="holder"><button class="btn btn-compose" data-toggle="modal" ng-click="$ctrl.openModal(vp)" data-target="#vpModal" class="btn btn-show"><i class="ion-ios-eye-outline"></i></button> <button class="btn btn-compose" ng-if="vp.status == \'Pending\'"><i class="ion-ios-compose-outline" ng-click="$ctrl.goToEdit(vp.id)"></i></button></div></td></tr></tbody></table><view-vp-modal vp="$ctrl.vp" approve="$ctrl.approve($event)"></view-vp-modal>');
$templateCache.put('./purchase-order-form.html','<form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">PO Number</label><input type="text" readonly="readonly" class="form-control -border" value="AUTOGENERATED UPON CREATION"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date</label><input type="date" class="form-control -border" ng-model="$ctrl.po.date"></div></div></div></div></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" data-target="#findVendorModal" data-toggle="modal">Select Vendor</a></div><div class="form-group rmpm"><input type="hidden" ng-model="$ctrl.po.vendor.id"><label class="label capitalize-text">Code</label><input type="text" ng-model="$ctrl.po.vendor.code" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Name</label><input type="text" ng-model="$ctrl.po.vendor.name" class="form-control -border"></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label for="department">Department</label><select class="form-control select -borderless" ng-model="$ctrl.po.department.id" ng-options="d.id as d.name for d in $ctrl.departments" name="department"></select></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label for="department">Area</label><select class="form-control select -borderless" ng-model="$ctrl.po.area.id" ng-options="a.id as a.name for a in $ctrl.areas" name="area"></select></div></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Curr.</label><input type="text" class="form-control -border" ng-model="$ctrl.po.currency"></div></div><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Job Order No.</label><input type="text" class="form-control -border" ng-model="$ctrl.po.jobOrderNo"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Terms</label><input type="text" class="form-control -border" ng-model="$ctrl.po.terms"></div></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Due Date</label><input type="date" class="form-control -border" ng-model="$ctrl.po.dueDate"></div></div></div><div class="side-two"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Deliver To</label><input type="text" class="form-control -border" ng-model="$ctrl.po.deliverTo"></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" ng-model="$ctrl.po.remarks"></textarea></div></div></div></div></div><table class="table table-list"><thead><tr><th>PRF #</th><th>Code</th><th>Item</th><th>Quantity</th><th>Unit Price</th><th>Amount</th></tr></thead><tbody id="table-less-padding"><tr ng-repeat="orderedItem in $ctrl.po.orderedItems"><td>{{orderedItem.prfNumber}}</td><td>{{orderedItem.item.code}}</td><td>{{orderedItem.item.name}}</td><td>{{orderedItem.quantity}}</td><td><input ng-change="$ctrl.computeTotalAmount(orderedItem.quantity * orderedItem.unitPrice, $index)" type="text" ng-model="orderedItem.unitPrice" required></td><td>{{ orderedItem.quantity * orderedItem.unitPrice }}</td></tr></tbody><tfoot><th></th><th></th><th></th><th><label class="label capitalize-text">Has Vat(12%)</label><input type="checkbox" class="form-control -border" ng-change="$ctrl.addVat()" ng-model="$ctrl.po.vat"></th><th>Total Amount</th><th>{{$ctrl.po.totalAmount.toFixed(2)}}</th></tfoot></table><div class="request-action"><button type="button" data-toggle="modal" data-target="#findRequestedItemsModal" class="btn btn-create btn-md">Select PRF</button></div></div><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></form><find-requested-items-modal ordereditems="$ctrl.po.orderedItems" message="{{ $ctrl.error }}"></find-requested-items-modal><find-vendor-modal vendor="$ctrl.po.vendor" message="{{ $ctrl.error }}" button="Select Vendor"></find-vendor-modal>');
$templateCache.put('./purchase-order-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Purchase Order Form</h3></div></div><header class="header-form"><a href="/admin/purchasing" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">New Purchase Order Form</h3></header><purchase-order-form po="$ctrl.po" message="{{ $ctrl.error }}" button="Create Purchase Order" on-submit="$ctrl.createPurchaseOrder($event);"></purchase-order-form>');
$templateCache.put('./purchase-orders.html','<div class="admin-header"><div class="title horizontal-align -between"><h4 class="bg">Purchase Order</h4><div class="action-link"><a href="/admin/purchasing/new">Create PO</a></div></div><hr class="devider"><company-nav></company-nav><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="PO No" type="text" name="search" ng-model="$ctrl.searchPoNumber"> <input class="form-control -borderless search" placeholder="Due Date" type="text" name="search" ng-model="$ctrl.searchDueDate"></div><table datatable="ng" ng-if="$ctrl.purchaseOrders" class="table table-list"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'number\';$ctrl.sortReverse = !$ctrl.sortReverse;">P.O No <span ng-show="$ctrl.sortType == \'number\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'number\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'vendor.name\';$ctrl.sortReverse = !$ctrl.sortReverse;">Vendor <span ng-show="$ctrl.sortType == \'vendor.name\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'vendor.name\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'department.name\';$ctrl.sortReverse = !$ctrl.sortReverse;">Department <span ng-show="$ctrl.sortType == \'department.name\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'department.name\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'dueDate\';$ctrl.sortReverse = !$ctrl.sortReverse;">Due Date <span ng-show="$ctrl.sortType == \'dueDate\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'dueDate\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'totalAmount\';$ctrl.sortReverse = !$ctrl.sortReverse;">Total Amount <span ng-show="$ctrl.sortType == \'totalAmount\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'totalAmount\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th>Status</th><th></th></tr></thead><tbody><tr ng-repeat="po in $ctrl.purchaseOrders | filter: {number: $ctrl.searchPoNumber, dueDate: $ctrl.searchDueDate} | orderBy:$ctrl.sortType:$ctrl.sortReverse" data-target="#poInfoModal" data-toggle="modal" ng-click="$ctrl.openModal(po)"><td>{{po.number}}</td><td>{{po.vendor.name}}</td><td>{{po.department.name}}</td><td>{{po.dueDate | date}}</td><td>{{po.totalAmount.toFixed(2)}}</td><td>{{po.status}}</td><td><i class="ion-ios-compose-outline"></i> <i class="ion-ios-box-outline"></i></td></tr></tbody></table><div class="modal fade" id="poInfoModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Purchase Order {{ $ctrl.po.number }}</h4><button class="close"><span class="ion-android-close close-modal" data-dismiss="modal"></span></button></div><div class="modal-body"><div class="horizontal-align -between modal-information"><p class="title">P.O No: <span class="content">{{ $ctrl.po.number }} {{ $ctrl.po.date | date }}</span></p><p class="title">Due Date: <span class="content">{{ $ctrl.po.dueDate | date }}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Vendor: <span class="content">{{$ctrl.po.vendor.code}} {{$ctrl.po.vendor.name}}</span></p><p class="title">Deliver To: <span class="content">{{$ctrl.po.deliverTo}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Department: <span class="content">{{$ctrl.po.department.code}} {{$ctrl.po.department.name}}</span></p><p class="title">Area: <span class="content">{{$ctrl.po.area.code}} {{$ctrl.po.area.name}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Curr: <span class="content">{{$ctrl.po.currency}}</span></p><p class="title">Job Order: <span class="content">{{$ctrl.po.jobOrderNo}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Remarks: <span class="content">{{$ctrl.po.remarks}}</span></p></div><a href="#" class="btn btn-info">View Ordered Items</a><div id="purchaseRequestsDiv"><table class="table table-hover"><thead><tr><th>PRF #</th><th>Item</th><th>Quantity</th><th>Unit Cost</th><th>Amount</th><th>Status</th></tr></thead><tbody><tr ng-repeat="orderedItem in $ctrl.po.orderedItems"><td>{{orderedItem.prfNumber}}</td><td>{{orderedItem.item.code}} {{orderedItem.item.name}}</td><td>{{orderedItem.quantity}}</td><td>{{orderedItem.unitPrice}}</td><td>{{orderedItem.amount}}</td><td>{{orderedItem.status}}</td></tr></tbody></table></div><a href="#receivingReceiptsDiv" class="btn btn-info">View Receiving Receipts</a><div id="receivingReceiptsDiv"><table class="table table-hover"><thead><tr><th>R.R #</th><th>Date</th><th>Status</th><th></th></tr></thead><tbody><tr ng-repeat="rr in $ctrl.receivingReceipts"><td>{{rr.number}}</td><td>{{rr.date|date}}</td><td>{{rr.status}}</td><td><a href="#" class="btn btn-primary" data-target="#rrModal" data-toggle="modal" ng-click="$ctrl.viewRr(rr)">View</a></td></tr></tbody></table></div><div class="modal-footer"><button class="btn btn-create">{{$ctrl.po.totalAmount.toFixed(2)}}</button><p class="date">Created at {{$ctrl.po.date | date}}</p><button class="btn btn-cancel" data-dismiss="modal">Close</button></div></div></div></div></div><view-prf-modal prf="$ctrl.prf"></view-prf-modal><view-rr-modal rr="$ctrl.rr"></view-rr-modal></div>');
$templateCache.put('./bank-accounts.html','<div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Bank Account <a class="button-link btn btn-create btn-sm float-lg-right" ng-click="$ctrl.showAddBankAccount(true)">+ Add Bank Account</a></h4><button class="close" data-dismiss="modal" type="button"><span class="ion-android-close close-modal" ng-click="$ctrl.showAddBankAccount(false)"></span></button></div><div class="modal-body"><div class="searchbox-modal"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="code" type="text" name="search" ng-model="$ctrl.searchCode"> <input class="form-control -borderless search" placeholder="name" type="text" name="search" ng-model="$ctrl.searchName"></div></div><bank-account-form ng-show="$ctrl.addBankAccount" bankaccount="$ctrl.bankaccount" message="{{ $ctrl.error }}" button="Save" on-submit="$ctrl.saveBankAccount($event);"></bank-account-form><div class="wrapper scroll-section"><table class="table find-vendor"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'id\';$ctrl.sortReverse = !$ctrl.sortReverse;">ID <span ng-show="$ctrl.sortType == \'id\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'id\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'code\';$ctrl.sortReverse = !$ctrl.sortReverse;">Code <span ng-show="$ctrl.sortType == \'code\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'code\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'name\';$ctrl.sortReverse = !$ctrl.sortReverse;">Name <span ng-show="$ctrl.sortType == \'name\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'name\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th>Address</th><th></th></tr></thead><tbody><tr dir-paginate="bankAccount in $ctrl.bankAccounts | itemsPerPage: $ctrl.itemsPerPage" total-items="$ctrl.totalCount"><td>{{bankAccount.id}}</td><td>{{bankAccount.code}}</td><td>{{bankAccount.name}}</td><td>{{bankAccount.address}}</td><td class="tablebutton-form"><div class="holder"><button ng-click="$ctrl.editBankAccount(bankAccount.id)" class="btn btn-compose"><i class="ion-ios-compose-outline"></i></button> <button ng-click="$ctrl.deleteBankAccount(bankAccount.id)" class="btn btn-archive"><i class="ion-android-close"></i></button></div></td></tr></tbody></table><dir-pagination-controls max-size="$ctrl.totalCount" direction-links="false" boundary-links="false" on-page-change="$ctrl.getData(newPageNumber)" style="float:right; padding-right:10px"></dir-pagination-controls></div></div></div></div>');
$templateCache.put('./bank-account-form.html','<form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="horizontal-align -between" id="add-group"><input type="hidden" ng-model="$ctrl.bankaccount.id"><div class="form-group col-md-6"><label for="code">Code</label><input ng-model="$ctrl.bankaccount.code" class="form-control -border" autofocus="autofocus" placeholder="Code" type="text" name="code"></div><div class="form-group col-md-6"><label for="name">Name</label><input ng-model="$ctrl.bankaccount.name" class="form-control -border" placeholder="Name" type="text" name="name"></div></div><div class="action-button horizontal-align -end"><input type="submit" name="commit" value="{{ $ctrl.button }}" class="btn btn-create btn-md" data-disable-with="Save"></div></form>');
$templateCache.put('./account-title-form.html','<form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="horizontal-align -between" id="add-group"><input type="hidden" ng-model="$ctrl.accounttitle.id"><div class="form-group"><label for="code">Title</label><input ng-model="$ctrl.accounttitle.title" class="form-control -border" autofocus="autofocus" placeholder="Code" type="text" name="code"></div><div class="form-group"><label for="name">Type</label><select ng-model="$ctrl.accounttitle.type" class="form-control -border"><option value="Credit">Credit</option><option value="Debit">Debit</option></select></div><div class="form-group"><label for="tin">Parent</label><input ng-value="$ctrl.accounttitle.parent.title" readonly="readonly" class="form-control -border" type="text"></div><div class="form-group"><label for="tin">Level</label><input ng-model="$ctrl.accounttitle.level" readonly="readonly" class="form-control -border" type="text"></div></div><div class="action-button horizontal-align -end"><input type="submit" name="commit" value="{{ $ctrl.button }}" class="btn btn-create btn-md" data-disable-with="Save"></div></form>');
$templateCache.put('./classifications.html','<div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Classification <a class="button-link btn btn-create btn-sm float-lg-right" ng-click="$ctrl.showAddClassification(true)">+ Add Classification</a></h4><button class="close" data-dismiss="modal" type="button"><span class="ion-android-close close-modal" ng-click="$ctrl.showAddClassification(false)"></span></button></div><div class="modal-body"><div class="searchbox-modal"><div class="searchbox-content"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="code" type="text" name="search" ng-model="$ctrl.searchCode"> <input class="form-control -borderless search" placeholder="name" type="text" name="search" ng-model="$ctrl.searchName"></div></div></div><classification-form ng-show="$ctrl.addClassification" classification="$ctrl.classification" message="{{ $ctrl.error }}" button="Save" on-submit="$ctrl.saveClassification($event);"></classification-form><div class="wrapper scroll-section"><table class="table find-vendor"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'id\';$ctrl.sortReverse = !$ctrl.sortReverse;">ID <span ng-show="$ctrl.sortType == \'id\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i></span> <span ng-show="$ctrl.sortType == \'id\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'code\';$ctrl.sortReverse = !$ctrl.sortReverse;">Code <span ng-show="$ctrl.sortType == \'code\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'code\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'name\';$ctrl.sortReverse = !$ctrl.sortReverse;">Name <span ng-show="$ctrl.sortType == \'name\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'name\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="classification in $ctrl.classifications | filter: {code: $ctrl.searchCode, name: $ctrl.searchName} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{classification.id}}</td><td>{{classification.code}}</td><td>{{classification.name}}</td><td class="tablebutton-form"><div class="holder"><button ng-click="$ctrl.editClassification(classification.id)" class="btn btn-compose"><i class="ion-ios-compose-outline"></i></button> <button ng-click="$ctrl.deleteClassification(classification.id)" class="btn btn-archive"><i class="ion-android-close"></i></button></div></td></tr></tbody></table></div></div></div></div>');
$templateCache.put('./account-titles.html','<div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Account Title <a class="button-link btn btn-create btn-sm float-lg-right" ng-click="$ctrl.showAddAccountTitle(true)">+ Add AccountTitle</a></h4><button class="close" data-dismiss="modal" type="button"><span ng-click="$ctrl.showAddAccountTitle(false)" class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="searchbox-modal"><form><div class="searchbox-content"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="title" type="text" name="search" ng-model="$ctrl.searchTitle"></div></div></form></div><account-title-form ng-show="$ctrl.addAccountTitle" accounttitle="$ctrl.accountTitle" message="{{ $ctrl.error }}" button="Save" on-submit="$ctrl.saveAccountTitle($event);"></account-title-form><div><h4>Level {{$ctrl.level}}</h4><ul class="breadcrumb"><li ng-repeat="history in $ctrl.accountTitleHistory"><a ng-click="$ctrl.digAccountTitle(history.id, history.title, history.level, -1)">{{history.title}}</a></li></ul></div><div class="wrapper scroll-section"><table class="table find-vendor"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'id\';$ctrl.sortReverse = !$ctrl.sortReverse;">ID <span ng-show="$ctrl.sortType == \'id\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i></span> <span ng-show="$ctrl.sortType == \'id\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'title\';$ctrl.sortReverse = !$ctrl.sortReverse;">Title <span ng-show="$ctrl.sortType == \'title\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'title\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'type\';$ctrl.sortReverse = !$ctrl.sortReverse;">Type <span ng-show="$ctrl.sortType == \'type\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'type\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="accountTitle in $ctrl.accountTitles | filter: {title: $ctrl.searchTitle } | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{accountTitle.id}}</td><td>{{accountTitle.title}}</td><td>{{accountTitle.type}}</td><td class="tablebutton-form"><div class="holder"><button ng-click="$ctrl.digAccountTitle(accountTitle.id, accountTitle.title, accountTitle.level + 1, accountTitle.parent != null ? accountTitle.parent.id : -1)" class="btn btn-compose"><i class="ion-ios-download"></i></button> <button ng-click="$ctrl.editAccountTitle(accountTitle.id)" class="btn btn-compose"><i class="ion-ios-compose-outline"></i></button> <button ng-click="$ctrl.deleteAccountTitle(accountTitle.id)" class="btn btn-archive"><i class="ion-android-close"></i></button></div></td></tr></tbody></table></div></div></div></div>');
$templateCache.put('./classification-form.html','<form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="horizontal-align -between" id="add-group"><input type="hidden" ng-model="$ctrl.classification.id"><div class="form-group"><label for="code">Code</label><input ng-model="$ctrl.classification.code" class="form-control -border" autofocus="autofocus" placeholder="Code" type="text" name="code"></div><div class="form-group"><label for="name">Name</label><input ng-model="$ctrl.classification.name" class="form-control -border" placeholder="Name" type="text" name="name"></div></div><div class="action-button horizontal-align -end"><input type="submit" name="commit" value="{{ $ctrl.button }}" class="btn btn-create btn-md" data-disable-with="Save"></div></form>');
$templateCache.put('./client-form.html','<form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="horizontal-align -between" id="add-group"><input type="hidden" ng-model="$ctrl.client.id"><div class="form-group"><label for="code">Code</label><input ng-model="$ctrl.client.code" class="form-control -border" autofocus="autofocus" placeholder="Code" type="text" name="code"></div><div class="form-group"><label for="name">Name</label><input ng-model="$ctrl.client.name" class="form-control -border" placeholder="Name" type="text" name="name"></div><div class="form-group"><label for="tin">TIN</label><input ng-model="$ctrl.client.tin" class="form-control -border" placeholder="TIN" type="text" name="tin"></div></div><div class="action-button horizontal-align -end"><input type="submit" name="commit" value="{{ $ctrl.button }}" class="btn btn-create btn-md" data-disable-with="Save"></div></form>');
$templateCache.put('./clients.html','<div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Client <a class="button-link btn btn-create btn-sm float-lg-right" ng-click="$ctrl.showAddClient(true)">+ Add Client</a></h4><button class="close" data-dismiss="modal" type="button"><span class="ion-android-close close-modal" ng-click="$ctrl.showAddClient(false)"></span></button></div><div class="modal-body"><div class="searchbox-modal"><div class="searchbox-content"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="code" type="text" name="search" ng-model="$ctrl.searchCode"> <input class="form-control -borderless search" placeholder="name" type="text" name="search" ng-model="$ctrl.searchName"> <input class="form-control -borderless search" placeholder="tin" type="text" name="search" ng-model="$ctrl.searchTin"></div></div></div><client-form ng-show="$ctrl.addClient" client="$ctrl.client" message="{{ $ctrl.error }}" button="Save" on-submit="$ctrl.saveClient($event);"></client-form><div class="wrapper scroll-section"><table class="table find-vendor"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'id\';$ctrl.sortReverse = !$ctrl.sortReverse;">ID <span ng-show="$ctrl.sortType == \'id\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i></span> <span ng-show="$ctrl.sortType == \'id\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'code\';$ctrl.sortReverse = !$ctrl.sortReverse;">Code <span ng-show="$ctrl.sortType == \'code\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'code\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'name\';$ctrl.sortReverse = !$ctrl.sortReverse;">Name <span ng-show="$ctrl.sortType == \'name\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'name\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'tin\';$ctrl.sortReverse = !$ctrl.sortReverse;">T.I.N No. <span ng-show="$ctrl.sortType == \'tin\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'tin\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr dir-paginate="client in $ctrl.clients | itemsPerPage: $ctrl.itemsPerPage" total-items="$ctrl.totalCount"><td>{{client.id}}</td><td>{{client.code}}</td><td>{{client.name}}</td><td>{{client.tin}}</td><td class="tablebutton-form"><div class="holder"><button ng-click="$ctrl.editClient(client.id)" class="btn btn-compose"><i class="ion-ios-compose-outline"></i></button> <button ng-click="$ctrl.deleteClient(client.id)" class="btn btn-delete"><i class="ion-android-close"></i></button></div></td></tr></tbody></table><dir-pagination-controls max-size="$ctrl.totalCount" direction-links="false" boundary-links="false" on-page-change="$ctrl.getData(newPageNumber)" style="float:right; padding-right:10px"></dir-pagination-controls></div></div></div></div>');
$templateCache.put('./depots.html','<div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Depot <a class="button-link btn btn-create btn-sm float-lg-right" ng-click="$ctrl.showAddDepot(true)">+ Add Depot</a></h4><button class="close" data-dismiss="modal" type="button"><span ng-click="$ctrl.showAddDepot(false)" class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="searchbox-modal"><form><div class="searchbox-content"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="code" type="text" name="search" ng-model="$ctrl.searchCode"> <input class="form-control -borderless search" placeholder="name" type="text" name="search" ng-model="$ctrl.searchName"></div></div></form></div><depot-form ng-show="$ctrl.addDepot" depot="$ctrl.depot" message="{{ $ctrl.error }}" button="Save" on-submit="$ctrl.saveDepot($event);"></depot-form><div class="wrapper scroll-section"><table class="table find-vendor"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'id\';$ctrl.sortReverse = !$ctrl.sortReverse;">ID <span ng-show="$ctrl.sortType == \'id\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i></span> <span ng-show="$ctrl.sortType == \'id\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'code\';$ctrl.sortReverse = !$ctrl.sortReverse;">Code <span ng-show="$ctrl.sortType == \'code\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'code\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'name\';$ctrl.sortReverse = !$ctrl.sortReverse;">Name <span ng-show="$ctrl.sortType == \'name\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'name\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'area\';$ctrl.sortReverse = !$ctrl.sortReverse;">Area <span ng-show="$ctrl.sortType == \'area\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'area\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="depot in $ctrl.depots | filter: {code: $ctrl.searchCode, name: $ctrl.searchName} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{depot.id}}</td><td>{{depot.code}}</td><td>{{depot.name}}</td><td>{{depot.area.code}}</td><td class="tablebutton-form"><div class="holder"><button ng-click="$ctrl.editDepot(depot.id)" class="btn btn-compose"><i class="ion-ios-compose-outline"></i></button> <button ng-click="$ctrl.deleteDepot(depot.id)" class="btn btn-archive"><i class="ion-android-close"></i></button></div></td></tr></tbody></table></div></div></div></div>');
$templateCache.put('./depot-form.html','<form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="horizontal-align -between" id="add-group"><input type="hidden" ng-model="$ctrl.depot.id"><div class="form-group col-md-4"><label for="code">Code</label><input ng-model="$ctrl.depot.code" class="form-control -border" autofocus="autofocus" placeholder="Code" type="text" name="code"></div><div class="form-group col-md-4"><label for="name">Name</label><input ng-model="$ctrl.depot.name" class="form-control -border" placeholder="Name" type="text" name="name"></div><div class="form-group col-md-4"><label for="type">Area</label><select class="form-control select -border" ng-model="$ctrl.depot.area.id" ng-options="a.id as a.name for a in $ctrl.areas" name="areas"></select></div></div><div class="action-button horizontal-align -end"><input type="submit" name="commit" value="{{ $ctrl.button }}" class="btn btn-create btn-md" data-disable-with="Save"></div></form>');
$templateCache.put('./area-form.html','<form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="horizontal-align -between"><div class="form-group"><label for="code">Code</label><input ng-model="$ctrl.area.code" class="form-control -border" autofocus="autofocus" placeholder="Code" type="text" name="code"></div><div class="form-group"><label for="name">Name</label><input ng-model="$ctrl.area.name" class="form-control -border" placeholder="Name" type="text" name="name"></div></div><div class="action-button horizontal-align -end"><input type="submit" name="commit" value="{{ $ctrl.button }}" class="btn btn-create btn-md" data-disable-with="Save"></div></form>');
$templateCache.put('./department-form.html','<form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="horizontal-align -between"><div class="form-group"><label for="code">Code</label><input ng-model="$ctrl.department.code" class="form-control -border" autofocus="autofocus" placeholder="Code" type="text" name="code"></div><div class="form-group"><label for="name">Name</label><input ng-model="$ctrl.department.name" class="form-control -border" placeholder="Name" type="text" name="name"></div></div><div class="action-button horizontal-align -end"><input type="submit" name="commit" value="{{ $ctrl.button }}" class="btn btn-create btn-md" data-disable-with="Save"></div></form>');
$templateCache.put('./departments-and-areas.html','<div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Department &amp; Area Code</h4><button class="close" data-dismiss="modal" type="button"><span ng-click="$ctrl.showAddDepartment(false);$ctrl.showAddArea(false)" class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="horizontal-align -between"><div class="section department-area -left"><div class="horizontal-align -start header"><p class="caption">Departments</p><div class="action-link bold-link"><a class="link" ng-click="$ctrl.showAddDepartment(true)">+ Add</a></div></div><department-form ng-show="$ctrl.addDepartmentForm" department="$ctrl.department" message="{{ $ctrl.error }}" button="Save" on-submit="$ctrl.saveDepartment($event);"></department-form><div class="wrapper scroll-section"><p class="department-list horizontal-align -between" ng-repeat="department in $ctrl.departments"><span class="code">{{department.code}}</span> <span class="dept">{{department.name}}</span> <span ng-click="$ctrl.deleteDepartment(department.id)" class="ion-android-close delete"></span></p></div></div><div class="section department-area -left"><div class="horizontal-align -start header"><p class="caption">Area Code</p><div class="action-link bold-link"><a class="link" ng-click="$ctrl.showAddArea(true)">+ Add</a></div></div><area-form ng-show="$ctrl.addAreaForm" area="$ctrl.area" message="{{ $ctrl.error }}" button="Save" on-submit="$ctrl.saveArea($event);"></area-form><div class="wrapper scroll-section"><p class="department-list horizontal-align -between" ng-repeat="area in $ctrl.areas"><span ng-model="area.code" class="code">{{area.code}}</span> <span ng-model="area.name" class="dept">{{area.name}}</span> <span ng-click="$ctrl.deleteArea(area.id)" class="ion-android-close delete"></span></p></div></div></div></div></div></div>');
$templateCache.put('./finished-good-form.html','<form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="horizontal-align -between" id="add-group"><input type="hidden" ng-model="$ctrl.finishedgood.id"><div class="form-group col-md-6"><label for="code">Code</label><input ng-model="$ctrl.finishedgood.code" class="form-control -border" autofocus="autofocus" placeholder="Code" type="text" name="code"></div><div class="form-group col-md-6"><label for="name">Name</label><input ng-model="$ctrl.finishedgood.name" class="form-control -border" placeholder="Name" type="text" name="name"></div></div><div class="action-button horizontal-align -end"><input type="submit" name="commit" value="{{ $ctrl.button }}" class="btn btn-create btn-md" data-disable-with="Save"></div></form>');
$templateCache.put('./finished-goods.html','<div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Finished Good <a class="button-link btn btn-create btn-sm float-lg-right" ng-click="$ctrl.showAddFinishedGood(true)">+ Add Finished Good</a></h4><button class="close" data-dismiss="modal" type="button"><span class="ion-android-close close-modal" ng-click="$ctrl.showAddFinishedGood(false)"></span></button></div><div class="modal-body"><div class="searchbox-modal"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="code" type="text" name="search" ng-model="$ctrl.searchCode"> <input class="form-control -borderless search" placeholder="name" type="text" name="search" ng-model="$ctrl.searchName"></div></div><finished-good-form ng-show="$ctrl.addFinishedGood" finishedgood="$ctrl.finishedgood" message="{{ $ctrl.error }}" button="Save" on-submit="$ctrl.confirmEdit($event);"></finished-good-form><div class="wrapper scroll-section"><table class="table find-vendor"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'id\';$ctrl.sortReverse = !$ctrl.sortReverse;">ID <span ng-show="$ctrl.sortType == \'id\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'id\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'code\';$ctrl.sortReverse = !$ctrl.sortReverse;">Code <span ng-show="$ctrl.sortType == \'code\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'code\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'name\';$ctrl.sortReverse = !$ctrl.sortReverse;">Name <span ng-show="$ctrl.sortType == \'name\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'name\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-class="{selected: $ctrl.selectedId === finishedGood.id}" dir-paginate="finishedGood in $ctrl.finishedGoods | itemsPerPage: $ctrl.itemsPerPage | filter: {code: $ctrl.searchCode, name: $ctrl.searchName} " total-items="$ctrl.totalCount"><td>{{finishedGood.id}}</td><td>{{finishedGood.code}}</td><td>{{finishedGood.name}}</td><td class="tablebutton-form"><div class="holder"><button ng-click="$ctrl.editFinishedGood(finishedGood.id)" class="btn btn-compose"><i class="ion-ios-compose-outline"></i></button> <button ng-click="$ctrl.confirmDelete(finishedGood.id,finishedGood.name);" class="btn btn-archive"><i class="ion-android-close"></i></button></div></td></tr></tbody></table><dir-pagination-controls max-size="$ctrl.totalCount" direction-links="false" boundary-links="false" on-page-change="$ctrl.getData(newPageNumber)" style="float:right; padding-right:10px"></dir-pagination-controls></div></div></div></div><div class="modal fade" id="confirmDeleteAction"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Confirm Action</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="modal-body"><p>{{$ctrl.itemName}}?</p><button class="button-link btn btn-create btn-sm" ng-click="$ctrl.deleteFinishedGood($ctrl.id);">Confirm</button> <button class="button-link btn btn-create btn-sm" ng-click="$ctrl.cancelDelete();">Cancel</button></div></div></div></div><div class="modal fade" id="confirmEditAction"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Confirm Action</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="modal-body"><p>{{$ctrl.itemName}}</p><button class="button-link btn btn-create btn-sm" ng-click="$ctrl.saveFinishedGood($ctrl.event);">Confirm</button> <button class="button-link btn btn-create btn-sm" ng-click="$ctrl.cancelEdit();">Cancel</button></div></div></div></div><div class="modal fade" id="actionDialog"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">{{$ctrl.actionTitle}}</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="modal-body"><p>{{$ctrl.actionMessage}}</p><button class="button-link btn btn-create btn-sm" ng-click="$ctrl.confirm();">Ok</button></div></div></div></div>');
$templateCache.put('./item-type-form.html','<form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="horizontal-align -between" id="add-group"><input type="hidden" ng-model="$ctrl.itemtype.id"><div class="form-group col-md-4"><label for="code">Code</label><input ng-model="$ctrl.itemtype.code" class="form-control -border" autofocus="autofocus" placeholder="Code" type="text" name="code"></div><div class="form-group col-md-4"><label for="name">Name</label><input ng-model="$ctrl.itemtype.name" class="form-control -border" placeholder="Name" type="text" name="name"></div></div><div class="action-button horizontal-align -end"><input type="submit" name="commit" value="{{ $ctrl.button }}" class="btn btn-create btn-md" data-disable-with="Save"></div></form>');
$templateCache.put('./item-types.html','<div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Item Type <a class="button-link btn btn-create btn-sm float-lg-right" ng-click="$ctrl.showAddItemType(true)">+ Add Item Type</a></h4><button class="close" data-dismiss="modal" type="button"><span ng-click="$ctrl.showAddItemType(false)" class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="searchbox-modal"><form><div class="searchbox-content"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="code" type="text" name="search" ng-model="$ctrl.searchCode"> <input class="form-control -borderless search" placeholder="name" type="text" name="search" ng-model="$ctrl.searchName"></div></div></form></div><item-type-form ng-show="$ctrl.addItemType" itemtype="$ctrl.itemtype" message="{{ $ctrl.error }}" button="Save" on-submit="$ctrl.saveItemType($event);"></item-type-form><div class="wrapper scroll-section"><table class="table find-vendor"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'id\';$ctrl.sortReverse = !$ctrl.sortReverse;">ID <span ng-show="$ctrl.sortType == \'id\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i></span> <span ng-show="$ctrl.sortType == \'id\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'code\';$ctrl.sortReverse = !$ctrl.sortReverse;">Code <span ng-show="$ctrl.sortType == \'code\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'code\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'name\';$ctrl.sortReverse = !$ctrl.sortReverse;">Name <span ng-show="$ctrl.sortType == \'name\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'name\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="itemType in $ctrl.itemTypes | filter: {code: $ctrl.searchCode, name: $ctrl.searchName} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{itemType.id}}</td><td>{{itemType.code}}</td><td>{{itemType.name}}</td><td class="tablebutton-form"><div class="holder"><button ng-click="$ctrl.editItemType(itemType.id)" class="btn btn-compose"><i class="ion-ios-compose-outline"></i></button> <button ng-click="$ctrl.deleteItemType(itemType.id)" class="btn btn-archive"><i class="ion-android-close"></i></button></div></td></tr></tbody></table></div></div></div></div>');
$templateCache.put('./item-form.html','<form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="horizontal-align -between" id="add-group"><input type="hidden" ng-model="$ctrl.item.id"><div class="form-group col-md-2"><label for="code">Code</label><input ng-model="$ctrl.item.code" class="form-control -border" autofocus="autofocus" placeholder="Code" type="text" name="code"></div><div class="form-group col-md-6"><label for="name">Description</label><input ng-model="$ctrl.item.name" class="form-control -border" placeholder="Name" type="text" name="name"></div><div class="form-group col"><label for="type">Type</label><select class="form-control select -border" ng-model="$ctrl.item.type.id" ng-options="i.id as i.code for i in $ctrl.itemTypes" name="itemTypes"></select></div><div class="form-group col"><label for="type">Unit</label><select class="form-control select -border" ng-model="$ctrl.item.unit.id" ng-options="i.id as i.code for i in $ctrl.units" name="units"></select></div></div><div class="action-button horizontal-align -end"><input type="submit" name="commit" value="{{ $ctrl.button }}" class="btn btn-create btn-md" data-disable-with="Save"></div></form>');
$templateCache.put('./procedure-area-form.html','<form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="horizontal-align -between" id="add-group"><input type="hidden" ng-model="$ctrl.procedurearea.id"><div class="form-group col-md-6"><label for="code">Code</label><input ng-model="$ctrl.procedurearea.code" class="form-control -border" autofocus="autofocus" placeholder="Code" type="text" name="code"></div><div class="form-group col-md-6"><label for="name">Name</label><input ng-model="$ctrl.procedurearea.name" class="form-control -border" placeholder="Name" type="text" name="name"></div></div><div class="action-button horizontal-align -end"><input type="submit" name="commit" value="{{ $ctrl.button }}" class="btn btn-create btn-md" data-disable-with="Save"></div></form>');
$templateCache.put('./items.html','<div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Item <a class="button-link btn btn-create btn-sm float-lg-right" ng-click="$ctrl.showAddItem(true)">+ Add Item</a></h4><button class="close" data-dismiss="modal" type="button"><span ng-click="$ctrl.showAddItem(false)" class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="searchbox-modal"><form><div class="searchbox-content"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="code" type="text" name="search" ng-model="$ctrl.searchCode"> <input class="form-control -borderless search" placeholder="name" type="text" name="search" ng-model="$ctrl.searchName"></div></div></form></div><item-form ng-show="$ctrl.addItem" item="$ctrl.item" message="{{ $ctrl.error }}" button="Save" on-submit="$ctrl.saveItem($event);"></item-form><div class="wrapper scroll-section"><table class="table find-vendor"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'id\';$ctrl.sortReverse = !$ctrl.sortReverse;">ID <span ng-show="$ctrl.sortType == \'id\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i></span> <span ng-show="$ctrl.sortType == \'id\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'code\';$ctrl.sortReverse = !$ctrl.sortReverse;">Code <span ng-show="$ctrl.sortType == \'code\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'code\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'name\';$ctrl.sortReverse = !$ctrl.sortReverse;">Name <span ng-show="$ctrl.sortType == \'name\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'name\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'type.code\';$ctrl.sortReverse = !$ctrl.sortReverse;">Type <span ng-show="$ctrl.sortType == \'type.code\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'type.code\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'unit\';$ctrl.sortReverse = !$ctrl.sortReverse;">Unit <span ng-show="$ctrl.sortType == \'unit\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'unit\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="item in $ctrl.items | filter: {code: $ctrl.searchCode, name: $ctrl.searchName} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{item.id}}</td><td>{{item.code}}</td><td>{{item.name}}</td><td>{{item.type.code}}</td><td>{{item.unit.code}}</td><td class="tablebutton-form"><div class="holder"><button ng-click="$ctrl.editItem(item.id)" class="btn btn-compose"><i class="ion-ios-compose-outline"></i></button> <button ng-click="$ctrl.deleteItem(item.id)" class="btn btn-archive"><i class="ion-android-close"></i></button></div></td></tr></tbody></table></div></div></div></div>');
$templateCache.put('./procedure-areas.html','<div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Procedure Area <a class="button-link btn btn-create btn-sm float-lg-right" ng-click="$ctrl.showAddProcedureArea(true)">+ Add Procedure Area</a></h4><button class="close" data-dismiss="modal" type="button"><span class="ion-android-close close-modal" ng-click="$ctrl.showAddProcedureArea(false)"></span></button></div><div class="modal-body"><div class="searchbox-modal"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="code" type="text" name="search" ng-model="$ctrl.searchCode"> <input class="form-control -borderless search" placeholder="name" type="text" name="search" ng-model="$ctrl.searchName"></div></div><procedure-area-form ng-show="$ctrl.addProcedureArea" procedurearea="$ctrl.procedurearea" message="{{ $ctrl.error }}" button="Save" on-submit="$ctrl.saveProcedureArea($event);"></procedure-area-form><div class="wrapper scroll-section"><table class="table find-vendor"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'id\';$ctrl.sortReverse = !$ctrl.sortReverse;">ID <span ng-show="$ctrl.sortType == \'id\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'id\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'code\';$ctrl.sortReverse = !$ctrl.sortReverse;">Code <span ng-show="$ctrl.sortType == \'code\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'code\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'name\';$ctrl.sortReverse = !$ctrl.sortReverse;">Name <span ng-show="$ctrl.sortType == \'name\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'name\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="procedureArea in $ctrl.procedureAreas | filter: {code: $ctrl.searchCode, name: $ctrl.searchName} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{procedureArea.id}}</td><td>{{procedureArea.code}}</td><td>{{procedureArea.name}}</td><td class="tablebutton-form"><div class="holder"><button ng-click="$ctrl.editProcedureArea(procedureArea.id)" class="btn btn-compose"><i class="ion-ios-compose-outline"></i></button> <button ng-click="$ctrl.deleteProcedureArea(procedureArea.id)" class="btn btn-archive"><i class="ion-android-close"></i></button></div></td></tr></tbody></table></div></div></div></div>');
$templateCache.put('./procedure-form.html','<form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="horizontal-align -between" id="add-group"><input type="hidden" ng-model="$ctrl.procedure.id"><div class="form-group col-md-2"><label for="code">Code</label><input ng-model="$ctrl.procedure.code" class="form-control -border" autofocus="autofocus" placeholder="Code" type="text" name="code"></div><div class="form-group col-md-6"><label for="name">Description</label><input ng-model="$ctrl.procedure.name" class="form-control -border" placeholder="Name" type="text" name="name"></div><div class="form-group col"><label for="type">Procedure Area</label><select class="form-control select -border" ng-model="$ctrl.procedure.procedureArea.id" ng-options="i.id as i.code for i in $ctrl.procedureAreas" name="procedureTypes"></select></div></div><div class="action-button horizontal-align -end"><input type="submit" name="commit" value="{{ $ctrl.button }}" class="btn btn-create btn-md" data-disable-with="Save"></div></form>');
$templateCache.put('./procedures.html','<div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Procedure <a class="button-link btn btn-create btn-sm float-lg-right" ng-click="$ctrl.showAddProcedure(true)">+ Add Procedure</a></h4><button class="close" data-dismiss="modal" type="button"><span ng-click="$ctrl.showAddProcedure(false)" class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="searchbox-modal"><form><div class="searchbox-content"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="code" type="text" name="search" ng-model="$ctrl.searchCode"> <input class="form-control -borderless search" placeholder="name" type="text" name="search" ng-model="$ctrl.searchName"></div></div></form></div><procedure-form ng-show="$ctrl.addProcedure" procedure="$ctrl.procedure" message="{{ $ctrl.error }}" button="Save" on-submit="$ctrl.saveProcedure($event);"></procedure-form><div class="wrapper scroll-section"><table class="table find-vendor"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'id\';$ctrl.sortReverse = !$ctrl.sortReverse;">ID <span ng-show="$ctrl.sortType == \'id\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i></span> <span ng-show="$ctrl.sortType == \'id\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'code\';$ctrl.sortReverse = !$ctrl.sortReverse;">Code <span ng-show="$ctrl.sortType == \'code\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'code\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'name\';$ctrl.sortReverse = !$ctrl.sortReverse;">Name <span ng-show="$ctrl.sortType == \'name\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'name\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'procedureArea.code\';$ctrl.sortReverse = !$ctrl.sortReverse;">Procedure Area <span ng-show="$ctrl.sortType == \'procedureArea.code\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'procedureArea.code\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="procedure in $ctrl.procedures | filter: {code: $ctrl.searchCode, name: $ctrl.searchName} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{procedure.id}}</td><td>{{procedure.code}}</td><td>{{procedure.name}}</td><td>{{procedure.procedureArea.code}}</td><td class="tablebutton-form"><div class="holder"><button ng-click="$ctrl.editProcedure(procedure.id)" class="btn btn-compose"><i class="ion-ios-compose-outline"></i></button> <button ng-click="$ctrl.deleteProcedure(procedure.id)" class="btn btn-archive"><i class="ion-android-close"></i></button></div></td></tr></tbody></table></div></div></div></div>');
$templateCache.put('./client-information-edit.html','<div class="action-link"><a class="link" href="/admin/maintenance/client-information">Client Informations</a> <span class="devider">/</span> <a class="link" href="/admin/maintenance/client-information/edit">EDIT Client Information</a></div><div class="user-panel"><div class="content horizontal-align -between"><label class="caption">EDIT Client Information</label><header><a class="btn btn-back back" id="btn-back-action" href="/admin/maintenance/client-information"><i class="ion-ios-arrow-thin-left"></i> <span>Cancel</span></a></header></div><hr class="devider"><client-information-form client="$ctrl.client" message="{{ $ctrl.error }}" button="Edit user" on-submit="$ctrl.confirmEdit($event);"></client-information-form></div><div class="modal fade" id="confirmAction"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Confirm Action</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="modal-body"><p>Are you sure you want to save changes done?</p><button class="button-link btn btn-create btn-sm" ng-click="$ctrl.edit($ctrl.event);">Confirm</button> <button class="button-link btn btn-create btn-sm" ng-click="$ctrl.cancel();">Cancel</button></div></div></div></div>');
$templateCache.put('./client-information-form.html','<form novalidate ng-submit="$ctrl.submitForm();" (keydown.enter)="$event.preventDefault()" method="post"><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">name</label><input type="text" class="form-control -border" ng-model="$ctrl.client.name"></div></div></div><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">code</label><input type="text" class="form-control -border" ng-model="$ctrl.client.code"></div></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">businessAddress</label><input type="text" class="form-control -border" ng-model="$ctrl.client.businessAddress"></div></div></div><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">deliveryAddress</label><input type="text" class="form-control -border" ng-model="$ctrl.client.deliveryAddress"></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">contactPeron</label><input type="text" class="form-control -border" ng-model="$ctrl.client.contactPeron"></div></div></div><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">zipCode</label><input type="text" class="form-control -border" ng-model="$ctrl.client.zipCode"></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">lineOfBusiness</label><input type="text" class="form-control -border" ng-model="$ctrl.client.lineOfBusiness"></div></div></div><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">telephoneNumbers</label><input type="text" class="form-control -border" ng-model="$ctrl.client.telephoneNumbers"></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">yearsInBusiness</label><input type="text" class="form-control -border" ng-model="$ctrl.client.yearsInBusiness"></div></div></div><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">proprietor</label><input type="text" class="form-control -border" ng-model="$ctrl.client.proprietor"></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Tin</label><input type="text" class="form-control -border" ng-model="$ctrl.client.tin"></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Terms</label><input type="text" class="form-control -border" ng-model="$ctrl.client.terms"></div></div></div><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Max Credit Limit</label><input type="text" class="form-control -border" ng-model="$ctrl.client.maxCreditLimit"></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Sales Rep</label><select class="form-control select -border" ng-model="$ctrl.client.salesRep.id" ng-options="i.id as i.name for i in $ctrl.salesReps"></select></div></div></div><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Cluster</label><select class="form-control select -border" ng-model="$ctrl.client.clusterCode.id" ng-options="i.id as i.code for i in $ctrl.clusters"></select></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Delivery Depot</label><select class="form-control select -border" ng-model="$ctrl.client.depot.id" ng-options="i.id as i.name for i in $ctrl.depot"></select></div></div></div><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Status</label><select class="form-control select -border" ng-model="$ctrl.client.status" ng-options="i.value as i.name for i in $ctrl.status"></select></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Institutional</label><select class="form-control select -border" ng-model="$ctrl.client.institutionalCode.id" ng-options="i.id as i.code for i in $ctrl.institutionalCodes"></select></div></div></div><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Discount</label><input type="number" class="form-control -border" ng-model="$ctrl.client.discount"></div></div></div></div></div><div><button class="btn btn-create btn-md" type="button" ng-click="$ctrl.addReference()">Add Client Reference</button></div><table class="table table-list"><thead><tr><th>Type</th><th>Name</th><th>Branch</th><th>TelephoneNumber</th></tr></thead><tbody id="table-less-padding"><tr ng-repeat="ref in $ctrl.client.clientReferencesList "><td><input type="text" placeholder="type" class="form-control -border" ng-model="ref.type" class="form-control -border"></td><td><input type="text" placeholder="name" class="form-control -border" ng-model="ref.name" class="form-control -border"></td><td><input type="text" placeholder="branch" class="form-control -border" ng-model="ref.branch" class="form-control -border"></td><td><input type="text" placeholder="telephoneNumber" class="form-control -border" ng-model="ref.telephoneNumber" class="form-control -border"></td></tr></tbody></table><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></form>');
$templateCache.put('./client-information-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Client Information Form</h3></div></div><header class="header-form"><a href="/admin/maintenance/client-information" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">New Client Information Form</h3></header><client-information-form client="$ctrl.client" message="{{ $ctrl.error }}" button="Create Client" on-submit="$ctrl.confirmCreate($event);"></client-information-form><div class="modal fade" id="confirmAction"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Confirm Action</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="modal-body"><p>Are you sure you want to add this client?</p><button class="button-link btn btn-create btn-sm" ng-click="$ctrl.addClient($ctrl.event);">Confirm</button> <button class="button-link btn btn-create btn-sm" ng-click="$ctrl.cancel();">Cancel</button></div></div></div></div>');
$templateCache.put('./client-informations.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Client Information</h3></div><a href="/admin/maintenance/client-information/new" ng-click="" class="btn btn-create btn-md button-link">Add Client</a></div><div class="client-pris"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="Business name" type="text" name="search" ng-model="$ctrl.searchName"> <input class="form-control -borderless search" placeholder="Proprietor" type="text" name="search" ng-model="$ctrl.searchProprietor"></div></div><table class="table table-list"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'code\';$ctrl.sortReverse = !$ctrl.sortReverse;">code <span ng-show="$ctrl.sortType == \'code\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'code\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'name\';$ctrl.sortReverse = !$ctrl.sortReverse;">name <span ng-show="$ctrl.sortType == \'name\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'name\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'tin\';$ctrl.sortReverse = !$ctrl.sortReverse;">tin <span ng-show="$ctrl.sortType == \'tin\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'tin\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'proprietor\';$ctrl.sortReverse = !$ctrl.sortReverse;">proprietor <span ng-show="$ctrl.sortType == \'proprietor\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'proprietor\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'businessAddress\';$ctrl.sortReverse = !$ctrl.sortReverse;">zipCode <span ng-show="$ctrl.sortType == \'businessAddress\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'businessAddress\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'lineOfBusiness\';$ctrl.sortReverse = !$ctrl.sortReverse;">status <span ng-show="$ctrl.sortType == \'lineOfBusiness\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'lineOfBusiness\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr dir-paginate="c in $ctrl.clients | itemsPerPage: $ctrl.clientsPerPage | orderBy:$ctrl.sortType:$ctrl.sortReverse" total-items="$ctrl.totalClients" current-page="$ctrl.pagination.current"><td>{{c.code}}</td><td>{{c.name}}</td><td>{{c.tin}}</td><td>{{c.proprietor}}</td><td>{{c.zipCode}}</td><td>{{c.status}}</td><td class="tablebutton-form"><div class="holder"><button class="btn btn-compose"><i class="ion-ios-compose-outline" data-toggle="modal" ng-click="$ctrl.goToEdit(c.id)"></i></button><!-- <button class=\'btn btn-archive\' ng-click="$ctrl.confirmDelete(c.id)">\r\n\t\t\t\t\t\t\t<i class=\'ion-android-close\'></i>\r\n\t\t\t\t\t\t</button> --></div></td></tr></tbody></table><dir-pagination-controls style="float:right; padding-right:10px" direction-links="true" auto-hide="true" on-page-change="$ctrl.pageChanged(newPageNumber)"></dir-pagination-controls><!--     \r\n    <div class=\'modal fade\' id=\'confirmDeleteAction\'>\r\n\t\t<div class="modal-dialog -bg">\r\n\t\t<div class="modal-content">\r\n\t\t\t<div class="modal-header">\r\n\t\t\t\t<h4 class="modal-title">\r\n\t\t\t\t\tConfirm Action\r\n\t\t\t\t</h4>\r\n\t\t\t\t<button class="close" data-dismiss="modal" type="button">\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t\t<div class="modal-body">\r\n\t\t\t\t<p>{{$ctrl.itemName}}?</p>\r\n\t\t\t\t<button class="button-link btn btn-create btn-sm" ng-click="$ctrl.deleteFinishedGood($ctrl.id);">Confirm</button>\r\n\t\t\t\t<button class="button-link btn btn-create btn-sm" ng-click="$ctrl.cancelDelete();">Cancel</button>\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n    </div> -->');
$templateCache.put('./product-form.html','<form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" data-target="#findFgModal" data-toggle="modal">Select Finished Good</a></div><div class="form-group rmpm"><label class="label capitalize-text">FG Code</label><input disabled="disabled" type="text" ng-model="$ctrl.product.finishedGood.code" ng-change="$ctrl.populateApprovedItems()" readonly="readonly" class="form-control -border"><label class="label capitalize-text">FG Name</label><input disabled="disabled" type="text" ng-model="$ctrl.product.finishedGood.name" ng-change="$ctrl.populateApprovedItems()" readonly="readonly" class="form-control -border"></div></div></div><div class="form-content" ng-if="$ctrl.product.finishedGood"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Depot</label><select class="form-control select -border" ng-model="$ctrl.product.depot.id" ng-options="d.id as d.code for d in $ctrl.depots" name="depot"></select></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Lot #</label><input type="text" class="form-control -border" ng-model="$ctrl.product.lotNumber"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Expiration</label><input type="date" class="form-control -border" ng-model="$ctrl.product.expiration"></div></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Classification</label><select class="form-control select -border" ng-model="$ctrl.product.classification.id" ng-options="c.id as c.code for c in $ctrl.classifications" name="classification"></select></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Category</label><select class="form-control select -border" ng-model="$ctrl.product.category.id" ng-options="c.id as c.title for c in $ctrl.categories" name="category"></select></div></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Division</label><select class="form-control select -border" ng-model="$ctrl.product.division.id" ng-options="c.id as c.title for c in $ctrl.divisions" name="division"></select></div></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Unit Price</label><input type="text" ng-model="$ctrl.product.unitPrice" class="form-control -border"></div><div class="form-group field"><label for="department">SMALL UOM</label><select class="form-control select -border" ng-model="$ctrl.product.smallUnit.id" ng-options="s.id as s.code for s in $ctrl.units" name="smallUnit"></select></div><div class="form-group field"><label for="department">BIG UOM</label><select class="form-control select -border" ng-model="$ctrl.product.bigUnit.id" ng-options="b.id as b.code for b in $ctrl.units" name="bigUnit"></select></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Quantity/Box</label><input type="text" class="form-control -border" ng-model="$ctrl.product.quantityPerBox"></div><div class="form-group field"><label class="label capitalize-text">Reorder Level</label><input type="text" ng-model="$ctrl.product.reorderLevel" class="form-control -border"></div></div></div></div></div><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></div></div></form><find-fg-modal fg="$ctrl.product.finishedGood"></find-fg-modal>');
$templateCache.put('./product-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Products</h3></div></div><header class="header-form"><a href="/admin/maintenance/products" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">New Product Form</h3></header><product-form product="$ctrl.product" message="{{ $ctrl.error }}" button="Create Product" on-submit="$ctrl.createProduct($event);"></product-form>');
$templateCache.put('./products.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Products</h3></div><a href="#" ng-click="$ctrl.createNewProduct($event);" class="btn btn-create btn-md button-link">Create New Request</a></div><div class="client-pris"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0 !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="Lot No" type="text" name="search" ng-model="$ctrl.searchNumber"> <input class="form-control -borderless search" placeholder="Date" type="text" name="search" ng-model="$ctrl.searchDate"></div></div><table ng-if="$ctrl.products" class="table table-list"><thead><tr><th>FG CODE</th><th>FG NAME</th><th>Lot #</th><th>Unit Price</th><th>Status</th><th>Expiry</th><th></th></tr></thead><tbody><tr ng-repeat="product in $ctrl.products | filter: {date: $ctrl.searchDate, number: $ctrl.searchNumber} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{product.finishedGood.code}}</td><td>{{product.finishedGood.name}}</td><td>{{product.lotNumber}}</td><td>{{product.unitPrice}}</td><td ng-if="!product.status" else hasstatus>Not Active</td><ng-template #hasstatus><td>{{product.status}}</td></ng-template><td>{{product.expiration | date}}</td><td class="tablebutton-form"><div class="holder"><button data-toggle="modal" ng-click="$ctrl.openModal(product)" class="btn btn-show"><i class="ion-ios-eye-outline"></i></button> <button class="btn btn-archive" ng-click="$ctrl.deleteProduct(product.id)"><i class="ion-ios-box-outline"></i></button></div></td></tr></tbody></table><view-product-modal product="$ctrl.product"></view-product-modal>');
$templateCache.put('./memo-type-form.html','<form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="horizontal-align -between" id="add-group"><input type="hidden" ng-model="$ctrl.memotype.id"><div class="form-group col-md-4"><label for="code">Code</label><input ng-model="$ctrl.memotype.code" class="form-control -border" autofocus="autofocus" placeholder="Code" type="text" name="code"></div><div class="form-group col-md-4"><label for="name">Name</label><input ng-model="$ctrl.memotype.name" class="form-control -border" placeholder="Name" type="text" name="name"></div><div class="form-group col-md-4"><label for="name">Type</label><select ng-model="$ctrl.memotype.type" class="form-control -border"><option value="CM">CM</option><option value="DM">DM</option></select></div></div><div class="action-button horizontal-align -end"><input type="submit" name="commit" value="{{ $ctrl.button }}" class="btn btn-create btn-md" data-disable-with="Save"></div></form>');
$templateCache.put('./memo-types.html','<div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Memo Type <a class="button-link btn btn-create btn-sm float-lg-right" ng-click="$ctrl.showAddMemoType(true)">+ Add Memo Type</a></h4><button class="close" data-dismiss="modal" type="button"><span ng-click="$ctrl.showAddMemoType(false)" class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="searchbox-modal"><form><div class="searchbox-content"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="code" type="text" name="search" ng-model="$ctrl.searchCode"> <input class="form-control -borderless search" placeholder="name" type="text" name="search" ng-model="$ctrl.searchName"></div></div></form></div><memo-type-form ng-show="$ctrl.addMemoType" memotype="$ctrl.memotype" message="{{ $ctrl.error }}" button="Save" on-submit="$ctrl.saveMemoType($event);"></memo-type-form><div class="wrapper scroll-section"><table class="table find-vendor"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'id\';$ctrl.sortReverse = !$ctrl.sortReverse;">ID <span ng-show="$ctrl.sortType == \'id\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i></span> <span ng-show="$ctrl.sortType == \'id\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'code\';$ctrl.sortReverse = !$ctrl.sortReverse;">Code <span ng-show="$ctrl.sortType == \'code\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'code\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'name\';$ctrl.sortReverse = !$ctrl.sortReverse;">Name <span ng-show="$ctrl.sortType == \'name\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'name\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'name\';$ctrl.sortReverse = !$ctrl.sortReverse;">Type <span ng-show="$ctrl.sortType == \'name\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'name\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="memoType in $ctrl.memoTypes | filter: {code: $ctrl.searchCode, name: $ctrl.searchName} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{memoType.id}}</td><td>{{memoType.code}}</td><td>{{memoType.name}}</td><td>{{memoType.type}}</td><td class="tablebutton-form"><div class="holder"><button ng-click="$ctrl.editMemoType(memoType.id)" class="btn btn-compose"><i class="ion-ios-compose-outline"></i></button> <button ng-click="$ctrl.deleteMemoType(memoType.id)" class="btn btn-archive"><i class="ion-android-close"></i></button></div></td></tr></tbody></table></div></div></div></div>');
$templateCache.put('./unit-form.html','<form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="horizontal-align -between" id="add-group"><input type="hidden" ng-model="$ctrl.unit.id"><div class="form-group"><label for="code">Code</label><input ng-model="$ctrl.unit.code" class="form-control -border" autofocus="autofocus" placeholder="Code" type="text" name="code"></div><div class="form-group"><label for="name">Name</label><input ng-model="$ctrl.unit.name" class="form-control -border" placeholder="Name" type="text" name="name"></div></div><div class="action-button horizontal-align -end"><input type="submit" name="commit" value="{{ $ctrl.button }}" class="btn btn-create btn-md" data-disable-with="Save"></div></form>');
$templateCache.put('./units.html','<div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Unit <a class="button-link btn btn-create btn-sm float-lg-right" ng-click="$ctrl.showAddUnit(true)">+ Add Unit</a></h4><button class="close" data-dismiss="modal" type="button"><span class="ion-android-close close-modal" ng-click="$ctrl.showAddUnit(false)"></span></button></div><div class="modal-body"><div class="searchbox-modal"><div class="searchbox-content"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="code" type="text" name="search" ng-model="$ctrl.searchCode"> <input class="form-control -borderless search" placeholder="name" type="text" name="search" ng-model="$ctrl.searchName"></div></div></div><unit-form ng-show="$ctrl.addUnit" unit="$ctrl.unit" message="{{ $ctrl.error }}" button="Save" on-submit="$ctrl.saveUnit($event);"></unit-form><div class="wrapper scroll-section"><table class="table find-vendor"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'id\';$ctrl.sortReverse = !$ctrl.sortReverse;">ID <span ng-show="$ctrl.sortType == \'id\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i></span> <span ng-show="$ctrl.sortType == \'id\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'code\';$ctrl.sortReverse = !$ctrl.sortReverse;">Code <span ng-show="$ctrl.sortType == \'code\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'code\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'name\';$ctrl.sortReverse = !$ctrl.sortReverse;">Name <span ng-show="$ctrl.sortType == \'name\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'name\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="unit in $ctrl.units | filter: {code: $ctrl.searchCode, name: $ctrl.searchName} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{unit.id}}</td><td>{{unit.code}}</td><td>{{unit.name}}</td><td class="tablebutton-form"><div class="holder"><button ng-click="$ctrl.editUnit(unit.id)" class="btn btn-compose"><i class="ion-ios-compose-outline"></i></button> <button ng-click="$ctrl.deleteUnit(unit.id)" class="btn btn-archive"><i class="ion-android-close"></i></button></div></td></tr></tbody></table></div></div></div></div>');
$templateCache.put('./vendor-edit.html','<div class="action-link"><a class="link" href="/admin/maintenance/vendor">Vendor Informations</a> <span class="devider">/</span> <a class="link" href="/admin/maintenance/vendor/edit">EDIT Vendor Information</a></div><div class="user-panel"><div class="content horizontal-align -between"><label class="caption">EDIT Vendor Information</label><header><a class="btn btn-back back" id="btn-back-action" href="/admin/maintenance/vendor"><i class="ion-ios-arrow-thin-left"></i> <span>Cancel</span></a></header></div><hr class="devider"><vendor-form vendor="$ctrl.vendor" message="{{ $ctrl.error }}" button="Edit user" on-submit="$ctrl.confirmEdit($event);"></vendor-form></div><div class="modal fade" id="confirmAction"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Confirm Action</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="modal-body"><p>Are you sure you want to save changes done?</p><button class="button-link btn btn-create btn-sm" ng-click="$ctrl.edit($ctrl.event);">Confirm</button> <button class="button-link btn btn-create btn-sm" ng-click="$ctrl.cancel();">Cancel</button></div></div></div></div>');
$templateCache.put('./vendor-form.html','<form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">name</label><input type="text" class="form-control -border" ng-model="$ctrl.vendor.name"></div></div></div><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">code</label><input type="text" class="form-control -border" ng-model="$ctrl.vendor.code"></div></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Full Name</label><input type="text" class="form-control -border" ng-model="$ctrl.vendor.fullName"></div></div></div><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Address</label><input type="text" class="form-control -border" ng-model="$ctrl.vendor.address"></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Contact Person</label><input type="text" class="form-control -border" ng-model="$ctrl.vendor.contactPerson"></div></div></div><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Phone Number</label><input type="text" class="form-control -border" ng-model="$ctrl.vendor.phoneNumber"></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Terms</label><input type="text" class="form-control -border" ng-model="$ctrl.vendor.terms"></div></div></div><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Vat</label><input type="text" class="form-control -border" ng-model="$ctrl.vendor.vat"></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Tin</label><input type="text" class="form-control -border" ng-model="$ctrl.vendor.tin"></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Area</label><select class="form-control select -border" ng-model="$ctrl.vendor.area.id" ng-options="i.id as i.name for i in $ctrl.areas"></select></div></div></div><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Group</label><select class="form-control select -border" ng-model="$ctrl.vendor.group.id" ng-options="i.id as i.name for i in $ctrl.groups"></select></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Department</label><select class="form-control select -border" ng-model="$ctrl.vendor.department.id" ng-options="i.id as i.code for i in $ctrl.departments"></select></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Type</label><select class="form-control select -border" ng-model="$ctrl.vendor.type" ng-options="i.value as i.name for i in $ctrl.type"></select></div></div></div><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Status</label><select class="form-control select -border" ng-model="$ctrl.vendor.isActive" ng-options="i.value as i.name for i in $ctrl.isActive"></select></div></div></div></div></div><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></form>');
$templateCache.put('./vendor-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Vendor Form</h3></div></div><header class="header-form"><a href="/admin/maintenance/vendor" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">New Vendor Form</h3></header><vendor-form vendor="$ctrl.vendor" message="{{ $ctrl.error }}" button="Create Vendor" on-submit="$ctrl.confirmCreate($event);"></vendor-form><div class="modal fade" id="confirmAction"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Confirm Action</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="modal-body"><p>Are you sure you want to add this client?</p><button class="button-link btn btn-create btn-sm" ng-click="$ctrl.addVendor($ctrl.event);">Confirm</button> <button class="button-link btn btn-create btn-sm" ng-click="$ctrl.cancel();">Cancel</button></div></div></div></div>');
$templateCache.put('./vendors.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Vendor Information</h3></div><a href="/admin/maintenance/vendor/new" ng-click="" class="btn btn-create btn-md button-link">Add Vendor</a></div><div class="vendor-pris"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="Business name" type="text" name="search" ng-model="$ctrl.searchName"></div></div><table class="table table-list"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'code\';$ctrl.sortReverse = !$ctrl.sortReverse;">Code <span ng-show="$ctrl.sortType == \'code\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'code\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'name\';$ctrl.sortReverse = !$ctrl.sortReverse;">Name <span ng-show="$ctrl.sortType == \'name\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'name\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'tin\';$ctrl.sortReverse = !$ctrl.sortReverse;">tin <span ng-show="$ctrl.sortType == \'tin\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'tin\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'proprietor\';$ctrl.sortReverse = !$ctrl.sortReverse;">Phone Number <span ng-show="$ctrl.sortType == \'proprietor\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'proprietor\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'businessAddress\';$ctrl.sortReverse = !$ctrl.sortReverse;">Address <span ng-show="$ctrl.sortType == \'businessAddress\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'businessAddress\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'lineOfBusiness\';$ctrl.sortReverse = !$ctrl.sortReverse;">Active <span ng-show="$ctrl.sortType == \'lineOfBusiness\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'lineOfBusiness\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr dir-paginate="c in $ctrl.vendors | filter: {name: $ctrl.searchName}| itemsPerPage: $ctrl.itemsPerPage | orderBy:$ctrl.sortType:$ctrl.sortReverse" total-items="$ctrl.totalCount"><td>{{c.code}}</td><td>{{c.name}}</td><td>{{c.tin}}</td><td>{{c.phoneNumber}}</td><td>{{c.address}}</td><td>{{c.isActive}}</td><td class="tablebutton-form"><div class="holder"><button class="btn btn-compose"><i class="ion-ios-compose-outline" data-toggle="modal" ng-click="$ctrl.goToEdit(c.id)"></i></button></div></td></tr></tbody><dir-pagination-controls style="float:right; padding-right:10px" direction-links="true" auto-hide="true" on-page-change="$ctrl.pageChanged(newPageNumber)"></dir-pagination-controls></table>');
$templateCache.put('./approval-receipt-form.html','<form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" ng-click="$ctrl.findReceivingReceipts()" data-target="#selectRRModal" data-toggle="modal">Select Received Item</a></div><div class="form-group rmpm"><label class="label capitalize-text">RR Number</label><input disabled="disabled" type="text" ng-model="$ctrl.ar.receivingReceipt.number" ng-change="$ctrl.populateApprovedItems()" readonly="readonly" class="form-control -border"></div></div></div><div class="form-content" ng-if="$ctrl.ar.receivingReceipt"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">AR Number</label><input type="text" readonly="readonly" class="form-control -border" value="AUTOGENERATED UPON CREATION"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date</label><input type="date" class="form-control -border" ng-model="$ctrl.ar.date"></div></div></div></div></div></div><label class="label capitalize-text">Control Number</label><input type="text" class="form-control -border" ng-model="$ctrl.ar.controlNumber"><div class="step-form"><div class="horizontal-align -between"><div><p>Item Code</p><div class="horizontal-align -between content"><div class="form-group field"><input type="text" class="form-control -border" ng-model="$ctrl.ar.item.code" disabled="disabled"></div></div></div><label>-</label><div><p>RR Number</p><div class="horizontal-align -between content"><div class="form-group field"><input type="text" class="form-control -border" ng-model="$ctrl.ar.receivingReceipt.number" disabled="disabled"></div></div></div><label>-</label><div><p>Items Received</p><div class="horizontal-align -between content"><div class="form-group field"><input type="text" class="form-control -border" ng-model="$ctrl.ar.receivedQuantity" disabled="disabled"></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Received By</label><input type="text" ng-value="$ctrl.ar.receivedBy.department.name" class="form-control -border" disabled="disabled"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label for="department">DR #</label><input disabled="disabled" type="text" ng-model="$ctrl.ar.receivingReceipt.drNumber" readonly="readonly" class="form-control -border"></div><div class="form-group field"><label for="department">SI #</label><input disabled="disabled" type="text" ng-model="$ctrl.ar.receivingReceipt.siNumber" readonly="readonly" class="form-control -border"></div></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Max Containers</label><input type="text" class="form-control -border" ng-model="$ctrl.ar.maxContainers"></div><div class="form-group field"><label class="label capitalize-text">Specified Gravity</label><input type="text" ng-model="$ctrl.ar.specifiedGravity" class="form-control -border"></div></div></div></div></div><table class="table table-list"><thead><tr><th>Item</th><th>Received</th><th>Rejected</th><th>QCSamples</th><th>Approved</th><th>Expiration</th><th>Best Before</th><th>Re-eval</th><th>Re-test</th></tr></thead><tbody id="table-less-padding"><tr><td>{{$ctrl.ar.item.name}} {{$ctrl.ar.item.code}}</td><td><input disabled="disabled" type="text" ng-model="$ctrl.ar.receivedQuantity" ng-change="$ctrl.calculateTotal($ctrl.ar)" class="form-control -border"></td><!-- <td><input type="text" ng-model="$ctrl.ar.approvedQuantity" ng-change="$ctrl.calculateTotal($ctrl.ar)" class="form-control -border" /></td>--><td><input type="text" ng-model="$ctrl.ar.rejectedQuantity" ng-change="$ctrl.calculateTotal($ctrl.ar)" class="form-control -border"></td><td><input type="text" ng-model="$ctrl.ar.qcSamples" ng-change="$ctrl.calculateTotal($ctrl.ar)" class="form-control -border"></td><td><input type="text" ng-model="$ctrl.ar.approvedQuantity" class="form-control -border"></td><td><input type="date" ng-model="$ctrl.ar.expiration" class="form-control -border"></td><td><input type="date" ng-model="$ctrl.ar.bestBefore" class="form-control -border"></td><td><input type="date" ng-model="$ctrl.ar.reevaluation" class="form-control -border"></td><td><input type="date" ng-model="$ctrl.ar.retest" class="form-control -border"></td></tr></tbody></table><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" ng-model="$ctrl.ar.remarks"></textarea></div></div></div></div></div><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></div></form><div class="modal fade" id="selectRRModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Receiving Receipt Item</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="wrapper scroll-section"><table class="table table-hover"><thead><tr><th></th><th>RR #</th><th>Date</th><th>Status</th><th>Item</th><th>Code</th><th></th></tr></thead><tbody><tr ng-repeat="rr in $ctrl.receivingReceipts"><td>{{rr.number}}</td><td>{{rr.date | date}}</td><td>{{rr.receivedItem.status}}</td><td>{{rr.receivedItem.item.name}}</td><td>{{rr.receivedItem.item.code}}</td><td><button class="btn btn-primary" ng-click="$ctrl.populateApprovedItems(rr)" data-dismiss="modal" type="button">Select</button></td></tr></tbody></table></div></div></div></div>');
$templateCache.put('./approval-receipt-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Approval Receipt Form</h3></div></div><header class="header-form"><a href="/admin/dashboard/approved-receipt" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">New Approval Receipt Form</h3></header><approved-receipt-form ar="$ctrl.ar" message="{{ $ctrl.error }}" button="Create Approval Receipt" on-submit="$ctrl.createApprovedReceipt($event);"></approved-receipt-form>');
$templateCache.put('./approval-receipts.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Approved Receipts</h3></div><!-- <a href="/admin/dashboard/approved-receipt-tolling/new" ng-click="" class="btn btn-create btn-md button-link" style="background-color:blueviolet;">Create AR Tolling</a> --> <a href="/admin/dashboard/approved-receipt/new" ng-click="" class="btn btn-create btn-md button-link">Create AR</a></div><div class="client-pris"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="AR No" type="text" name="search" ng-model="$ctrl.searchNumber"> <input class="form-control -borderless search" placeholder="RR No" type="text" name="search" ng-model="$ctrl.searchRRNumber"></div></div><table ng-if="$ctrl.approvalReceipts" class="table table-list"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'number\';$ctrl.sortReverse = !$ctrl.sortReverse;">AR No <span ng-show="$ctrl.sortType == \'number\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'number\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'rrNumber\';$ctrl.sortReverse = !$ctrl.sortReverse;">RR No <span ng-show="$ctrl.sortType == \'rrNumber\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'rrNumber\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'materialType\';$ctrl.sortReverse = !$ctrl.sortReverse;">Material Type <span ng-show="$ctrl.sortType == \'materialType\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'materialType\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'quantity\';$ctrl.sortReverse = !$ctrl.sortReverse;">No of items <span ng-show="$ctrl.sortType == \'quantity\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'quantity\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'drNumber\';$ctrl.sortReverse = !$ctrl.sortReverse;">Control Number <span ng-show="$ctrl.sortType == \'drNumber\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'drNumber\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'drsi\';$ctrl.sortReverse = !$ctrl.sortReverse;">DR/SI <span ng-show="$ctrl.sortType == \'drsi\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'drsi\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="ar in $ctrl.approvalReceipts | filter: {number: $ctrl.searchNumber, rrNumber: $ctrl.searchRRNumber} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{ar.number}}</td><td>{{ar.rrNumber}}</td><td>{{ar.item.type.name}}</td><td>{{ar.approvedQuantity}}</td><td>{{ar.controlNumber}}</td><td>{{ar.receivingReceipt.drNumber}}/{{ar.receivingReceipt.siNumber}}</td><td class="tablebutton-form"><div class="holder"><button class="btn btn-compose" data-toggle="modal" ng-click="$ctrl.openModal(ar)" data-target="#arModal" class="btn btn-show"><i class="ion-ios-eye-outline"></i></button> <button class="btn btn-compose"><i class="ion-ios-compose-outline" data-toggle="modal" ng-click=""></i></button> <button class="btn btn-archive" ng-click=""><i class="ion-ios-box-outline"></i></button></div></td></tr></tbody></table><div class="modal fade" id="arModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Approved Receipt No. {{$ctrl.ar.number}}</h4><button data-dismiss="modal" class="close"><span class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="horizontal-align -between modal-information"><p class="title">A.R No: <span class="content">{{$ctrl.ar.number}}</span></p><p class="title">R.R No: <span class="content">{{$ctrl.ar.rrNumber}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">DR / SI: <span class="content">{{$ctrl.ar.receivingReceipt.drNumber}}/{{$ctrl.ar.receivingReceipt.siNumber}}</span></p><p class="title">Source: <span class="content">{{$ctrl.ar.company.name}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Max Containers: <span class="content">{{$ctrl.ar.maxContainers}}</span></p><p class="title">Control Number: <span class="content">{{$ctrl.ar.controlNumber}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Spec. Gravity: <span class="content">{{$ctrl.ar.specifiedGravity}}</span></p></div><div class="wrapper scroll-section"><table class="table table-list"><thead><tr><th>Item Code</th><th>Item Name</th><th>Material Type</th><th>Total</th><th>Expiration</th><th></th></tr></thead><tbody><tr><td>{{$ctrl.ar.item.code}}</td><td>{{$ctrl.ar.item.name}}</td><td><label class="custom-label -narrow" ng-class="{\'-apple\':$ctrl.ar.item.type.code == \'RM\', \'-orangish\':$ctrl.ar.item.type.code ==\'PM\'}">{{$ctrl.ar.item.type.name}}</label></td><td>{{$ctrl.ar.approvedQuantity}} {{$ctrl.ar.unit}}</td><td>{{$ctrl.ar.expiration | date}}</td><td><button class="btn btn-compose" data-toggle="modal" ng-click="$ctrl.openModalApprovedItem($ctrl.ar)" data-target="#approvedItemModal" class="btn btn-show"><i class="ion-ios-eye-outline"></i></button></td></tr></tbody></table></div></div><div class="modal-footer"><p class="date">Created at {{$ctrl.ar.date | date}}</p><button class="btn btn-cancel" data-dismiss="modal">Close</button></div></div></div></div><div class="modal fade" id="approvedItemModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Approved Item</h4><button data-dismiss="modal" class="close"><span class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="horizontal-align -between modal-information"><p class="title">Item Name: <span class="content">{{$ctrl.approvedItem.item.name}} {{$ctrl.approvedItem.item.code}}</span></p><p class="title"><!-- EMPTY --></p></div><div class="horizontal-align -between modal-information"><p class="title">Material Type: <span class="content"><label class="custom-label -narrow" ng-class="{\'-apple\':$ctrl.approvedItem.item.type.code == \'RM\', \'-orangish\':$ctrl.approvedItem.item.type.code ==\'PM\'}">{{$ctrl.approvedItem.item.type.name}}</label></span></p><p class="title"><!-- EMPTY --></p></div><div class="horizontal-align -between modal-information"><p class="title">Received Quantity: <span class="content">{{$ctrl.approvedItem.receivedQuantity}}</span></p><p class="title">Approved Quantity: <span class="content">{{$ctrl.approvedItem.approvedQuantity}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Rejected Quantity: <span class="content">{{$ctrl.approvedItem.rejectedQuantity}}</span></p><p class="title">QC Samples: <span class="content">{{$ctrl.approvedItem.qcSamples}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Total Quantity: <span class="content">{{$ctrl.approvedItem.totalQuantity}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Expiration: <span class="content">{{$ctrl.approvedItem.expiration | date}}</span></p><p class="title">Best before: <span class="content">{{$ctrl.approvedItem.bestBefore | date}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Re-evaluation: <span class="content">{{$ctrl.approvedItem.reevaluation | date}}</span></p><p class="title">Re-test: <span class="content">{{$ctrl.approvedItem.retest | date}}</span></p></div></div></div></div></div>');
$templateCache.put('./employee-form.html','<form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="horizontal-align -between" id="name-group"><div class="form-group"><label for="first_name">First name</label><input class="form-control -border" ng-model="$ctrl.employee.firstName" autofocus="autofocus" placeholder="First name" type="text" name="first_name"></div><div class="form-group"><label for="last_name">Last name</label><input class="form-control -border" ng-model="$ctrl.employee.lastName" placeholder="Last name" type="text" name="last_name"></div><div class="form-group initial"><label class="middle" for="M.I">Middle Name</label><input class="form-control -border" placeholder="MI" ng-model="$ctrl.employee.middleName" type="text" name="middle_initial"></div><div class="form-group initial"><label class="middle" for="M.I">Given Name</label><input class="form-control -border" placeholder="Given Name" ng-model="$ctrl.employee.givenName" type="text" name="middle_initial"></div></div><div class="horizontal-align -between" id="security-group"><div class="form-group"><label for="email">Employee No</label><input class="form-control -border" ng-model="$ctrl.employee.number" type="text" name="email"></div><div class="form-group"><label for="password">Tax Exempt Code</label><input class="form-control -border" type="text" ng-model="$ctrl.employee.taxExemptCode" name="password"></div><div class="form-group"><label for="Confirm password">ATM Account No</label><input class="form-control -border" type="password" ng-model="$ctrl.employee.atmAccountNo" name="confirm_password"></div></div><div class="horizontal-align -between" id="account-group"><div class="form-group"><label for="company">Pagibig ID</label><input class="form-control -border" type="text" ng-model="$ctrl.employee.pagibigId" name="confirm_password"></div><div class="form-group"><label for="department">SSS No</label><input class="form-control -border" type="text" ng-model="$ctrl.employee.sssNo" name="department"></div><div class="form-group initial"><label for="Employee type">Hourly Rate</label><input class="form-control -border" type="text" ng-model="$ctrl.employee.hourlyRate" name="employee_type"></div></div><div class="horizontal-align -between" id="account-group"><div class="form-group"><label for="company">Gender</label><select class="form-control -border" ng-model="$ctrl.employee.gender"><option value="MALE">MALE</option><option value="FEMALE">FEMALE</option></select></div><div class="form-group"><label for="department">Level Code</label><input class="form-control -border" type="text" ng-model="$ctrl.employee.levelCode" name="department"></div><div class="form-group"><label for="email">Monthly Salary</label><input class="form-control -border" placeholder="Monthly Salary" ng-model="$ctrl.employee.monthlySalary" type="text" name="email"></div></div><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></form>');
$templateCache.put('./employee-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Employee Form</h3></div></div><header class="header-form"><a href="/admin/dashboard/employee" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading"></h3></header><employee-form employee="$ctrl.employee" message="{{ $ctrl.error }}" button="Submit" on-submit="$ctrl.createEmployee($event);"></employee-form>');
$templateCache.put('./employees.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Employees</h3></div><a href="#" ng-click="$ctrl.createNewEmployee($event);" class="btn btn-create btn-md button-link">Create New Request</a></div><div class="client-pris"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0 !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="Emp No" type="text" name="search" ng-model="$ctrl.searchNumber"> <input class="form-control -borderless search" placeholder="Name" type="text" name="search" ng-model="$ctrl.searchName"></div></div><table ng-if="$ctrl.employees" class="table table-list"><thead><tr><th>Emp No</th><th>Name</th><th>Given Name</th><th>Gender</th><th>Monthly Salary</th><th>Hourly Rate</th><th></th></tr></thead><tbody><!-- <tr\r\n      ng-repeat="employee in $ctrl.employees | filter: {date: $ctrl.searchName, number: $ctrl.searchNumber} | orderBy:$ctrl.sortType:$ctrl.sortReverse"\r\n\t> --><tr dir-paginate="employee in $ctrl.employees | itemsPerPage: $ctrl.itemsPerPage" total-items="$ctrl.totalCount"><td>{{employee.number}}</td><td>{{employee.firstName}} {{employee.middleName}} {{employee.lastName}}</td><td>{{employee.givenName}}</td><td>{{employee.gender}}</td><td>{{employee.monthlySalary}}</td><td>{{employee.hourlyRate}}</td><td class="tablebutton-form"><div class="holder"><button data-toggle="modal" ng-click="$ctrl.openModal(employee)" class="btn btn-show"><i class="ion-ios-eye-outline"></i></button> <button class="btn btn-archive" ng-click="$ctrl.deleteEmployee(employee.id)"><i class="ion-ios-box-outline"></i></button></div></td></tr><dir-pagination-controls max-size="$ctrl.totalCount" direction-links="false" boundary-links="false" on-page-change="$ctrl.getData(newPageNumber)" style="float: right; padding-right: 10px"></dir-pagination-controls></tbody></table><view-employee-modal employee="$ctrl.employee"></view-employee-modal>');
$templateCache.put('./job-order-form.html','<style>.highlight{\r\n\t\tbackground-color:#7ed321;\r\n\t}</style><form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" ng-click="$ctrl.findMoInventory()" data-target="#selectMoModal" data-toggle="modal">Select MO</a></div><div class="form-group rmpm"><label class="label capitalize-text">MO Number</label><input disabled="disabled" type="text" ng-model="$ctrl.jo.mo.moNumber" readonly="readonly" class="form-control -border"></div><div class="form-group rmpm"><label class="label capitalize-text">Date</label><input type="date" ng-model="$ctrl.jo.date" readonly="readonly" class="form-control -border"></div></div></div><a href="#" data-target="#selectEmployeeModal" data-toggle="modal" class="btn btn-success">Select Employees</a><table class="table table-list"><thead><tr><th>Emp No</th><th>Name</th><th>Time In</th><th>Time Out</th><th># of Hours</th><th>Area</th><th>Procedure</th><th>Output</th></tr></thead><tbody id="table-less-padding"><tr ng-repeat="employee in $ctrl.selectedEmployees"><td>{{employee.number}}</td><td>{{employee.firstName}} {{employee.lastName}}</td><td><input type="time" ng-change="$ctrl.displayThis(employee.timeIn)" ng-model="employee.timeIn"></td><td><input type="time" ng-change="$ctrl.displayThis(employee.timeOut)" ng-model="employee.timeOut"></td><td><input type="text" ng-model="employee.numberOfHours"></td><td><select ng-change="$ctrl.selectArea(employee.procedureArea)" ng-model="employee.procedureArea.id" class="form-control select -border" ng-options="i.id as i.code for i in $ctrl.procedureAreas" name="areas"></select></td><td><select ng-model="employee.procedure.id" class="form-control select -border" ng-options="i.id as i.code for i in $ctrl.procedures"></select></td><td><input type="text" ng-model="employee.output"></td></tr></tbody></table><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></form><div class="modal fade" id="selectMoModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find MO</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="wrapper scroll-section"><table class="table table-hover"><thead><tr><th>MO #</th><th>Date</th><th>Lot #</th><th>FG</th><th>Batch Size</th><th></th></tr></thead><tbody><tr ng-repeat="mo in $ctrl.mos"><td>{{mo.moNumber}}</td><td>{{mo.dateCreated | date}}</td><td>{{mo.lotNumber}}</td><td>{{mo.finishedGood.code}}</td><td>{{mo.batchSize}}</td><td><button class="btn btn-primary" ng-click="$ctrl.selectMO(mo)" data-dismiss="modal" type="button">Select</button></td></tr></tbody></table></div></div></div></div><div class="modal fade" id="selectEmployeeModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Select Employees</h4><button class="close"><span data-dismiss="modal" class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="wrapper scroll-section"><table class="table table-list"><thead><tr><th>Emp No</th><th>Name</th><th>Gender</th><th>Monthy Salary</th><th>Hourly Rate</th></tr></thead><tbody id="table-less-padding"><tr ng-repeat="employee in $ctrl.employees" ng-click="$ctrl.getEmployee(employee)" ng-class="{highlight: $ctrl.isEmployeePresent(employee) !== -1}"><td>{{employee.number}}</td><td>{{employee.firstName}} {{employee.lastName}}</td><td>{{employee.gender}}</td><td>{{employee.monthlySalary.toFixed(2)}}</td><td>{{employee.hourlyRate.toFixed(2)}}</td></tr></tbody></table></div><a class="btn btn-info">Selected Employees</a><div class="wrapper scroll-section"><table class="table table-list"><thead><tr><th>Emp No</th><th>Name</th><th>Gender</th><th>Monthy Salary</th><th>Hourly Rate</th></tr></thead><tbody><tr ng-repeat="employee in $ctrl.selectedEmployees"><td>{{employee.number}}</td><td>{{employee.firstName}} {{employee.lastName}}</td><td>{{employee.gender}}</td><td>{{employee.monthlySalary.toFixed(2)}}</td><td>{{employee.hourlyRate.toFixed(2)}}</td></tr></tbody></table></div><div class="modal-footer"><button class="btn btn-cancel" data-dismiss="modal">Done</button></div></div></div></div></div>');
$templateCache.put('./job-order-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Job Order Form</h3></div></div><header class="header-form"><a href="/admin/dashboard/job-order" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">New Job Order Form</h3></header><job-order-form jo="$ctrl.jo" message="{{ $ctrl.error }}" button="Create Job Order" on-submit="$ctrl.createJobOrder($event);"></job-order-form>');
$templateCache.put('./job-orders.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Job Order Slips<h3></h3></h3></div><a href="#" ng-click="$ctrl.createNewJO($event);" class="btn btn-create btn-md button-link">Create JO</a></div><div class="evaluation-content"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="JO No" type="text" name="search" ng-model="$ctrl.searchNumber"></div><table class="table table-list"><thead><tr><th>MO No</th><th>Date</th><th>Employee</th><th>Procedure</th><th>Time in</th><th>Time out</th><th></th></tr></thead><tbody><tr ng-repeat="jo in $ctrl.jobOrderSlips"><td>{{jo.moInventory.moNumber}}</td><td>{{jo.date | date}}</td><td>{{jo.employee.firstName}} {{jo.employee.lastName}}</td><td>{{jo.procedure.code}}</td><td>{{jo.timeIn | date:\'h:mma\'}}</td><td>{{jo.timeOut | date:\'h:mma\'}}</td><td><a href="#" class="btn btn-info" data-target="#joModal" data-toggle="modal" ng-click="$ctrl.openModal(jo)">View</a></td></tr></tbody></table></div><div class="modal fade" id="joModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">JO No. {{ $ctrl.jo.joNo }}</h4><button class="close"><span class="ion-android-close close-modal" data-disjos="modal"></span></button></div><div class="modal-body"><div class="horizontal-align -between modal-information"><p class="title">Date <span class="content">{{ $ctrl.jo.date | date }}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Employee <span class="content">{{$ctrl.jo.employee.firstName}} {{$ctrl.jo.employee.lastName}}</span></p></div></div><div class="modal-footer"><p class="date">Created at {{$ctrl.jo.date | date}}</p><button class="btn btn-cancel" data-disjos="modal">Close</button></div></div></div></div>');
$templateCache.put('./inventory-movement-form.html','<form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">MRIS Number</label><input type="text" readonly="readonly" class="form-control -border" value="AUTOGENERATED UPON CREATION"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date</label><input type="date" class="form-control -border" ng-model="$ctrl.inventorymovement.date"></div></div></div></div></div></div><!-- <div class="horizontal-align -start rmpm-content">\r\n\t\t\t  <div class="horizontal-align -start rmpm-code">\r\n\t\t\t    <div class="form-group rmpm action">\r\n\t\t\t    \t\t<a href="#" class="button-link btn btn-action btn-md" data-target="#findPurchaseOrderModal" data-toggle="modal">Select PO</a>\r\n\t\t\t    </div>\r\n\t\t\t    <div class="form-group rmpm">\r\n\t\t\t    \t\t<label class="label capitalize-text">P.O. #</label>\r\n\t\t\t    \t\t<input type="text" ng-model="$ctrl.rr.purchaseOrder.number" readonly class="form-control -border"/>\r\n\t\t\t    </div>\r\n\t\t\t    <div class="form-group rmpm">\r\n\t\t\t    \t\t<input type="hidden"  ng-model="$ctrl.rr.purchaseOrder.id"/>\r\n\t\t\t    \t\t<label class="label capitalize-text">Code</label>\r\n\t\t\t    \t\t<input type="text" ng-model="$ctrl.rr.purchaseOrder.vendor.code" ng-change="$ctrl.loadToReceivedItems()" readonly class="form-control -border"/>\r\n\t\t\t    </div>\r\n\t\t\t  </div>\r\n\t\t\t  <div class="side-two">\r\n\t\t\t    <div class="form-group">\r\n\t\t\t      \t<label class="label capitalize-text">Name</label>\r\n\t\t\t    \t\t<input type="text" ng-model="$ctrl.rr.purchaseOrder.vendor.name" readonly class="form-control -border"/>\r\n\t\t\t    </div>\r\n\t\t\t  </div>\r\n\t\t</div> --><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Requested By</label><input type="text" ng-value="$ctrl.name" class="form-control -border"></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content">Type<div class="form-group field"><label class="label capitalize-text">IN</label><input type="radio" ng-model="$ctrl.inventorymovement.type" value="IN"><label class="label capitalize-text">OUT</label><input type="radio" ng-model="$ctrl.inventorymovement.type" value="OUT"></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content">Classification<div class="form-group field" ng-if="$ctrl.inventorymovement.type == \'IN\'"><label class="label capitalize-text">Return</label><input type="radio" ng-model="$ctrl.inventorymovement.classification" value="RETURN"><label class="label capitalize-text">Adjustment</label><input type="radio" ng-model="$ctrl.inventorymovement.classification" value="ADJUSTMENT"></div><div class="form-group field" ng-if="$ctrl.inventorymovement.type == \'OUT\'"><label class="label capitalize-text">Expired</label><input type="radio" ng-model="$ctrl.inventorymovement.classification" value="EXPIRED"><label class="label capitalize-text">Adjustment</label><input type="radio" ng-model="$ctrl.inventorymovement.classification" value="ADJUSTMENT"><label class="label capitalize-text">MO</label><input type="radio" ng-model="$ctrl.inventorymovement.classification" value="MO"></div></div></div></div></div><div class="step-form" ng-if="$ctrl.inventorymovement.classification == \'MO\'"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">MO Number</label><textarea type="text" class="form-control -border" ng-model="$ctrl.inventorymovement.moNumber"></textarea></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" ng-model="$ctrl.inventorymovement.remarks"></textarea></div></div></div></div></div><table class="table table-list"><thead><tr><!-- <th>PRF # </th> --><th>Control #</th><th>Code</th><th>Item</th><th>Stock on Hand</th><th>Quantity</th></tr></thead><tbody id="table-less-padding"><tr ng-repeat="inventory in $ctrl.inventorymovement.inventory"><td>{{inventory.controlNumber}}</td><td>{{inventory.item.code}}</td><td>{{inventory.item.name}}</td><td>{{$ctrl.stockOnHandList[$index]}}</td><td><input type="text" ng-model="inventory.quantity"></td></tr></tbody></table><div class="request-action"><a href="#" class="button-link btn btn-action btn-md" data-target="#findInventoryModal" data-toggle="modal">Select Item</a></div></div><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></form><find-inventory-modal issuedinventorylist="$ctrl.inventorymovement.inventory" stockonhand="$ctrl.stockOnHandList" message="{{ $ctrl.error }}"></find-inventory-modal><!-- <find-purchase-order-modal\r\n\t\tpo="$ctrl.rr.purchaseOrder"\r\n\t\tmessage="{{ $ctrl.error }}"\r\n            button="Select PO"\r\n            >\r\n    </find-purchase-order-modal>\r\n\t<find-vendor-modal\r\n\t\t\tvendor="$ctrl.po.vendor"\r\n            message="{{ $ctrl.error }}"\r\n            button="Select Vendor"\r\n            >\r\n    </find-vendor-modal> -->');
$templateCache.put('./inventory-movement-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Inventory Movement Slip (MRIS)</h3></div></div><header class="header-form"><a href="/admin/dashboard/inventory-movements" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading"></h3></header><inventory-movement-form inventorymovement="$ctrl.inventoryMovement" message="{{ $ctrl.error }}" button="Submit" on-submit="$ctrl.createMRIS($event);"></inventory-movement-form>');
$templateCache.put('./inventory-movements.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Inventory Movement Slip<h3></h3></h3></div><a href="#" ng-click="$ctrl.createNewMRIS($event);" class="btn btn-create btn-md button-link">Create MRIS</a></div><div class="evaluation-content"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="MRIS No" type="text" name="search" ng-model="$ctrl.searchNumber"></div><table class="table table-list"><thead><tr><th>MRIS No.</th><th>Date</th><th>IN/OUT</th><th>Requested By</th><th></th></tr></thead><tbody><tr ng-repeat="inventoryMovement in $ctrl.inventoryMovementList"><td>{{inventoryMovement.number}}</td><td>{{inventoryMovement.date | date}}</td><td>{{inventoryMovement.type}}</td><td>{{inventoryMovement.requestedBy.firstName}} {{inventoryMovement.requestedBy.lastName}}</td><td><button type="button" class="btn btn-info" data-target="#inventoryMovementModal" data-toggle="modal" ng-click="$ctrl.openModal(inventoryMovement)">View</button></td></tr></tbody></table></div><div class="modal fade" id="inventoryMovementModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">MRIS No. {{ $ctrl.mris.number }} {{$ctrl.mris.date | date}}</h4><button class="close"><span class="ion-android-close close-modal" data-dismiss="modal"></span></button></div><div class="modal-body"><div class="horizontal-align -between modal-information"><p class="title">Requested By: <span class="content">{{$ctrl.mris.requestedBy.firstName}} {{$ctrl.mris.requestedBy.lastName}}</span></p></div><div id="purchaseRequestsDiv"><table class="table table-hover"><thead><tr><th>Control #</th><th>Code</th><th>Item</th><th>Quantity</th><th>Unit</th><th></th></tr></thead><tbody><tr ng-repeat="inventory in $ctrl.mris.inventory"><td>{{inventory.controlNumber}}</td><td>{{inventory.item.code}}</td><td>{{inventory.item.name}}</td><td>{{inventory.quantity}}</td><td>{{inventory.item.unit.code}}</td><td></td></tr></tbody></table></div><div class="horizontal-align -between modal-information"><p class="title">Remarks: <span class="content">{{$ctrl.mris.remarks}}</span></p></div></div><div class="modal-footer"><p class="date">Created at {{$ctrl.mris.date | date}}</p><button class="btn btn-cancel" data-dismiss="modal">Close</button></div></div></div></div>');
$templateCache.put('./material-receiving-form.html','<style>.highlightred{\r\n\t\tbackground-color:red;\r\n\t}</style><form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="form-content"><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm"><label class="label capitalize-text">MRS Number</label><input type="text" readonly="readonly" class="form-control -border" value="AUTOGENERATED UPON CREATION"></div><div class="form-group rmpm"><label class="label capitalize-text">Date</label><input type="date" ng-model="$ctrl.mrs.date" class="form-control -border"></div></div></div><label class="remarks">Received By:</label><input type="text" class="form-control -border" ng-value="$ctrl.name"><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" data-target="#findMISModal" data-toggle="modal">Select MIS</a></div><div class="form-group rmpm"><label class="label capitalize-text">MIS Number</label><input disabled="disabled" type="text" ng-model="$ctrl.mrs.mis.misNo" readonly="readonly" class="form-control -border"></div></div></div><div class="form-group approve-remarks"><label class="remarks">Remarks</label><textarea class="form-control -border" ng-model="$ctrl.mrs.remarks" placeholder="Remarks" rows="3"></textarea></div><table class="table table-bordered"><thead><tr><th>Control #</th><th>Item</th><th>Type</th><th>Quantity</th></tr></thead><tbody><tr ng-repeat="inventory in $ctrl.mrs.mis.inventoryList"><td>{{inventory.controlNumber}}</td><td>{{inventory.item.code}} {{inventory.item.name}}</td><td><label class="custom-label -narrow" ng-class="{\'-apple\':inventory.item.type.code == \'RM\', \'-orangish\':inventory.item.type.code ==\'PM\'}">{{inventory.item.type.name}}</label></td><td>{{inventory.quantity}}</td></tr></tbody></table><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></div></form><div class="modal fade" id="findMISModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">MIS</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="modal-body"><div class="search-box horizontal-align -between"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="MIS #" type="text" name="search" ng-model="$ctrl.searchMIS"></div></div><div class="wrapper scroll-section"><table class="table table-hover"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'mis\';$ctrl.sortReverse = !$ctrl.sortReverse;">MIS <span ng-show="$ctrl.sortType == \'mis\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'mis\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th>Date</th><th>From Company</th><th>Requested By</th></tr></thead><tbody><tr ng-repeat="mis in $ctrl.misList | filter: {mis: $ctrl.searchMIS} | orderBy:$ctrl.sortType:$ctrl.sortReverse" data-dismiss="modal" ng-click="$ctrl.selectMIS(mis)"><td>{{mis.misNo}}</td><td>{{mis.date | date}}</td><td>{{mis.company.name}}</td><td>{{mis.requestedBy.firstName}} {{mis.requestedBy.lastName}}</td></tr></tbody></table><div class="request-action"><button type="button" data-dismiss="modal" class="btn btn-create btn-md">Select</button></div></div></div></div></div></div>');
$templateCache.put('./material-receivings.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Material Receiving Slips<h3></h3></h3></div><a href="#" ng-click="$ctrl.createNewMRS($event);" class="btn btn-create btn-md button-link">Create MRS</a></div><div class="evaluation-content"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="Control No" type="text" name="search" ng-model="$ctrl.searchNumber"></div><table class="table table-list"><thead><tr><th>MRS No</th><th>Date</th><th>Received By</th><th></th></tr></thead><tbody><tr ng-repeat="mrs in $ctrl.materialReceivingSlips"><td>{{mrs.mrsNo}}</td><td>{{mrs.date | date}}</td><td>{{mrs.receivedBy.firstName}} {{mrs.receivedBy.lastName}}</td><td><a href="#" class="btn btn-info" data-target="#mrsModal" data-toggle="modal" ng-click="$ctrl.openModal(mrs)">View</a></td></tr></tbody></table></div><div class="modal fade" id="mrsModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">MRS No. {{ $ctrl.mrs.mrsNo }}</h4><button class="close"><span class="ion-android-close close-modal" data-dismiss="modal"></span></button></div><div class="modal-body"><div class="horizontal-align -between modal-information"><p class="title">Date <span class="content">{{ $ctrl.mrs.date | date }}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Requested By: <span class="content">{{$ctrl.mrs.receivedBy.firstName}} {{$ctrl.mrs.receivedBy.lastName}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Remarks: <span class="content">{{$ctrl.mrs.remarks}}</span></p></div></div><table class="table table-list"><thead><tr><td>Control #</td><td>Item</td><td>Type</td><td>Quantity</td></tr></thead><tbody><tr ng-repeat="inventory in $ctrl.mrs.mis.inventoryList"><td>{{inventory.controlNumber}}</td><td>{{inventory.item.code}} {{inventory.item.name}}</td><td><label class="custom-label -narrow" ng-class="{\'-apple\':inventory.item.type.code == \'RM\', \'-orangish\':inventory.item.type.code ==\'PM\'}">{{inventory.item.type.name}}</label></td><td>{{inventory.quantity}}</td></tr></tbody></table><div class="modal-footer"><p class="date">Created at {{$ctrl.mis.date | date}}</p><button class="btn btn-cancel" data-dismiss="modal">Close</button></div></div></div></div>');
$templateCache.put('./material-receiving-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Material Receiving Slip</h3></div></div><header class="header-form"><a href="/admin/dashboard/material-receiving" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading"></h3></header><material-receiving-form mrs="$ctrl.mrs" message="{{ $ctrl.error }}" button="Submit" on-submit="$ctrl.createMRS($event);"></material-receiving-form>');
$templateCache.put('./material-issuance-form.html','<style>.highlightred{\r\n\t\tbackground-color:red;\r\n\t}</style><form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="form-content"><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm"><label class="label capitalize-text">MIS Number</label><input type="text" readonly="readonly" class="form-control -border" value="AUTOGENERATED UPON CREATION"></div><div class="form-group rmpm"><label class="label capitalize-text">Date</label><input type="date" ng-model="$ctrl.mis.date" class="form-control -border"></div></div></div><label class="remarks">Requested By:</label><input type="text" class="form-control -border" ng-value="$ctrl.name"><div class="form-group approve-remarks"><label class="remarks">Remarks</label><textarea class="form-control -border" ng-model="$ctrl.mis.remarks" placeholder="Remarks" rows="3"></textarea></div><table class="table table-bordered"><thead><tr><th>Control #</th><th>Item</th><th>Type</th><th>Stock on Hand</th><th>Quantity</th><th>Remaining</th></tr></thead><tbody><tr ng-repeat="inventory in $ctrl.mis.inventoryList" ng-class="{highlightred: $ctrl.stockOnHandList[$index] - $ctrl.mis.inventoryList[$index].quantity < 0}"><td>{{inventory.controlNumber}}</td><td>{{inventory.item.code}} {{inventory.item.name}}</td><td><label class="custom-label -narrow" ng-class="{\'-apple\':inventory.item.type.code == \'RM\', \'-orangish\':inventory.item.type.code ==\'PM\'}">{{inventory.item.type.code}}</label></td><td>{{$ctrl.stockOnHandList[$index]}}</td><td><input type="text" ng-model="$ctrl.mis.inventoryList[$index].quantity"></td><td>{{$ctrl.stockOnHandList[$index] - $ctrl.mis.inventoryList[$index].quantity}}</td></tr></tbody></table><div class="request-action"><button type="button" ng-click="$ctrl.selectFromInventory()" class="btn btn-create btn-md">Select from Inventory</button></div><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></div></form><find-inventory-modal issuedinventorylist="$ctrl.mis.inventoryList" stockonhand="$ctrl.stockOnHandList" message="{{ $ctrl.error }}"></find-inventory-modal>');
$templateCache.put('./material-issuance-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Material Issuance Slip</h3></div></div><header class="header-form"><a href="/admin/dashboard/material-issuance" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading"></h3></header><material-issuance-form mis="$ctrl.mis" message="{{ $ctrl.error }}" button="Submit" on-submit="$ctrl.createMIS($event);"></material-issuance-form>');
$templateCache.put('./material-issuances.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Material Issuance Slips<h3></h3></h3></div><a href="#" ng-click="$ctrl.createNewMIS($event);" class="btn btn-create btn-md button-link">Create MIS</a></div><div class="evaluation-content"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="Control No" type="text" name="search" ng-model="$ctrl.searchNumber"></div><table class="table table-list"><thead><tr><th>MIS No</th><th>Date</th><th>Requested By</th><th>Status</th><th></th></tr></thead><tbody><tr ng-repeat="mis in $ctrl.materialIssuanceSlips"><td>{{mis.misNo}}</td><td>{{mis.date | date}}</td><td>{{mis.requestedBy.firstName}} {{mis.requestedBy.lastName}}</td><td>{{mis.status}}</td><td><a href="#" class="btn btn-info" data-target="#misModal" data-toggle="modal" ng-click="$ctrl.openModal(mis)">View</a></td></tr></tbody></table></div><div class="modal fade" id="misModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">MIS No. {{ $ctrl.mis.misNo }}</h4><button class="close"><span class="ion-android-close close-modal" data-dismiss="modal"></span></button></div><div class="modal-body"><div class="horizontal-align -between modal-information"><p class="title">Date <span class="content">{{ $ctrl.mis.date | date }}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Requested By: <span class="content">{{$ctrl.mis.requestedBy.firstName}} {{$ctrl.mis.requestedBy.lastName}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Remarks: <span class="content">{{$ctrl.mis.remarks}}</span></p></div></div><table class="table table-list"><thead><tr><td>Control #</td><td>Item</td><td>Type</td><td>Quantity</td></tr></thead><tbody><tr ng-repeat="inventory in $ctrl.mis.inventoryList"><td>{{inventory.controlNumber}}</td><td>{{inventory.item.code}} {{inventory.item.name}}</td><td><label class="custom-label -narrow" ng-class="{\'-apple\':inventory.item.type.code == \'RM\', \'-orangish\':inventory.item.type.code ==\'PM\'}">{{inventory.item.type.name}}</label></td><td>{{inventory.quantity}}</td></tr></tbody></table><div class="modal-footer"><p class="date">Created at {{$ctrl.mis.date | date}}</p><button class="btn btn-cancel" data-dismiss="modal">Close</button></div></div></div></div>');
$templateCache.put('./material-reevaluation-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Material Reevaluation Form</h3></div></div><header class="header-form"><a href="/admin/dashboard/material-reevaluation" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">New Material Reevaluation Form</h3></header><material-reevaluation-form mr="$ctrl.mr" message="{{ $ctrl.error }}" button="Reevaluate" on-submit="$ctrl.createMaterialReevaluation($event);"></material-reevaluation-form>');
$templateCache.put('./material-reevaluation-form.html','<form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="form-content"><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" data-target="#findApprovedItemModal" data-toggle="modal">Select Control Number</a></div><div class="form-group rmpm"><input type="hidden" ng-model="$ctrl.mr.approvedReceipt.id"><label class="label capitalize-text">Control Number</label><input type="text" ng-value="$ctrl.mr.approvedReceipt.controlNumber" readonly="readonly" class="form-control -border"></div><div class="form-group rmpm"><label class="label capitalize-text">Date</label><input type="date" ng-value="$ctrl.mr.date" class="form-control -border"></div></div></div><div class="packaging-materials-content"><p class="label">Packaging Material</p><div class="horizontal-align -between modal-information"><p class="title">Item Name: <span class="content">{{$ctrl.mr.approvedReceipt.item.name}}</span></p><p class="title">Source Name: <span class="content">{{$ctrl.mr.approvedReceipt.receivingReceipt.purchaseOrder.vendor.name}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Item Code: <span class="content">{{$ctrl.mr.approvedReceipt.item.code}}</span></p><p class="title">Source Code: <span class="content">{{$ctrl.mr.approvedReceipt.receivingReceipt.purchaseOrder.vendor.code}}</span></p></div></div><label class="label uppercase-text">Reevaluated By</label><input type="text" readonly="readonly" ng-value="$ctrl.name" class="form-control -borderless"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between"><div class="form-group"><label class="label uppercase-text">AR No.</label><input type="text" readonly="readonly" ng-model="$ctrl.mr.approvedReceipt.number" class="form-control -borderless"></div><div class="form-group"><label class="label">Date</label><input type="text" readonly="readonly" ng-model="$ctrl.mr.approvedReceipt.date | date" class="form-control -borderless"></div></div></div><div class="side-two"><div class="horizontal-align -between"><div class="form-group"><label class="label uppercase-text">RR No.</label><input type="text" readonly="readonly" ng-model="$ctrl.mr.approvedReceipt.receivingReceipt.number" class="form-control -borderless"></div><div class="form-group"><label class="label">Date</label><input type="text" readonly="readonly" ng-model="$ctrl.mr.approvedReceipt.receivingReceipt.date | date" class="form-control -borderless"></div></div></div></div><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label uppercase-text">SI #</label><input type="text" readonly="readonly" ng-model="$ctrl.mr.approvedReceipt.receivingReceipt.siNumber" class="form-control -borderless"></div></div><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Allowance</label><input type="text" ng-model="$ctrl.mr.allowance" class="form-control -borderless"></div></div></div><div class="side-two"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Unit Price</label><input type="text" readonly="readonly" ng-model="$ctrl.purchaseRequest.unitPrice" class="form-control -borderless"></div></div></div></div><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between"><div class="form-group"><label class="label capitalize-text">Expiration</label><input type="date" ng-model="$ctrl.mr.expiration" class="form-control -border"></div><div class="form-group"><label class="label capitalize-text">Re-evaluation</label><input type="date" ng-model="$ctrl.mr.reevaluation" class="form-control -border"></div></div></div><div class="side-two"><div class="horizontal-align -between"><div class="form-group"><label class="label capitalize-text">Best Before</label><input type="date" ng-model="$ctrl.mr.bestBefore" class="form-control -border"></div><div class="form-group"><label class="label capitalize-text">Re-test</label><input type="date" ng-model="$ctrl.mr.retest" class="form-control -border"></div></div></div></div><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between"><div class="form-group"><label class="label capitalize-text">Max Containers</label><input type="text" readonly="readonly" ng-model="$ctrl.mr.approvedReceipt.maxContainers" class="form-control -borderless"></div><div class="form-group"><label class="label capitalize-text">Delivery No</label><input type="text" readonly="readonly" ng-model="$ctrl.mr.approvedReceipt.receivingReceipt.drNumber" class="form-control -borderless"></div><div class="form-group"><label class="label capitalize-text">Spec. Gravity</label><input type="text" readonly="readonly" ng-model="$ctrl.mr.approvedReceipt.specifiedGravity" class="form-control -borderless"></div></div></div></div><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between"><div class="form-group"><label class="label capitalize-text">Quantity Received</label><input type="text" readonly="readonly" ng-model="$ctrl.mr.approvedReceipt.receivedQuantity" class="form-control -borderless"></div><div class="form-group"><label class="label">Quantity Approved</label><input type="text" readonly="readonly" ng-model="$ctrl.mr.approvedReceipt.approvedQuantity" class="form-control -borderless"></div></div></div><div class="side-two"><div class="horizontal-align -between"><div class="form-group"><label class="label capitalize-text">Q.C. Sample</label><input type="text" readonly="readonly" ng-model="$ctrl.mr.approvedReceipt.qcSamples" class="form-control -borderless"></div><div class="form-group"><label class="label">Quantity Requested</label><input type="text" readonly="readonly" ng-model="$ctrl.purchaseRequest.quantity" class="form-control -borderless"></div></div></div></div><div class="form-group approve-remarks"><label class="remarks">Remarks</label><textarea class="form-control -border" ng-model="$ctrl.mr.remarks" placeholder="Remarks" rows="3"></textarea></div><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></div></form><find-approved-item-modal approvedreceipt="$ctrl.mr.approvedReceipt" purchaserequest="$ctrl.purchaseRequest" message="{{ $ctrl.error }}" button="Select Control Number"></find-approved-item-modal>');
$templateCache.put('./material-reevaluations.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Material Reevaluation Forms<h3></h3></h3></div><a href="#" ng-click="$ctrl.createNewMaterialReevaluation($event);" class="btn btn-create btn-md button-link">Create New Evaluation</a></div><div class="evaluation-content"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="Control No" type="text" name="search" ng-model="$ctrl.searchNumber"></div><table class="table table-list"><thead><tr><th>Control No</th><th>Date</th><th>Expiration</th><th>Extended</th></tr></thead><tbody><tr ng-repeat="mr in $ctrl.materialReevaluations"><td>{{mr.approvedItem.controlNumber}}</td><td>{{mr.date | date}}</td><td>{{mr.expiration | date}}</td><td>{{mr.extended | date}}</td></tr></tbody></table></div>');
$templateCache.put('./product-movement-form.html','<form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Product Movement #</label><input type="text" readonly="readonly" class="form-control -border" value="AUTOGENERATED UPON CREATION"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date</label><input type="date" class="form-control -border" ng-model="$ctrl.pm.date"></div></div></div></div></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm"><label class="label capitalize-text">Depot Code</label><select class="form-control select -border" ng-model="$ctrl.pm.depot.id" ng-options="d.id as d.code for d in $ctrl.depots" name="depot"></select></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><h5>Type</h5><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">IN</label><input type="radio" ng-change="$ctrl.changeType()" ng-model="$ctrl.pm.type" value="IN"><label class="label capitalize-text">OUT</label><input type="radio" ng-change="$ctrl.changeType()" ng-model="$ctrl.pm.type" value="OUT"></div></div></div></div></div><table class="table table-list"><thead><tr><!-- <th>PRF # </th> --><th>Lot #</th><th>Code</th><th>Product Name</th><th>Stock on Hand</th><th>Quantity</th></tr></thead><tbody id="table-less-padding"><tr ng-repeat="product in $ctrl.pm.products"><td>{{product.product.lotNumber}}</td><td>{{product.product.finishedGood.code}}</td><td>{{product.product.finishedGood.name}}</td><td>{{$ctrl.stockOnHandList[$index]}}</td><td><input type="text" ng-model="$ctrl.pm.products[$index].quantity"></td></tr></tbody></table><div class="request-action"><a href="#" class="button-link btn btn-action btn-md" ng-click="$ctrl.findProduct()">Select Product</a></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" ng-model="$ctrl.pm.remarks"></textarea></div></div></div></div></div><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></form><find-product-modal productlist="$ctrl.productsInDepot" issuedlist="$ctrl.pm.products" stockonhand="$ctrl.stockOnHandList"></find-product-modal><find-fg-modal fg="$ctrl.finishedGood"></find-fg-modal>');
$templateCache.put('./product-movements.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Product Movements</h3></div><a href="#" ng-click="$ctrl.createNewProductMovement($event);" class="btn btn-create btn-md button-link">Create New Request</a></div><div class="client-pris"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="Product Movement No" type="text" name="search" ng-model="$ctrl.searchNumber"> <input class="form-control -borderless search" placeholder="Date" type="text" name="search" ng-model="$ctrl.searchDate"></div></div><table class="table table-list"><thead><tr><th>Ref No.</th><th>Date</th><th>Type</th><th>Depot</th><th></th></tr></thead><tbody><tr ng-repeat="pm in $ctrl.productMovements | filter: {date: $ctrl.searchDate, number: $ctrl.searchNumber} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{pm.number}}</td><td>{{pm.date | date}}</td><td>{{pm.type}}</td><td>{{pm.depot.name}}</td><td class="tablebutton-form"><div class="holder"><button data-toggle="modal" ng-click="$ctrl.openModal(pm)" class="btn btn-show"><i class="ion-ios-eye-outline"></i></button></div></td></tr></tbody></table>');
$templateCache.put('./product-movement-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Product Movements</h3></div></div><header class="header-form"><a href="/admin/dashboard/product-movements" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">New Product Movement Form</h3></header><product-movement-form pm="$ctrl.pm" message="{{ $ctrl.error }}" button="Create Product Movement" on-submit="$ctrl.createProductMovement($event);"></product-movement-form>');
$templateCache.put('./product-issuance-form.html','<style>.highlightred{\r\n\t\tbackground-color:red;\r\n\t}</style><form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="form-content"><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm"><label class="label capitalize-text">FG-IS Number</label><input type="text" readonly="readonly" class="form-control -border" value="AUTOGENERATED UPON CREATION"></div><div class="form-group rmpm"><label class="label capitalize-text">Date</label><input type="date" ng-model="$ctrl.pis.date" class="form-control -border"></div></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm"><label class="label capitalize-text">Ship From</label><select class="form-control select" ng-model="$ctrl.pis.fromDepot.id" ng-options="d.id as d.name for d in $ctrl.userAssignedDepots" name="fromDepots"></select></div><div class="form-group rmpm"><label class="label capitalize-text">Ship To</label><select class="form-control select" ng-model="$ctrl.pis.toDepot.id" ng-options="d.id as d.name for d in $ctrl.depots" name="toDepots"></select></div></div></div><label class="remarks">Requested By:</label><input type="text" class="form-control -border" ng-value="$ctrl.name"><div class="form-group approve-remarks"><label class="remarks">Remarks</label><textarea class="form-control -border" ng-model="$ctrl.pis.remarks" placeholder="Remarks" rows="3"></textarea></div><table class="table table-bordered"><thead><tr><th>Lot #</th><th>FG</th><th>Stock on Hand</th><th>Quantity</th><th>Remaining</th></tr></thead><tbody><tr ng-repeat="inventory in $ctrl.pis.inventoryList" ng-class="{highlightred: $ctrl.stockOnHandList[$index] - $ctrl.pis.inventoryList[$index].quantity < 0}"><td>{{inventory.product.lotNumber}}</td><td>{{inventory.product.finishedGood.code}} {{inventory.product.finishedGood.name}}</td><td>{{$ctrl.stockOnHandList[$index]}}</td><td><input type="text" ng-model="$ctrl.pis.inventoryList[$index].quantity"></td><td>{{$ctrl.stockOnHandList[$index] - $ctrl.pis.inventoryList[$index].quantity}}</td></tr></tbody></table><div class="request-action"><button type="button" ng-click="$ctrl.selectFromInventory()" class="btn btn-create btn-md">Select from Inventory</button></div><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></div></form><find-product-inventory-modal inventorylist="$ctrl.inventoryList" issuedinventorylist="$ctrl.pis.inventoryList" stockonhand="$ctrl.stockOnHandList" message="{{ $ctrl.error }}"></find-product-inventory-modal>');
$templateCache.put('./product-issuance-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">FG Issuance Slip</h3></div></div><header class="header-form"><a href="/admin/dashboard/product-issuances" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading"></h3></header><product-issuance-form pis="$ctrl.pis" message="{{ $ctrl.error }}" button="Submit" on-submit="$ctrl.createPIS($event);"></product-issuance-form>');
$templateCache.put('./product-issuances.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">FG Issuance Slips<h3></h3></h3></div><a href="#" ng-click="$ctrl.createNewPIS($event);" class="btn btn-create btn-md button-link">Create FG-IS</a></div><div class="evaluation-content"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="Control No" type="text" name="search" ng-model="$ctrl.searchNumber"></div><table class="table table-list"><thead><tr><th>FG-IS No</th><th>Date</th><th>Requested By</th><th>Status</th><th></th></tr></thead><tbody><tr ng-repeat="pis in $ctrl.productIssuanceSlips"><td>{{pis.pisNo}}</td><td>{{pis.date | date}}</td><td>{{pis.requestedBy.firstName}} {{pis.requestedBy.lastName}}</td><td>{{pis.status}}</td><td><a href="#" class="btn btn-info" data-target="#pisModal" data-toggle="modal" ng-click="$ctrl.openModal(pis)">View</a></td></tr></tbody></table></div><div class="modal fade" id="pisModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">FG-IS No. {{ $ctrl.pis.pisNo }}</h4><button class="close"><span class="ion-android-close close-modal" data-dismiss="modal"></span></button></div><div class="modal-body"><div class="horizontal-align -between modal-information"><p class="title">Date <span class="content">{{ $ctrl.pis.date | date }}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Requested By: <span class="content">{{$ctrl.pis.requestedBy.firstName}} {{$ctrl.pis.requestedBy.lastName}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Remarks: <span class="content">{{$ctrl.pis.remarks}}</span></p></div></div><table class="table table-list"><thead><tr><td>Lot #</td><td>Code</td><td>FG</td><td>Quantity</td></tr></thead><tbody><tr ng-repeat="inventory in $ctrl.pis.inventoryList"><td>{{inventory.product.lotNumber}}</td><td>{{inventory.product.finishedGood.code}}</td><td>{{inventory.product.finishedGood.name}}</td><td>{{inventory.quantity}}</td></tr></tbody></table><div class="modal-footer"><p class="date">Created at {{$ctrl.pis.date | date}}</p><button class="btn btn-cancel" data-dismiss="modal">Close</button></div></div></div></div>');
$templateCache.put('./product-receiving-form.html','<style>.highlightred{\r\n\t\tbackground-color:red;\r\n\t}</style><form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="form-content"><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm"><label class="label capitalize-text">FG-RS Number</label><input type="text" readonly="readonly" class="form-control -border" value="AUTOGENERATED UPON CREATION"></div><div class="form-group rmpm"><label class="label capitalize-text">Date</label><input type="date" ng-model="$ctrl.prs.date" class="form-control -border"></div></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm"><label class="remarks">Received By:</label><input type="text" class="form-control -border" ng-value="$ctrl.name"></div><div class="form-group rmpm"><label class="label capitalize-text">Depot</label><select class="form-control select" ng-model="$ctrl.prs.depot.id" ng-options="d.id as d.name for d in $ctrl.depots" name="toDepots"></select></div></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" ng-click="$ctrl.openPISModal()" data-toggle="modal">Select FG-IS</a></div><div class="form-group rmpm"><label class="label capitalize-text">FG-IS Number</label><input disabled="disabled" type="text" ng-model="$ctrl.prs.pis.pisNo" readonly="readonly" class="form-control -border"></div></div></div><div class="form-group approve-remarks"><label class="remarks">Remarks</label><textarea class="form-control -border" ng-model="$ctrl.prs.remarks" placeholder="Remarks" rows="3"></textarea></div><table class="table table-bordered"><thead><tr><th>Lot #</th><th>Code</th><th>FG</th><th>Quantity</th></tr></thead><tbody><tr ng-repeat="inventory in $ctrl.prs.pis.inventoryList"><td>{{inventory.product.lotNumber}}</td><td>{{inventory.product.finishedGood.code}}</td><td>{{inventory.product.finishedGood.name}}</td><td>{{inventory.quantity}}</td></tr></tbody></table><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></div></form><div class="modal fade" id="findPISModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">FG-IS</h4><button class="close" data-dispiss="modal" type="button"></button></div><div class="modal-body"><div class="search-box horizontal-align -between"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="PIS #" type="text" name="search" ng-model="$ctrl.searchPIS"></div></div><div class="wrapper scroll-section"><table class="table table-hover"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'pis\';$ctrl.sortReverse = !$ctrl.sortReverse;">PIS <span ng-show="$ctrl.sortType == \'pis\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'pis\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th>Date</th><th>Requested By</th><th>Shipped From</th></tr></thead><tbody><tr ng-repeat="pis in $ctrl.pisList | filter: {pis: $ctrl.searchPIS} | orderBy:$ctrl.sortType:$ctrl.sortReverse" data-dismiss="modal" ng-click="$ctrl.selectPIS(pis)"><td>{{pis.pisNo}}</td><td>{{pis.date | date}}</td><td>{{pis.requestedBy.firstName}} {{pis.requestedBy.lastName}}</td><td>{{pis.fromDepot.code}}</td></tr></tbody></table></div></div></div></div></div>');
$templateCache.put('./product-receiving-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">FG Receiving Slip</h3></div></div><header class="header-form"><a href="/admin/dashboard/product-receiving" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading"></h3></header><product-receiving-form prs="$ctrl.prs" message="{{ $ctrl.error }}" button="Submit" on-submit="$ctrl.createPRS($event);"></product-receiving-form>');
$templateCache.put('./product-receivings.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">FG Receiving Slips<h3></h3></h3></div><a href="#" ng-click="$ctrl.createNewPRS($event);" class="btn btn-create btn-md button-link">Create FG-RS</a></div><div class="evaluation-content"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="Control No" type="text" name="search" ng-model="$ctrl.searchNumber"></div><table class="table table-list"><thead><tr><th>FG-RS No</th><th>Date</th><th>Requested By</th><th>Shipped From</th><th></th></tr></thead><tbody><tr ng-repeat="prs in $ctrl.productReceivingSlips"><td>{{prs.prsNo}}</td><td>{{prs.date | date}}</td><td>{{prs.receivedBy.firstName}} {{prs.receivedBy.lastName}}</td><td>{{prs.pis.fromDepot.code}}</td><td><a href="#" class="btn btn-info" data-target="#prsModal" data-toggle="modal" ng-click="$ctrl.openModal(prs)">View</a></td></tr></tbody></table></div><div class="modal fade" id="prsModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">FG-RS No. {{ $ctrl.prs.prsNo }}</h4><button class="close"><span class="ion-android-close close-modal" data-dispiss="modal"></span></button></div><div class="modal-body"><div class="horizontal-align -between modal-information"><p class="title">Date <span class="content">{{ $ctrl.prs.date | date }}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Shipped From: <span class="content">{{$ctrl.prs.pis.fromDepot.code}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Received By: <span class="content">{{$ctrl.prs.requestedBy.firstName}} {{$ctrl.prs.requestedBy.lastName}}</span></p></div><div class="horizontal-align -between modal-information"><p class="title">Remarks: <span class="content">{{$ctrl.prs.remarks}}</span></p></div></div><table class="table table-list"><thead><tr><td>Lot #</td><td>Code</td><td>FG</td><td>Quantity</td></tr></thead><tbody><tr ng-repeat="inventory in $ctrl.prs.pis.inventoryList"><td>{{inventory.product.lotNumber}}</td><td>{{inventory.product.finishedGood.code}}</td><td>{{inventory.product.finishedGood.name}}</td><td>{{inventory.quantity}}</td></tr></tbody></table><div class="modal-footer"><p class="date">Created at {{$ctrl.prs.date | date}}</p><button class="btn btn-cancel" data-dismiss="modal">Close</button></div></div></div></div>');
$templateCache.put('./purchase-request-edit.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Purchase Request Forms</h3></div></div><header class="header-form"><a href="/admin/dashboard/purchase-request" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">Edit Purchase Request</h3></header><purchase-request-form prf="$ctrl.prf" message="{{ $ctrl.error }}" button="Edit Purchase Request" on-submit="$ctrl.editPurchaseRequest($event);"></purchase-request-form>');
$templateCache.put('./purchase-request-eng.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Purchase Request Forms</h3></div></div><header class="header-form"><a href="/admin/dashboard/purchase-request?eng=1" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">New Purchase Request (ENG)</h3></header><purchase-request-form prf="$ctrl.prf" message="{{ $ctrl.error }}" button="Create Purchase Request" on-submit="$ctrl.createPurchaseRequest($event)"></purchase-request-form>');
$templateCache.put('./purchase-request-form.html','<style>.highlightred{\r\n\t\tbackground-color:red;\r\n\t}</style><form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">PRF Number</label><input type="text" readonly="readonly" class="form-control -border" value="AUTOGENERATED UPON CREATION"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date</label><input type="date" class="form-control -border" ng-model="$ctrl.prf.date"></div></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date Needed</label><input type="date" class="form-control -border" ng-model="$ctrl.prf.dateNeeded"></div></div></div><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Department</label><input type="text" class="form-control -border" ng-model="$ctrl.prf.department.name"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Requested By</label><input type="hidden" ng-model="$ctrl.prf.requestedBy"> <input type="text" class="form-control -border" readonly="readonly" value="{{$ctrl.prf.requestedBy.firstName}} {{$ctrl.prf.requestedBy.lastName}}"></div></div></div></div></div></div><table class="table table-list"><thead><tr><th>Type</th><th>Item Code</th><th>Name</th><th>Unit</th><th>Current Stocks</th><th>Pending PRF</th><th>Pending PO</th><th>Quarantined</th><td>Required</td><th ng-if="$ctrl.engineering">MOQ</th><th>Lacking</th><th>Requested</th></tr></thead><tbody><tr ng-repeat="i in $ctrl.prf.requestedItems" ng-class="{highlightred: i.quantityLacking <= 0 }"><td><label class="custom-label -narrow" ng-class="{\'-apple\':i.item.type.code == \'RM\', \'-orangish\':i.item.type.code ==\'PM\', \'-aqua\': i.item.type.code == \'ENG\' }">{{i.item.type.code}}</label></td><td ng-if="i.item.code !== undefined">{{i.item.code}}</td><td ng-if="i.item.name !== undefined">{{i.item.name}}</td><td ng-if="i.item.unit !== undefined">{{i.item.unit.code}}</td><td>{{i.stockOnHand}}</td><td>{{i.pendingPrf}}</td><td>{{i.pendingPo}}</td><td>{{i.pendingRr}}</td><td><input ng-change="$ctrl.computeTotalQuantity(item, i.quantityRequired, $index)" type="text" ng-model="i.quantityRequired"></td><td ng-if="$ctrl.engineering"><input ng-change="$ctrl.computeTotalQuantity(item, i.quantityRequired, $index)" type="text" ng-model="i.moqQuantity"></td><td>{{i.quantityLacking}}</td><td>{{i.quantityRequested}}</td></tr></tbody></table><div class="request-action"><a href="#" class="button-link btn btn-action btn-md" ng-click="$ctrl.selectItem()" data-target="#findItemModal" data-toggle="modal">Select Item</a></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" ng-model="$ctrl.prf.remarks"></textarea></div></div></div></div></div><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></div></form><find-item-modal itemlist="$ctrl.itemlist" message="{{ $ctrl.error }}" button="Select Item" on-submit="$ctrl.selectedItems($event);"></find-item-modal>');
$templateCache.put('./purchase-request-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Purchase Request Forms</h3></div></div><header class="header-form"><a href="/admin/dashboard/purchase-request" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">New Purchase Request Form</h3></header><purchase-request-form prf="$ctrl.prf" message="{{ $ctrl.error }}" button="Create Purchase Request" on-submit="$ctrl.createPurchaseRequest($event);"></purchase-request-form>');
$templateCache.put('./purchase-requests.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Purchase Request Forms</h3></div><a href="#" ng-click="$ctrl.createNewPurchaseRequest($event);" class="btn btn-create btn-md button-link">Create New Request</a></div><div class="client-pris"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0 !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="PRIS No" type="text" name="search" ng-model="$ctrl.searchNumber"> <input class="form-control -borderless search" placeholder="Date" type="text" name="search" ng-model="$ctrl.searchDate"></div></div><table ng-if="$ctrl.purchaseRequests" class="table table-list"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'date\';$ctrl.sortReverse = !$ctrl.sortReverse;">PRF Date <span ng-show="$ctrl.sortType == \'date\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'date\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'number\';$ctrl.sortReverse = !$ctrl.sortReverse;">PRF No <span ng-show="$ctrl.sortType == \'number\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'number\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'dateNeeded\';$ctrl.sortReverse = !$ctrl.sortReverse;">Needed <span ng-show="$ctrl.sortType == \'dateNeeded\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'dateNeeded\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'status\';$ctrl.sortReverse = !$ctrl.sortReverse;">Status <span ng-show="$ctrl.sortType == \'status\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'status\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="purchaseRequest in $ctrl.purchaseRequests | filter: {date: $ctrl.searchDate, number: $ctrl.searchNumber} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{purchaseRequest.date | date}}</td><td>{{purchaseRequest.number}}</td><td>{{purchaseRequest.dateNeeded | date}}</td><td>{{purchaseRequest.status}}</td><td ng-if="purchaseRequest.status != \'Cancelled\'" class="tablebutton-form"><div class="holder"><button class="btn btn-compose"><i class="ion-ios-compose-outline" ng-click="$ctrl.openModal(purchaseRequest)"></i></button></div></td><td ng-if="purchaseRequest.status == \'Cancelled\'" class="tablebutton-form"><div class="holder"><button class="btn btn-compose"><i class="ion-ios-compose-outline" ng-click="$ctrl.openModal(purchaseRequest)"></i></button> <button class="btn btn-info" ng-if="purchaseRequest.status == \'Cancelled\'" ng-click="$ctrl.edit(purchaseRequest)">Edit</button></div></td></tr></tbody></table><view-prf-modal prf="$ctrl.prf" cancelreqs="$ctrl.cancelreqs"></view-prf-modal>');
$templateCache.put('./receiving-receipt-tolling-form.html','<form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">RR Number</label><input type="text" class="form-control -border" ng-model="$ctrl.rr.number"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date</label><input type="date" class="form-control -border" ng-model="$ctrl.rr.date"></div></div></div></div></div></div><!-- <div class="horizontal-align -start rmpm-content">\r\n\t\t\t  <div class="horizontal-align -start rmpm-code">\r\n\t\t\t    <div class="form-group rmpm action">\r\n\t\t\t    \t\t<a href="#" class="button-link btn btn-action btn-md" data-target="#findPurchaseOrderModal" data-toggle="modal">Select PO</a>\r\n\t\t\t    </div>\r\n\t\t\t    <div class="form-group rmpm">\r\n\t\t\t    \t\t<label class="label capitalize-text">P.O. #</label>\r\n\t\t\t    \t\t<input type="text" ng-model="$ctrl.rr.purchaseOrder.number" readonly class="form-control -border"/>\r\n\t\t\t    </div>\r\n\t\t\t    <div class="form-group rmpm">\r\n\t\t\t    \t\t<input type="hidden"  ng-model="$ctrl.rr.purchaseOrder.id"/>\r\n\t\t\t    \t\t<label class="label capitalize-text">Code</label>\r\n\t\t\t    \t\t<input type="text" ng-model="$ctrl.rr.purchaseOrder.vendor.code" ng-change="$ctrl.loadToReceivedItems()" readonly class="form-control -border"/>\r\n\t\t\t    </div>\r\n\t\t\t  </div>\r\n\t\t\t  <div class="side-two">\r\n\t\t\t    <div class="form-group">\r\n\t\t\t      \t<label class="label capitalize-text">Name</label>\r\n\t\t\t    \t\t<input type="text" ng-model="$ctrl.rr.purchaseOrder.vendor.name" readonly class="form-control -border"/>\r\n\t\t\t    </div>\r\n\t\t\t  </div>\r\n\t\t</div> --><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Received By</label><input type="text" ng-value="$ctrl.rr.receivedBy.department.name" class="form-control -border"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label for="department">DR</label><input type="text" ng-model="$ctrl.rr.drNumber" class="form-control -border"></div><div class="form-group field"><label for="department">SI</label><input type="text" ng-model="$ctrl.rr.siNumber" class="form-control -border"></div></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Origin</label><input type="text" class="form-control -border" ng-model="$ctrl.rr.origin"></div><!-- <div class="form-group field">\r\n\t\t\t\t\t\t\t<label class="label capitalize-text">P.O. Number</label>\r\n\t\t\t    \t\t\t<input type="text" ng-model="$ctrl.rr.purchaseOrder.number" class="form-control -border" readonly/>\r\n            \t\t\t</div> --></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" ng-model="$ctrl.rr.remarks"></textarea></div></div></div></div></div><button type="button" class="btn btn-create btn-md" ng-click="$ctrl.addItemHere();">+ Add Item</button><table class="table table-list"><thead><tr><!-- <th>PRF # </th> --><th>Item Code</th><th>Unit Code</th><th>Quantity</th><th></th></tr></thead><tbody id="table-less-padding"><tr ng-repeat="receivedItem in $ctrl.rr.receivedItems"><!-- <td>{{prf.number}}</td> --><td><select class="form-control select -borderless" ng-model="receivedItem.item.id" ng-options="d.id as d.code for d in $ctrl.items" name="item"></select></td><td><select class="form-control select -borderless" ng-model="receivedItem.unit.id" ng-options="d.id as d.code for d in $ctrl.units" name="unit"></select></td><td><input type="text" model="receivedItem.quantity"></td><td><button type="button" class="btn btn-create btn-md" ng-click="$ctrl.removeItem($index);">x</button></td></tr></tbody></table></div><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></form><!-- <find-purchase-order-modal\r\n\t\tpo="$ctrl.rr.purchaseOrder"\r\n\t\tmessage="{{ $ctrl.error }}"\r\n            button="Select PO"\r\n            >\r\n    </find-purchase-order-modal>\r\n\t<find-vendor-modal\r\n\t\t\tvendor="$ctrl.po.vendor"\r\n            message="{{ $ctrl.error }}"\r\n            button="Select Vendor"\r\n            >\r\n    </find-vendor-modal> -->');
$templateCache.put('./receiving-receipt-tolling-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Receiving Receipt Tolling Form</h3></div></div><header class="header-form"><a href="/admin/dashboard/receiving-receipt" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">New Receiving Receipt Tolling Form</h3></header><receiving-receipt-tolling-form rr="$ctrl.rr" message="{{ $ctrl.error }}" button="Create Receiving Receipt" on-submit="$ctrl.createReceivingReceipt($event);"></receiving-receipt-tolling-form>');
$templateCache.put('./receiving-receipt-form.html','<style>.highlightred{\r\n\t\tbackground-color:red;\r\n\t}</style><form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">RR Number</label><input type="text" readonly="readonly" class="form-control -border" value="AUTOGENERATED UPON CREATION"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date</label><input type="date" class="form-control -border" ng-model="$ctrl.rr.date"></div></div></div></div></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" data-target="#findPurchaseOrderModal" data-toggle="modal">Select PO</a></div><div class="form-group rmpm"><label class="label capitalize-text">P.O. #</label><input type="text" ng-model="$ctrl.rr.purchaseOrder.number" readonly="readonly" class="form-control -border"></div><div class="form-group rmpm"><input type="hidden" ng-model="$ctrl.rr.purchaseOrder.id"><label class="label capitalize-text">Code</label><input type="text" ng-model="$ctrl.rr.purchaseOrder.vendor.code" ng-change="$ctrl.loadToReceivedItems()" readonly="readonly" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Name</label><input type="text" ng-model="$ctrl.rr.purchaseOrder.vendor.name" readonly="readonly" class="form-control -border"></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Received By</label><input type="text" ng-value="$ctrl.rr.receivedBy.department.name" class="form-control -border"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label for="department">DR</label><input type="text" ng-model="$ctrl.rr.drNumber" class="form-control -border"></div><div class="form-group field"><label for="department">SI</label><input type="text" ng-model="$ctrl.rr.siNumber" class="form-control -border"></div></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Origin</label><input type="text" class="form-control -border" ng-model="$ctrl.rr.origin"></div><div class="form-group field"><label class="label capitalize-text">P.O. Number</label><input type="text" ng-model="$ctrl.rr.purchaseOrder.number" class="form-control -border" readonly="readonly"></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" ng-model="$ctrl.rr.remarks"></textarea></div></div></div></div></div><table class="table table-list"><thead><tr><th>PRF #</th><th>Code</th><th>Item</th><th>Quantity</th><th>Previous RR</th><th>Lacking</th><th>Quantity Received</th></tr></thead><tbody id="table-less-padding"><tr ng-repeat="receivedItem in $ctrl.receivedItemsView" ng-class="{highlightred: $ctrl.rr.receivedItems[$index].quantity > receivedItem.quantityOrdered - receivedItem.pendingRr }"><td>{{receivedItem.prfNumber}}</td><td>{{receivedItem.item.code}}</td><td>{{receivedItem.item.name}}</td><td>{{receivedItem.quantityOrdered}}</td><td>{{receivedItem.pendingRr}}</td><td>{{receivedItem.quantityOrdered - receivedItem.pendingRr}}</td><td><input ng-model="$ctrl.rr.receivedItems[$index].quantity"></td></tr></tbody></table></div><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></form><find-purchase-order-modal po="$ctrl.rr.purchaseOrder" receiveditems="$ctrl.rr.receivedItems" receiveditemsview="$ctrl.receivedItemsView" message="{{ $ctrl.error }}" button="Select PO"></find-purchase-order-modal><find-vendor-modal vendor="$ctrl.po.vendor" message="{{ $ctrl.error }}" button="Select Vendor"></find-vendor-modal>');
$templateCache.put('./receiving-receipt-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Receiving Receipt Form</h3></div></div><header class="header-form"><a href="/admin/dashboard/receiving-receipt" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">New Receiving Receipt Form</h3></header><receiving-receipt-form rr="$ctrl.rr" message="{{ $ctrl.error }}" button="Create Receiving Receipt" on-submit="$ctrl.createReceivingReceipt($event);"></receiving-receipt-form>');
$templateCache.put('./receiving-receipts.html','<div class="client-rmpm"><div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Receiving Receipt Slips</h3></div><a href="#" ng-click="$ctrl.createNewReceivingReceipt($event);" class="btn btn-create btn-md button-link">Create New Request</a> <a href="#" ng-click="$ctrl.createNewReceivingReceiptTolling($event);" style="background-color:blueviolet" class="btn btn-create btn-md button-link">Create New RR Tolling Request</a></div><div class="client-pris"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="RR No" type="text" name="search" ng-model="$ctrl.searchNumber"> <input class="form-control -borderless search" placeholder="Date" type="text" name="search" ng-model="$ctrl.searchDate"></div></div><nav class="nav nav-pills nav-fill nav-form"><a ng-click="$ctrl.listByStatus(\'Pending\')" class="nav-item nav-link item" ng-class="{active: $ctrl.status === \'Pending\'}">Pending</a> <a ng-click="$ctrl.listByStatus(\'Incomplete\')" class="nav-item nav-link item" ng-class="{active: $ctrl.status === \'Incomplete\'}">Incomplete</a> <a ng-click="$ctrl.listByStatus(\'Completed\')" class="nav-item nav-link item" ng-class="{active: $ctrl.status === \'Completed\'}">Completed</a></nav><div class="tab-content"><div class="tab-pane fade show active" id="quarantined"><table class="table table-list"><thead><tr><th>R.R No</th><th>Date</th><th>DR / SI</th><th>Received By</th><th></th></tr></thead><tbody><tr ng-repeat="rr in $ctrl.receivingReceipts"><td>{{rr.number}}</td><td>{{rr.date | date}}</td><td>DR:{{rr.drNumber}}<br>SI:{{rr.siNumber}}</td><td>{{rr.receivedBy.department.name}}</td><td class="tablebutton-form"><div class="holder"><button data-toggle="modal" ng-click="$ctrl.openModal(rr)" data-target="#rrModal" class="btn btn-show"><i class="ion-ios-eye-outline"></i></button> <button class="btn btn-compose"><i class="ion-ios-compose-outline"></i></button> <button class="btn btn-archive"><i class="ion-ios-box-outline"></i></button></div></td></tr></tbody></table></div></div></div><view-rr-modal rr="$ctrl.rr"></view-rr-modal>');
$templateCache.put('./mo-manufacture.html','<div class="admin-header"><div class="title horizontal-align -between"><h4 class="bg">Manufacturing Order</h4></div><hr class="devider"></div><form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="form-content"><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Pre MO Number</label><div><label class="label capitalize-text">{{$ctrl.mo.id}}</label></div></div><div class="form-group field"><label class="label capitalize-text">MO Name</label><div><label class="label capitalize-text">{{$ctrl.mo.moName}}</label></div></div><div class="form-group field"><label class="label capitalize-text">Name</label><div><label class="label capitalize-text">{{$ctrl.mo.finishedGood.name}}</label></div></div><div class="form-group field"><label class="label capitalize-text">Code</label><div><label class="label capitalize-text">{{$ctrl.mo.finishedGood.code}}</label></div></div><div class="form-group field"><label class="label capitalize-text">Batch Size</label><div><label class="label capitalize-text">{{$ctrl.mo.batchSize}}</label></div></div></div></div></div></div></div><div ng-if="$ctrl.mo.inventoryList.length > 0" class="form-group field"><label class="label capitalize-text">Result</label><div>{{$ctrl.isPassed()}}</div></div><table ng-if="$ctrl.mo.inventoryList.length > 0" class="table table-list"><thead><tr><td>Item</td><td>Type</td><td>Needed Qty. per pc</td><td>Control Number</td><td>MO Quantity Reserved</td><td>MO Quantity Dispensed</td><td>Status</td></tr></thead><tbody><tr ng-repeat="inv in $ctrl.mo.inventoryList"><td>{{inv.item.name}} {{inv.item.code}}</td><td>{{inv.item.type.code}}</td><td>{{$ctrl.findIngredientQuantity(inv.item.code)}}</td><td>{{inv.controlNumber}}</td><td>{{inv.moqReserved }}</td><td>{{$ctrl.mo.batchSize * $ctrl.findIngredientQuantity(inv.item.code)}}</td><td>Good</td></tr></tbody></table><button ng-if="!$ctrl.mo.moNumber" type="button" class="btn btn-create btn-md" ng-click="$ctrl.createMo()">Create MO</button></div></div></form>');
$templateCache.put('./mo-multi-test.html','<div class="admin-header"><div class="title horizontal-align -between"><h4 class="bg">Manufacturing Order - Multi test</h4></div><hr class="devider"></div><form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="form-content"><div class="step-form"><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" data-target="#findFgModal" data-toggle="modal">Select Finished Good</a></div><div class="form-group rmpm"><label class="label capitalize-text">FG Code</label><input disabled="disabled" type="text" ng-model="$ctrl.mo.finishedGood.code" readonly="readonly" class="form-control -border"><label class="label capitalize-text">FG Name</label><input disabled="disabled" type="text" ng-model="$ctrl.mo.finishedGood.name" readonly="readonly" class="form-control -border"></div></div></div></div><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">MO Type</label><select type="text" class="form-control -border" ng-model="$ctrl.mo.type"><option value="">ALL</option><option value="RM">RM</option><option value="PM">PM</option></select></div><div class="form-group field"><label class="label capitalize-text">Batch Size</label><input type="text" class="form-control -border" ng-model="$ctrl.mo.batchSize"></div></div></div></div></div></div><div class="request-action"><button type="button" class="btn btn-create btn-md" ng-click="$ctrl.testRun()">Add to Test Run</button> <button type="button" class="btn btn-warning btn-md" ng-click="$ctrl.reset()">Reset</button></div><!-- <pre>{{$ctrl.tests | json}}</pre> --><table ng-if="$ctrl.mo.inventoryList.length > 0" class="table table-list"><thead><tr><td>Item</td><td>Type</td><td>Control Number</td><td>Inventory Quantity</td><td>Quantity Needed</td><td>Quantity Lacking</td></tr></thead><tbody><tr style="{{(inv.result > 0) ? \'background-color: yellow\' : \'background-color: white\'}}" ng-repeat="inv in $ctrl.mo.inventoryList"><td>{{inv.item.name}} {{inv.item.code}}</td><td>{{inv.item.type.code}}</td><td>{{inv.controlNumber}}</td><td>{{inv.quantity}}</td><td>{{inv.moQuantity}}</td><td>{{inv.result = $ctrl.processLacking(inv.quantity, inv.moQuantity)}}</td></tr></tbody></table></div></div></form><find-fg-modal fg="$ctrl.mo.finishedGood"></find-fg-modal>');
$templateCache.put('./mo-new.html','<div class="admin-header"><div class="title horizontal-align -between"><h4 class="bg">Pre-Manufacturing Order</h4></div><hr class="devider"></div><form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="form-content"><div class="step-form"><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" data-target="#findFgModal" data-toggle="modal">Select Finished Good</a></div><div class="form-group rmpm"><label class="label capitalize-text">FG Code</label><input disabled="disabled" type="text" ng-model="$ctrl.mo.finishedGood.code" readonly="readonly" class="form-control -border"><label class="label capitalize-text">FG Name</label><input disabled="disabled" type="text" ng-model="$ctrl.mo.finishedGood.name" readonly="readonly" class="form-control -border"></div></div></div></div><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">MO Type</label><select type="text" class="form-control -border" ng-model="$ctrl.mo.type"><option value="">ALL</option><option value="RM">RM</option><!-- <option value="PM">PM</option> --></select></div><div class="form-group field"><label class="label capitalize-text">Batch Size</label><input type="text" class="form-control -border" ng-model="$ctrl.mo.batchSize"></div></div></div></div></div></div><div class="request-action"><button type="button" class="btn btn-create btn-md" ng-click="$ctrl.testRun()">Test Run</button></div><div class="horizontal-align -between"><table ng-if="$ctrl.mo.inventoryList.length > 0" class="table table-list"><thead><tr><td>Item</td><td>Type</td><td>Ingredient Quantity</td><td>Control Number</td><td>Inventory Quantity</td><td>Quantity Needed</td><td>Quantity Lacking</td><td>Expiry</td><td>Re-eval</td><td>Re-test</td><td>Best Before</td></tr></thead><tbody><tr style="{{(inv.result > 0) ? \'background-color: yellow\' : \'background-color: white\'}}" ng-repeat="inv in $ctrl.mo.inventoryList"><td>{{inv.item.name}} {{inv.item.code}}</td><td>{{inv.item.type.code}}</td><td>{{inv.ingredientQuantity}}</td><td>{{inv.controlNumber}}</td><td>{{inv.quantity}}</td><td>{{$ctrl.getRecipeItemQuantity(inv.item.code, $ctrl.mo.recipe) }}</td><td>{{inv.result = $ctrl.processLacking(inv.quantity, inv.item.code, $ctrl.mo.recipe)}}</td><td>{{inv.expiration | date}}</td><td>{{inv.reevaluation | date}}</td><td>{{inv.retest | date}}</td><td>{{inv.bestBefore | date}}</td></tr></tbody></table></div><div ng-if="$ctrl.mo.inventoryList.length > 0" class="form-group field"><label class="label capitalize-text">Result</label><div>{{$ctrl.isPassed()}}</div><button type="button" class="btn btn-create btn-md" ng-click="$ctrl.createMo()">Create MO</button></div></div></div></form><find-fg-modal fg="$ctrl.mo.finishedGood"></find-fg-modal>');
$templateCache.put('./pp-new.html','<div class="admin-header"><div class="title horizontal-align -between"><h4 class="bg">Packaging Process</h4></div><hr class="devider"></div><form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">SELECT MO</label><select class="form-control select -borderless" ng-model="$ctrl.mo" ng-change="$ctrl.selectMo();" ng-options="\'MO#\' + d.moNumber + \':\' + d.moName + \' \' + d.ingredientGroup.name + \' x \' + d.remainingBatchSize for d in $ctrl.moList" name="mo"></select></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Name</label><input type="text" disabled="disabled" class="form-control -border" ng-model="$ctrl.mo.finishedGood.name"></div><div class="form-group field"><label class="label capitalize-text">Code</label><input type="text" disabled="disabled" class="form-control -border" ng-model="$ctrl.mo.finishedGood.code"></div></div></div></div></div></div><table ng-if="$ctrl.mo.inventoryList.length > 0" class="table table-list"><thead><tr><td>Item</td><td>Type</td><td>Mo Number</td><td>Control Number</td><td>Batch Size Available</td><td>MO Quantity Reserved</td></tr></thead><tbody><tr><td></td><td>{{$ctrl.mo.type}}</td><td>#{{$ctrl.mo.moNumber}}</td><td></td><td>{{$ctrl.mo.remainingBatchSize}}</td><td></td></tr><tr ng-repeat="inv in $ctrl.mo.inventoryList"><td>{{inv.item.name}} {{inv.item.code}}</td><td>{{inv.item.type.code}}</td><td></td><td>{{inv.controlNumber}}</td><td></td><td>{{inv.moqReserved}}</td></tr></tbody></table><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="form-group field"><label class="label capitalize-text">Batch Size</label><input type="text" class="form-control -border" ng-model="$ctrl.batchSize"><div ng-if="(!$ctrl.batchSize || $ctrl.batchSize <= 0 || $ctrl.batchSize > $ctrl.mo.remainingBatchSize)"><button type="button" class="btn btn-create btn-md" ng-click="$ctrl.createPP()" disabled="disabled">Process Packaging</button></div><div ng-if="!(!$ctrl.batchSize || $ctrl.batchSize <= 0 || $ctrl.batchSize > $ctrl.mo.remainingBatchSize)"><button type="button" class="btn btn-create btn-md" ng-click="$ctrl.createPP()">Process Packaging</button></div></div></div></div></div></div></form>');
$templateCache.put('./recipe-form.html','<form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="form-content"><div class="step-form"><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" data-target="#findFgModal" data-toggle="modal">Select Finished Good</a></div><div class="form-group rmpm"><label class="label capitalize-text">FG Code</label><input disabled="disabled" type="text" ng-model="$ctrl.recipe.finishedGood.code" readonly="readonly" class="form-control -border"><label class="label capitalize-text">FG Name</label><input disabled="disabled" type="text" ng-model="$ctrl.recipe.finishedGood.name" readonly="readonly" class="form-control -border"></div></div></div><button type="button" ng-click="$ctrl.addIngredientGroup();">+ Add Ingredient Group</button><div ng-repeat="ingredientGroup in $ctrl.recipe.ingredientGroups"><!-- Ingredient Groups --><div class="horizontal-align -start rmpm-content"><div>Group Name <input type="text" ng-model="ingredientGroup.name"></div><table class="table table-list"><thead><tr><td>Item</td><td>Ingredient Quantity</td><td><button type="button" style="background-color:aqua" ng-click="$ctrl.addIngredient(ingredientGroup)">+ Add Ingredient</button></td></tr></thead><tbody><tr ng-repeat="ingredient in ingredientGroup.ingredients"><td><select class="form-control select -borderless" ng-model="ingredient.item" ng-options="d.name + \'-\' + d.code + \' \' + d.type.code  for d in $ctrl.items" name="finishedGood"></select></td><td><input type="text" ng-model="ingredient.quantity"></td><td></td></tr></tbody></table></div></div></div><div class="request-action" ng-if="$ctrl.recipe.ingredientGroups && ($ctrl.recipe.ingredientGroups.length > 0 && $ctrl.recipe.ingredientGroups[0].ingredients && $ctrl.recipe.ingredientGroups[0].ingredients.length > 0 && $ctrl.recipe.ingredientGroups[0].ingredients[0].item.name)"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div><div class="request-action" ng-if="$ctrl.recipe.ingredientGroups && !($ctrl.recipe.ingredientGroups.length > 0 && $ctrl.recipe.ingredientGroups[0].ingredients && $ctrl.recipe.ingredientGroups[0].ingredients.length > 0 && $ctrl.recipe.ingredientGroups[0].ingredients[0].item.name )"><button type="submit" disabled="disabled" class="btn btn-create btn-md">{{$ctrl.button}}</button></div><find-fg-modal fg="$ctrl.recipe.finishedGood"></find-fg-modal></div></form>');
$templateCache.put('./recipe-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Recipe Form</h3></div></div><header class="header-form"><a href="/admin/rnd" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">Recipe Form</h3></header><recipe-form recipe="$ctrl.recipe" message="{{ $ctrl.error }}" button="Create Recipe" on-submit="$ctrl.createRecipe($event);"></recipe-form>');
$templateCache.put('./recipes.html','<div class="admin-header"><div class="title horizontal-align -between"><h4 class="bg">Recipes</h4><div class="action-link"><a href="/admin/rnd/recipe/new">Create Recipe</a></div></div><hr class="devider"><div class="search-box horizontal-align -between"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="code" type="text" name="search" ng-model="$ctrl.searchCode"> <input class="form-control -borderless search" placeholder="description" type="text" name="search" ng-model="$ctrl.searchName"></div></div><table class="table table-list"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'code\';$ctrl.sortReverse = !$ctrl.sortReverse;">Mat\'l Code <span ng-show="$ctrl.sortType == \'code\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'code\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'name\';$ctrl.sortReverse = !$ctrl.sortReverse;">Mat\u2019l Description <span ng-show="$ctrl.sortType == \'name\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'name\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'date\';$ctrl.sortReverse = !$ctrl.sortReverse;">Last Recipe Modification <span ng-show="$ctrl.sortType == \'date\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'date\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th></tr></thead><tbody><tr ng-repeat="recipe in $ctrl.recipes | filter: {finishedGood: { code: $ctrl.searchCode, name: $ctrl.searchName }}| orderBy:$ctrl.sortType:$ctrl.sortReverse" data-target="#recipeModal" data-toggle="modal" ng-click="$ctrl.openModal(recipe.finishedGood)"><td>{{recipe.finishedGood.code}}</td><td>{{recipe.finishedGood.name}}</td><td>{{recipe.date | date}}</td></tr></tbody></table><div class="modal fade" id="recipeModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">{{$ctrl.finishedgood.name}}</h4><button class="close"><span data-dismiss="modal" ng-click="$ctrl.closeModal()" class="ion-android-close close-modal"></span></button></div><div class="modal-body"><div class="rd-side"><div class="horizontal-align -start rd-content"><p>Recipe</p><p>Recipe No</p><p>Remarks</p><p>ActiveGroup</p></div></div><div id="accordion"><div ng-repeat="recipe in $ctrl.recipesOfFinishedGood" class="card accordion-panel" data-toggle="collapse" data-target="#collapse{{$index}}"><div class="card-header rd-header" id="heading{{$index}}"><h5 class="mb-0"><a><div class="horizontal-align -start block-content"><p>{{recipe.finishedGood.name}}</p><p>{{recipe.finishedGood.code}}</p><p>{{recipe.remarks}}</p><p>{{recipe.activeIngredientGroup.name}}</p></div></a></h5></div><div class="collapse" id="collapse{{$index}}"><div class="card-block rd-block" ng-repeat="ingredientGroup in recipe.ingredientGroups" style="{{(ingredientGroup.id == recipe.activeIngredientGroup.id) ? \'background-color: #F1C40F\' : \'\'}}"><div>{{ingredientGroup.name}} - {{ingredientGroup.dateCreated | date}} <button ng-if="recipe.activeIngredientGroup.id != ingredientGroup.id" type="button" ng-click="recipe.activeIngredientGroup = ingredientGroup; $ctrl.updateRecipe(recipe);">Set Active</button></div><div ng-repeat="ingredient in ingredientGroup.ingredients" ng-class="{\'rd-list -orangish\': ingredient.item.type.code == \'RM\', \'rd-list -apple\': ingredient.item.type.code == \'PM\'}"><div class="horizontal-align -between list-content"><p>{{ingredient.item.code}} {{ingredient.item.name}}</p><p>{{ingredient.quantity}} {{ingredient.item.unit.code}}</p></div></div><div class="clear-float"></div></div></div></div></div></div><div class="modal-footer"><p class="date">Created at 9/7/2017</p><button ng-click="$ctrl.closeModal()" data-dismiss="modal" class="btn btn-cancel">Close</button></div></div></div></div></div>');
$templateCache.put('./acknowledgement-receipt-form.html','<style>.highlightred{\r\n\t\tbackground-color:red;\r\n\t}\r\n\t.highlight{\r\n\t\tbackground-color:#7ed321;\r\n\t}</style><form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">AR Number</label><input type="text" class="form-control -border" ng-model="$ctrl.ar.number"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date</label><input type="date" class="form-control -border" ng-model="$ctrl.ar.date"></div></div></div></div></div></div><div class="horizontal-align -start rmpm-content"><div class="form-group rmpm"><label class="label capitalize-text">Depot</label><select class="form-control select -border" ng-change="$ctrl.clearPayments()" ng-model="$ctrl.ar.depot.id" ng-options="d.id as d.code for d in $ctrl.depots" name="depot"></select></div></div><div ng-if="$ctrl.ar.depot"><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" data-target="#findClientModal" data-toggle="modal">Select Client</a></div><div class="form-group rmpm"><label class="label capitalize-text">Code</label><input type="text" ng-model="$ctrl.ar.client.code" ng-change="$ctrl.clearPayments()" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Name</label><input type="text" ng-model="$ctrl.ar.client.name" class="form-control -border"></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Prepared By</label><input type="hidden" ng-model="$ctrl.ar.requestedBy"> <input type="text" class="form-control -border" readonly="readonly" value="{{$ctrl.ar.preparedBy.firstName}} {{$ctrl.ar.preparedBy.lastName}}"></div></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Requested By</label><input type="hidden" ng-model="$ctrl.ar.requestedBy"> <input type="text" class="form-control -border" readonly="readonly" value="{{$ctrl.ar.requestedBy.firstName}} {{$ctrl.ar.requestedBy.lastName}}"></div></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Checked By</label><input type="hidden" ng-model="$ctrl.ar.requestedBy"> <input type="text" class="form-control -border" readonly="readonly" value="{{$ctrl.ar.checkedBy.firstName}} {{$ctrl.ar.checkedBy.lastName}}"></div></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><h5>Terms Of Payment</h5><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Cash</label><input type="radio" ng-model="$ctrl.ar.terms" value="CASH"><label class="label capitalize-text">Cheque</label><input type="radio" ng-model="$ctrl.ar.terms" value="CHEQUE"></div></div></div></div></div><div class="step-form" ng-if="$ctrl.ar.terms == \'CHEQUE\'"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Cheque #</label><input type="text" class="form-control -border" ng-model="$ctrl.ar.chequeNumber"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date Of Cheque</label><input type="date" class="form-control -border" ng-model="$ctrl.ar.chequeDate"></div></div></div></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Amount Paid</label><input type="number" class="form-control -border" ng-change="$ctrl.clearPayments()" ng-model="$ctrl.ar.amountPaid"></div></div></div><div class="side-two" ng-if="$ctrl.ar.terms == \'CHEQUE\'"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Cut Off Date</label><input type="date" class="form-control -border" ng-model="$ctrl.ar.cutOffDate"></div></div></div></div></div></div><table class="table table-list"><thead><tr><th>Type</th><th>No</th><th>Total Amount</th><th>Remaining Balance</th><th>Payment</th><th>Remaining</th></tr></thead><tbody><tr ng-repeat="i in $ctrl.ar.payments" ng-class="{highlightred: i.quantity < 0 }"><td>{{i.reference.salesOrder.type}}</td><td>{{i.reference.number}}</td><td>{{i.reference.totalAmount}}</td><td>{{i.reference.remainingBalance}}</td><td><input type="number" ng-change="$ctrl.computeTotalPayment()" ng-model="i.appliedAmount" required></td><td>{{i.reference.remainingBalance - i.appliedAmount}}</td></tr></tbody><tfoot><tr><th></th><th></th><th>Total Applied Amount:</th><th>{{$ctrl.totalAmount.toFixed(2)}}</th></tr><tr><th></th><th></th><th>Total SI Amount:</th><th>{{$ctrl.siAmount.toFixed(2)}}</th></tr></tfoot></table><div class="request-action"><a href="#" class="button-link btn btn-action btn-md" ng-click="$ctrl.findSalesSlip()">Select DR_SI/OS</a></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" ng-model="$ctrl.ar.remarks"></textarea></div></div></div></div></div><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></div></div></form><find-client-modal client="$ctrl.ar.client" message="{{ $ctrl.error }}" button="Select Client"></find-client-modal><div class="modal fade" id="salesSlipsModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find OS, DR_SI</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="modal-body"><div class="search-box horizontal-align -between"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !imsortant"><i class="fa fa-search"></i></div></div></div><div class="wrapper scroll-section"><table class="table table-hover"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'number\';$ctrl.sortReverse = !$ctrl.sortReverse;">OS/DR_SI # <span ng-show="$ctrl.sortType == \'number\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'number\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'date\';$ctrl.sortReverse = !$ctrl.sortReverse;">Date <span ng-show="$ctrl.sortType == \'date\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'date\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th>Total Amount</th><th>Remaining Balance</th></tr></thead><tbody><tr ng-repeat="os in $ctrl.salesSlips  | orderBy:$ctrl.sortType:$ctrl.sortReverse" ng-click="$ctrl.selectSalesSlip(os)" ng-class="{highlight: $ctrl.customizedIndexOf($ctrl.selectedSalesSlips, os) !== -1}"><td>{{os.number}}</td><td>{{os.date | date}}</td><td>{{os.totalAmount.toFixed(2)}}</td><td>{{os.remainingBalance.toFixed(2)}}</td></tr></tbody></table></div></div></div></div></div>');
$templateCache.put('./acknowledgement-receipt-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Acknowledgement Receipt Form</h3></div></div><header class="header-form"><a href="/admin/sales/acknowledgement-receipt" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">New Acknowledgement Receipt Form</h3></header><acknowledgement-receipt-form ar="$ctrl.ar" message="{{ $ctrl.error }}" button="Create Acknowledgement Receipt" on-submit="$ctrl.createAcknowledgementReceipt($event);"></acknowledgement-receipt-form>');
$templateCache.put('./acknowledgement-receipts.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Acknowledgement Receipts Forms</h3></div><a href="#" ng-click="$ctrl.createNewAcknowledgementReceipt($event);" class="btn btn-create btn-md button-link">Create New AR</a></div><div class="client-pris"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="PRIS No" type="text" name="search" ng-model="$ctrl.searchNumber"> <input class="form-control -borderless search" placeholder="Date" type="text" name="search" ng-model="$ctrl.searchDate"></div></div><div class="search-box horizontal-align -between"><select class="form-control select" ng-model="$ctrl.userAssignedDepot.id" ng-change="$ctrl.selectDepot()" ng-options="d.id as d.name for d in $ctrl.userAssignedDepots" name="fromDepots"></select></div><table ng-if="$ctrl.acknowledgementReceipts" class="table table-list"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'date\';$ctrl.sortReverse = !$ctrl.sortReverse;">Date <span ng-show="$ctrl.sortType == \'date\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'date\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'number\';$ctrl.sortReverse = !$ctrl.sortReverse;">AR No <span ng-show="$ctrl.sortType == \'number\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'number\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'preparedBy\';$ctrl.sortReverse = !$ctrl.sortReverse;">Prepared By <span ng-show="$ctrl.sortType == \'preparedBy\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'preparedBy\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'status\';$ctrl.sortReverse = !$ctrl.sortReverse;">Amount Paid <span ng-show="$ctrl.sortType == \'status\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'status\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="acknowledgementReceipt in $ctrl.acknowledgementReceipts | filter: {date: $ctrl.searchDate, number: $ctrl.searchNumber} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{acknowledgementReceipt.date | date}}</td><td>{{acknowledgementReceipt.number}}</td><td>{{acknowledgementReceipt.preparedBy.firstName}} {{acknowledgementReceipt.preparedBy.lastName}}</td><td>{{acknowledgementReceipt.amountPaid.toFixed(2)}}</td><td class="tablebutton-form"><div class="holder"><button class="btn btn-compose"><i class="ion-ios-compose-outline" ng-click="$ctrl.openModal(acknowledgementReceipt)" data-toggle="modal" data-target="#ackReceiptInfoModal"></i></button></div></td></tr></tbody></table><view-ackreceipt-modal ar="$ctrl.ar"></view-ackreceipt-modal>');
$templateCache.put('./order-receipt-form.html','<style>.highlightred{\r\n\t\tbackground-color:red;\r\n\t}\r\n\t.highlight{\r\n\t\tbackground-color:#7ed321;\r\n\t}</style><form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">OR Number</label><input type="text" class="form-control -border" ng-model="$ctrl.or.number"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date</label><input type="date" class="form-control -border" ng-model="$ctrl.or.date"></div></div></div></div></div></div><div class="horizontal-align -start rmpm-content"><div class="form-group rmpm"><label class="label capitalize-text">Depot</label><select class="form-control select -border" ng-model="$ctrl.or.depot.id" ng-options="d.id as d.code for d in $ctrl.depots" name="depot"></select></div></div><div ng-if="$ctrl.or.depot"><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" ng-click="$ctrl.findAcknowledgementReceipt()" data-target="#acknowledgementReceiptsModal" data-toggle="modal">Select AR</a></div><div class="form-group rmpm"><label class="label capitalize-text">AR Number</label><input type="text" ng-model="$ctrl.or.acknowledgementReceipt.number" readonly="readonly" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Date</label><input type="text" readonly="readonly" value="{{$ctrl.or.acknowledgementReceipt.date | date}}" class="form-control -border"></div></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm"><label class="label capitalize-text">Customer Code</label><input type="text" ng-model="$ctrl.or.acknowledgementReceipt.client.code" readonly="readonly" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Received From</label><input type="text" readonly="readonly" ng-model="$ctrl.or.acknowledgementReceipt.client.name" class="form-control -border"></div></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm"><label class="label capitalize-text">TIN</label><input type="text" ng-model="$ctrl.or.acknowledgementReceipt.client.tin" readonly="readonly" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Business Address</label><input type="text" readonly="readonly" ng-model="$ctrl.or.acknowledgementReceipt.client.businessAddress" class="form-control -border"></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Prepared By</label><input type="text" class="form-control -border" readonly="readonly" value="{{$ctrl.or.preparedBy.firstName}} {{$ctrl.or.preparedBy.lastName}}"></div></div></div></div></div></div><table class="table table-list"><thead><tr><th>SI</th><th>Amount</th><th>Discount</th><th>Others</th><th>Withholding Tax</th><th>NET</th></tr></thead><tbody><tr ng-repeat="payment in $ctrl.payments"><td>{{payment.reference.number}}</td><td>{{payment.appliedAmount}}</td><td></td><td></td><td></td><td>{{payment.appliedAmount}}</td></tr></tbody><tfoot><tr><th>VATABLE Sales</th><th>{{($ctrl.or.acknowledgementReceipt.siAmount / 1.12).toFixed(2)}}</th><th>Total Sales (Vat Inclusive)</th><th>{{$ctrl.or.acknowledgementReceipt.siAmount.toFixed(2)}}</th></tr><tr><th>VAT Exempt Sales</th><th></th><th>less VAT</th><th>{{($ctrl.or.acknowledgementReceipt.siAmount / 1.12 * 0.12).toFixed(2)}}</th></tr><tr><th>Zero-Rated Sales</th><th></th><th>NET</th><th>{{($ctrl.or.acknowledgementReceipt.siAmount / 1.12).toFixed(2)}}</th></tr></tfoot></table><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" ng-model="$ctrl.or.remarks"></textarea></div></div></div></div></div><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></div></div></form><div class="modal fade" id="acknowledgementReceiptsModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find AR</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="modal-body"><div class="search-box horizontal-align -between"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !imsortant"><i class="fa fa-search"></i></div></div></div><div class="wrapper scroll-section"><table class="table table-hover"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'number\';$ctrl.sortReverse = !$ctrl.sortReverse;">AR # <span ng-show="$ctrl.sortType == \'number\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'number\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'date\';$ctrl.sortReverse = !$ctrl.sortReverse;">Date <span ng-show="$ctrl.sortType == \'date\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'date\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th>Client</th><th>Total SI Amount</th></tr></thead><tbody><tr ng-repeat="or in $ctrl.acknowledgementReceipts  | orderBy:$ctrl.sortType:$ctrl.sortReverse" ng-click="$ctrl.selectAcknowledgementReceipt(or)" data-dismiss="modal"><td>{{or.number}}</td><td>{{or.date | date}}</td><td>{{or.client.name}}</td><td>{{or.siAmount.toFixed(2)}}</td></tr></tbody></table></div></div></div></div></div>');
$templateCache.put('./order-receipt-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Order Receipt Form</h3></div></div><header class="header-form"><a href="/admin/sales/order-receipt" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">New Order Receipt Form</h3></header><order-receipt-form or="$ctrl.or" message="{{ $ctrl.error }}" button="Create Order Receipt" on-submit="$ctrl.createOrderReceipt($event);"></order-receipt-form>');
$templateCache.put('./order-receipts.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Official Receipts Forms</h3></div><a href="#" ng-click="$ctrl.createNewOrderReceipt($event);" class="btn btn-create btn-md button-link">Create New OR</a></div><div class="client-pris"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="PRIS No" type="text" name="search" ng-model="$ctrl.searchNumber"> <input class="form-control -borderless search" placeholder="Date" type="text" name="search" ng-model="$ctrl.searchDate"></div></div><div class="search-box horizontal-align -between"><select class="form-control select" ng-model="$ctrl.userAssignedDepot.id" ng-change="$ctrl.selectDepot()" ng-options="d.id as d.name for d in $ctrl.userAssignedDepots" name="fromDepots"></select></div><table ng-if="$ctrl.orderReceipts" class="table table-list"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'date\';$ctrl.sortReverse = !$ctrl.sortReverse;">Date <span ng-show="$ctrl.sortType == \'date\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'date\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'number\';$ctrl.sortReverse = !$ctrl.sortReverse;">OR No <span ng-show="$ctrl.sortType == \'number\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'number\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'acknowledgementReceipt.number\';$ctrl.sortReverse = !$ctrl.sortReverse;">AR No <span ng-show="$ctrl.sortType == \'acknowledgementReceipt.number\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'acknowledgementReceipt.number\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'acknowledgementReceipt.client.name\';$ctrl.sortReverse = !$ctrl.sortReverse;">Client <span ng-show="$ctrl.sortType == \'acknowledgementReceipt.client.name\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'acknowledgementReceipt.client.name\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'acknowledgementReceipt.siAmount\';$ctrl.sortReverse = !$ctrl.sortReverse;">SI Amount Paid <span ng-show="$ctrl.sortType == \'acknowledgementReceipt.siAmount\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'acknowledgementReceipt.siAmount\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="orderReceipt in $ctrl.orderReceipts | filter: {date: $ctrl.searchDate, number: $ctrl.searchNumber} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{orderReceipt.date | date}}</td><td>{{orderReceipt.number}}</td><td>{{orderReceipt.acknowledgementReceipt.number}}</td><td>{{orderReceipt.acknowledgementReceipt.client.name}}</td><td>{{orderReceipt.acknowledgementReceipt.siAmount}}</td><td class="tablebutton-form"><div class="holder"><button class="btn btn-compose"><i class="ion-ios-compose-outline" ng-click="$ctrl.openModal(orderReceipt)" data-toggle="modal" data-target="#orderReceiptInfoModal"></i></button></div></td></tr></tbody></table>');
$templateCache.put('./order-slip-form.html','<style>.highlightred{\r\n\t\tbackground-color:red;\r\n\t}</style><form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">OS Number</label><input type="text" class="form-control -border" ng-model="$ctrl.os.number"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date</label><input type="date" class="form-control -border" ng-model="$ctrl.os.date"></div></div></div></div></div></div><div class="horizontal-align -start rmpm-content"><div class="form-group rmpm"><label class="label capitalize-text">Depot</label><select class="form-control select -border" ng-model="$ctrl.os.depot.id" ng-options="d.id as d.code for d in $ctrl.depots" name="depot"></select></div></div><div ng-if="$ctrl.os.depot"><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" ng-click="$ctrl.findSoModal()">Select SO</a></div><div class="form-group rmpm"><label class="label capitalize-text">SO No</label><input type="text" ng-model="$ctrl.os.salesOrder.number" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Sales Rep</label><input type="text" class="form-control -border"></div></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm"><label class="label capitalize-text">Client Code</label><input type="text" ng-model="$ctrl.os.salesOrder.client.code" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Name</label><input type="text" ng-model="$ctrl.os.salesOrder.client.name" class="form-control -border"></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Prepared By</label><input type="hidden" ng-model="$ctrl.os.requestedBy"> <input type="text" class="form-control -border" readonly="readonly" value="{{$ctrl.os.preparedBy.firstName}} {{$ctrl.os.preparedBy.lastName}}"></div></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Released By</label><input type="hidden" ng-model="$ctrl.os.releasedBy"> <input type="text" class="form-control -border" readonly="readonly" value="{{$ctrl.os.releasedBy.firstName}} {{$ctrl.os.releasedBy.lastName}}"></div></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Checked By</label><input type="hidden" ng-model="$ctrl.os.requestedBy"> <input type="text" class="form-control -border" readonly="readonly" value="{{$ctrl.os.checkedBy.firstName}} {{$ctrl.os.checkedBy.lastName}}"></div></div></div></div></div></div><table class="table table-list"><thead class="thead-dark"><tr><th></th><th>Lot #</th><th>Expiration</th><th>Stock On Hand</th><th>Quantity</th><th></th></tr><tr style="background-color:yellow"><th>FG</th><th>Quantity</th><th>Remaining</th><th>Unit Price</th><th>Amount</th><th></th></tr></thead><tbody ng-repeat="i in $ctrl.os.salesOrder.products"><tr style="background-color:yellow"><td>{{i.finishedGood.name}}</td><td>{{i.quantity}}</td><td>{{i.quantityRemaining}}</td><td>{{i.unitPrice}}</td><td>{{i.quantity * i.unitPrice}}</td><td><button type="button" ng-click="$ctrl.showSoProductModal(i.finishedGood)" class="btn btn-create btn-md">Select</button></td></tr><tr ng-repeat="p in $ctrl.getProductsOfFg(i)" ng-init="$ctrl.stockOnHand = p.quantity" ng-class="{highlightred: i.quantityRemaining < $ctrl.getTotalQuantity(i)}"><td></td><td>{{p.product.lotNumber}}</td><td>{{p.product.expiration | date}}</td><td>{{$ctrl.stockOnHand}}</td><td><input type="text" required ng-model="p.quantity"></td><td></td></tr></tbody><tfoot></tfoot></table><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" ng-model="$ctrl.os.remarks"></textarea></div></div></div></div></div><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></div></div></form><find-so-modal so="$ctrl.os.salesOrder" salesorders="$ctrl.salesOrders" message="{{ $ctrl.error }}" button="Select SO"></find-so-modal><find-so-product-modal products="$ctrl.os.orderedProducts" inventorylist="$ctrl.inventorylist" message="{{ $ctrl.error }}" button="Select"></find-so-product-modal>');
$templateCache.put('./order-slip-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Order Slip Form</h3></div></div><header class="header-form"><a href="/admin/sales/order-slip" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">New Order Slip Form</h3></header><order-slip-form os="$ctrl.os" message="{{ $ctrl.error }}" button="Create Order Slip" on-submit="$ctrl.createOrderSlip($event);"></order-slip-form>');
$templateCache.put('./order-slips.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Order Slips Forms</h3></div><a href="/admin/shared/print-osdr-report/depot/{{$ctrl.userAssignedDepot.id}}/start/{{$ctrl.startDate}}/end/{{$ctrl.endDate}}" class="btn btn-primary btn-md button-link">Generate OS/DR Report</a> <a href="#" ng-click="$ctrl.createNewOrderSlip($event);" class="btn btn-create btn-md button-link">Create New OS</a></div><div class="client-pris"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="PRIS No" type="text" name="search" ng-model="$ctrl.searchNumber"> <input class="form-control -borderless search" placeholder="Date" type="text" name="search" ng-model="$ctrl.searchDate"></div><div class="search-box horizontal-align -between"><input class="form-control -borderless search" type="date" name="search" ng-model="$ctrl.startDate"> <input class="form-control -borderless search" type="date" name="search" ng-model="$ctrl.endDate"></div></div><div class="search-box horizontal-align -between"><select class="form-control select" ng-model="$ctrl.userAssignedDepot.id" ng-change="$ctrl.selectDepot()" ng-options="d.id as d.name for d in $ctrl.userAssignedDepots" name="fromDepots"></select></div><table ng-if="$ctrl.orderSlips" class="table table-list"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'date\';$ctrl.sortReverse = !$ctrl.sortReverse;">Date <span ng-show="$ctrl.sortType == \'date\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'date\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'number\';$ctrl.sortReverse = !$ctrl.sortReverse;">OS No <span ng-show="$ctrl.sortType == \'number\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'number\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'preparedBy\';$ctrl.sortReverse = !$ctrl.sortReverse;">Prepared By <span ng-show="$ctrl.sortType == \'preparedBy\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'preparedBy\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'totalAmount\';$ctrl.sortReverse = !$ctrl.sortReverse;">Total Amount <span ng-show="$ctrl.sortType == \'totalAmount\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'totalAmount\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'remainingBalance\';$ctrl.sortReverse = !$ctrl.sortReverse;">Remaining Balance <span ng-show="$ctrl.sortType == \'remainingBalance\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'remainingBalance\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'status\';$ctrl.sortReverse = !$ctrl.sortReverse;">Status <span ng-show="$ctrl.sortType == \'status\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'status\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="orderSlip in $ctrl.orderSlips | filter: {date: $ctrl.searchDate, number: $ctrl.searchNumber} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{orderSlip.date | date}}</td><td>{{orderSlip.number}}</td><td>{{orderSlip.preparedBy.firstName}} {{orderSlip.preparedBy.lastName}}</td><td>{{orderSlip.totalAmount.toFixed(2)}}</td><td>{{orderSlip.remainingBalance.toFixed(2)}}</td><td>{{orderSlip.status}}</td><td ng-if="orderSlip.status != \'Cancelled\'" class="tablebutton-form"><div class="holder"><button class="btn btn-compose"><i class="ion-ios-compose-outline" ng-click="$ctrl.openModal(orderSlip)" data-toggle="modal" data-target="#osInfoModal"></i></button></div></td><td ng-if="orderSlip.status == \'Cancelled\'" class="tablebutton-form"><div class="holder"><button class="btn btn-compose"><i class="ion-ios-compose-outline" ng-click="$ctrl.openModal(orderSlip)"></i></button> <button class="btn btn-info" ng-if="orderSlip.status == \'Cancelled\'" ng-click="$ctrl.edit(orderSlip)">Edit</button></div></td></tr></tbody></table><view-os-modal os="$ctrl.os"></view-os-modal>');
$templateCache.put('./return-slip-form.html','<style>.highlightred{\r\n\t\tbackground-color:red;\r\n\t}</style><form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">RS Number</label><input type="text" class="form-control -border" ng-model="$ctrl.rs.number"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date</label><input type="date" class="form-control -border" ng-model="$ctrl.rs.date"></div></div></div></div></div></div><div class="horizontal-align -start rmpm-content"><div class="form-group rmpm"><label class="label capitalize-text">Depot</label><select class="form-control select -border" ng-model="$ctrl.rs.depot.id" ng-options="d.id as d.code for d in $ctrl.depots" name="depot"></select></div></div><div ng-if="$ctrl.rs.depot"><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" ng-click="$ctrl.findSalesSlip()">Select DR/OS</a></div><div class="form-group rmpm"><label class="label capitalize-text">DR#</label><input type="text" ng-model="$ctrl.rs.salesNumber" class="form-control -border"></div></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" data-target="#findClientModal" data-toggle="modal">Select Client</a></div><div class="form-group rmpm"><input type="hidden" ng-model="$ctrl.po.vendor.id"><label class="label capitalize-text">Code</label><input type="text" ng-model="$ctrl.rs.client.code" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Name</label><input type="text" ng-model="$ctrl.rs.client.name" class="form-control -border"></div></div></div><table class="table table-list"><thead><tr><th>Product</th><th>Lot #</th><th>Good Qty</th><th>Bad Qty</th><th>Unit Price</th><th>Amount</th></tr></thead><tbody><tr ng-repeat="i in $ctrl.rs.returnSlipProducts"><td>{{i.product.finishedGood.name}}</td><td>{{i.product.lotNumber}}</td><td><input ng-change="$ctrl.computeTotalAmount(i.goodQuantity* i.unitPrice, $index)" type="number" ng-model="i.goodQuantity" required></td><td><input type="number" ng-model="i.badQuantity" required></td><td><input ng-change="$ctrl.computeTotalAmount(i.goodQuantity * i.unitPrice, $index)" type="number" ng-model="i.unitPrice" required></td><td>{{i.goodQuantity * i.unitPrice}}</td></tr></tbody><tfoot><tr><th></th><th></th><th></th><th></th><th>Total Amount</th><th>{{$ctrl.rs.totalAmount.toFixed(2)}}</th></tr></tfoot></table><div class="request-action"><a href="#" class="button-link btn btn-action btn-md" ng-if="$ctrl.rs.salesNumber == null" ng-click="$ctrl.findProduct()">Select Item</a></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" ng-model="$ctrl.rs.remarks"></textarea></div></div></div></div></div><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></div></div></form><div class="modal fade" id="salesSlipsModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find OS, DR_SI</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="modal-body"><div class="search-box horizontal-align -between"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !imsortant"><i class="fa fa-search"></i></div></div></div><div class="wrapper scroll-section"><table class="table table-hover"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'number\';$ctrl.sortReverse = !$ctrl.sortReverse;">OS/DR_SI # <span ng-show="$ctrl.sortType == \'number\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'number\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'date\';$ctrl.sortReverse = !$ctrl.sortReverse;">Date <span ng-show="$ctrl.sortType == \'date\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'date\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th>Total Amount</th><th>Remaining Balance</th></tr></thead><tbody><tr ng-repeat="os in $ctrl.salesSlips  | orderBy:$ctrl.sortType:$ctrl.sortReverse" ng-click="$ctrl.selectSalesSlip(os)" ng-class="{highlight: $ctrl.customizedIndexOf($ctrl.selectedSalesSlips, os) !== -1}"><td>{{os.number}}</td><td>{{os.date | date}}</td><td>{{os.totalAmount.toFixed(2)}}</td><td>{{os.remainingBalance.toFixed(2)}}</td></tr></tbody></table></div></div></div></div></div><find-product-modal productlist="$ctrl.productsInDepot" issuedlist="$ctrl.rs.returnSlipProducts" stockonhand="$ctrl.stockOnHandList"></find-product-modal><find-client-modal client="$ctrl.rs.client" message="{{ $ctrl.error }}" button="Select Client"></find-client-modal>');
$templateCache.put('./return-slip-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Return Slip Forms</h3></div></div><header class="header-form"><a href="/admin/sales/return-slip" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">New Return Slip Form</h3></header><return-slip-form rs="$ctrl.rs" message="{{ $ctrl.error }}" button="Create Return Slip" on-submit="$ctrl.createReturnSlip($event);"></return-slip-form>');
$templateCache.put('./return-slips.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Return Slip Forms</h3></div><a href="/admin/shared/print-rs-report/depot/{{$ctrl.userAssignedDepot.id}}/start/{{$ctrl.startDate}}/end/{{$ctrl.endDate}}" class="btn btn-primary btn-md button-link">Generate Report</a> <a href="#" ng-click="$ctrl.createNewReturnSlip($event);" class="btn btn-create btn-md button-link">Create New SO</a></div><div class="client-pris"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="PRIS No" type="text" name="search" ng-model="$ctrl.searchNumber"> <input class="form-control -borderless search" placeholder="Date" type="text" name="search" ng-model="$ctrl.searchDate"></div><div class="search-box horizontal-align -between"><input class="form-control -borderless search" type="date" name="search" ng-model="$ctrl.startDate"> <input class="form-control -borderless search" type="date" name="search" ng-model="$ctrl.endDate"></div></div><div class="search-box horizontal-align -between"><select class="form-control select" ng-model="$ctrl.userAssignedDepot.id" ng-change="$ctrl.selectDepot()" ng-options="d.id as d.name for d in $ctrl.userAssignedDepots" name="fromDepots"></select></div><table ng-if="$ctrl.returnSlips" class="table table-list"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'date\';$ctrl.sortReverse = !$ctrl.sortReverse;">Date <span ng-show="$ctrl.sortType == \'date\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'date\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'number\';$ctrl.sortReverse = !$ctrl.sortReverse;">No <span ng-show="$ctrl.sortType == \'number\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'number\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'preparedBy\';$ctrl.sortReverse = !$ctrl.sortReverse;">DR# <span ng-show="$ctrl.sortType == \'preparedBy\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'preparedBy\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'status\';$ctrl.sortReverse = !$ctrl.sortReverse;">Client <span ng-show="$ctrl.sortType == \'status\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'status\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'status\';$ctrl.sortReverse = !$ctrl.sortReverse;">Amount <span ng-show="$ctrl.sortType == \'status\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'status\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th></tr></thead><tbody><tr ng-repeat="returnSlip in $ctrl.returnSlips | filter: {date: $ctrl.searchDate, number: $ctrl.searchNumber} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{returnSlip.date | date}}</td><td>{{returnSlip.number}}</td><td>{{returnSlip.salesNumber}}</td><td>{{returnSlip.client.name}}</td><td>{{returnSlip.totalAmount}}</td></tr></tbody></table>');
$templateCache.put('./sales-invoice-form.html','<style>.highlightred{\r\n\t\tbackground-color:red;\r\n\t}</style><form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">SI Number</label><input type="text" class="form-control -border" ng-model="$ctrl.si.number"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date</label><input type="date" class="form-control -border" ng-model="$ctrl.si.date"></div></div></div></div></div></div><div class="horizontal-align -start rmpm-content"><div class="form-group rmpm"><label class="label capitalize-text">Depot</label><select class="form-control select -border" ng-model="$ctrl.si.depot.id" ng-options="d.id as d.code for d in $ctrl.depots" name="depot"></select></div></div><div ng-if="$ctrl.si.depot"><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" ng-click="$ctrl.findSoModal()">Select SO</a></div><div class="form-group rmpm"><label class="label capitalize-text">SO No</label><input type="text" ng-model="$ctrl.si.salesOrder.number" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Tax</label><input type="number" ng-model="$ctrl.si.taxPercentage" class="form-control -border"></div></div></div><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm"><label class="label capitalize-text">Client Code</label><input type="text" ng-model="$ctrl.si.salesOrder.client.code" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Name</label><input type="text" ng-model="$ctrl.si.salesOrder.client.name" class="form-control -border"></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Prepared By</label><input type="hidden" ng-model="$ctrl.si.requestedBy"> <input type="text" class="form-control -border" readonly="readonly" value="{{$ctrl.si.preparedBy.firstName}} {{$ctrl.si.preparedBy.lastName}}"></div></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Released By</label><input type="hidden" ng-model="$ctrl.si.releasedBy"> <input type="text" class="form-control -border" readonly="readonly" value="{{$ctrl.si.releasedBy.firstName}} {{$ctrl.si.releasedBy.lastName}}"></div></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Checked By</label><input type="hidden" ng-model="$ctrl.si.requestedBy"> <input type="text" class="form-control -border" readonly="readonly" value="{{$ctrl.si.checkedBy.firstName}} {{$ctrl.si.checkedBy.lastName}}"></div></div></div></div></div></div><table class="table table-list"><thead class="thead-dark"><tr><th></th><th>Lot #</th><th>Expiration</th><th>Stock On Hand</th><th>Quantity</th><th></th></tr><tr style="background-color:yellow"><th>FG</th><th>Quantity</th><th>Remaining</th><th>Unit Price</th><th>Amount</th><th></th></tr></thead><tbody ng-repeat="i in $ctrl.si.salesOrder.products"><tr style="background-color:yellow"><td>{{i.finishedGood.name}}</td><td>{{i.quantity}}</td><td>{{i.quantityRemaining}}</td><td>{{i.unitPrice}}</td><td>{{i.quantity * i.unitPrice}}</td><td><button type="button" ng-click="$ctrl.showSoProductModal(i.finishedGood)" class="btn btn-create btn-md">Select</button></td></tr><tr ng-repeat="p in $ctrl.getProductsOfFg(i)" ng-init="$ctrl.stockOnHand = p.quantity" ng-class="{highlightred: i.quantityRemaining < $ctrl.getTotalQuantity(i)}"><td></td><td>{{p.product.lotNumber}}</td><td>{{p.product.expiration | date}}</td><td>{{$ctrl.stockOnHand}}</td><td><input type="text" required ng-model="p.quantity"></td><td></td></tr></tbody><tfoot></tfoot></table><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" ng-model="$ctrl.si.remarks"></textarea></div></div></div></div></div><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></div></div></form><find-so-modal so="$ctrl.si.salesOrder" salesorders="$ctrl.salesOrders" message="{{ $ctrl.error }}" button="Select SO"></find-so-modal><find-so-product-modal products="$ctrl.si.orderedProducts" inventorylist="$ctrl.inventorylist" message="{{ $ctrl.error }}" button="Select"></find-so-product-modal>');
$templateCache.put('./sales-invoice-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Sales Invoice Form</h3></div></div><header class="header-form"><a href="/admin/sales/sales-invoice" class="btn btn-back back"><i class="ion-isi-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">New Sales Invoice Form</h3></header><sales-invoice-form si="$ctrl.si" message="{{ $ctrl.error }}" button="Create Sales Invoice" on-submit="$ctrl.createSalesInvoice($event);"></sales-invoice-form>');
$templateCache.put('./sales-invoices.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Sales Invoices Forms</h3></div><a href="#" ng-click="$ctrl.createNewSalesInvoice($event);" class="btn btn-create btn-md button-link">Create New OS</a></div><div class="client-pris"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="PRIS No" type="text" name="search" ng-model="$ctrl.searchNumber"> <input class="form-control -borderless search" placeholder="Date" type="text" name="search" ng-model="$ctrl.searchDate"></div></div><div class="search-box horizontal-align -between"><select class="form-control select" ng-model="$ctrl.userAssignedDepot.id" ng-change="$ctrl.selectDepot()" ng-options="d.id as d.name for d in $ctrl.userAssignedDepots" name="fromDepots"></select></div><table ng-if="$ctrl.salesInvoices" class="table table-list"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'date\';$ctrl.sortReverse = !$ctrl.sortReverse;">Date <span ng-show="$ctrl.sortType == \'date\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'date\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'number\';$ctrl.sortReverse = !$ctrl.sortReverse;">SI No <span ng-show="$ctrl.sortType == \'number\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'number\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'preparedBy\';$ctrl.sortReverse = !$ctrl.sortReverse;">Prepared By <span ng-show="$ctrl.sortType == \'preparedBy\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'preparedBy\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'status\';$ctrl.sortReverse = !$ctrl.sortReverse;">Status <span ng-show="$ctrl.sortType == \'status\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'status\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="salesInvoice in $ctrl.salesInvoices | filter: {date: $ctrl.searchDate, number: $ctrl.searchNumber} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{salesInvoice.date | date}}</td><td>{{salesInvoice.number}}</td><td>{{salesInvoice.preparedBy.firstName}} {{salesInvoice.preparedBy.lastName}}</td><td>{{salesInvoice.status}}</td><td ng-if="salesInvoice.status != \'Cancelled\'" class="tablebutton-form"><div class="holder"><button class="btn btn-compose"><i class="ion-ios-compose-outline" ng-click="$ctrl.openModal(salesInvoice)" data-toggle="modal" data-target="#osInfoModal"></i></button></div></td><td ng-if="salesInvoice.status == \'Cancelled\'" class="tablebutton-form"><div class="holder"><button class="btn btn-compose"><i class="ion-ios-compose-outline" ng-click="$ctrl.openModal(salesInvoice)"></i></button> <button class="btn btn-info" ng-if="salesInvoice.status == \'Cancelled\'" ng-click="$ctrl.edit(salesInvoice)">Edit</button></div></td></tr></tbody></table><view-os-modal os="$ctrl.si"></view-os-modal>');
$templateCache.put('./sales-order-form.html','<style>.highlightred{\r\n\t\tbackground-color:red;\r\n\t}</style><form novalidate ng-submit="$ctrl.submitForm();" method="post"><div class="form-content"><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">SO Number</label><input type="text" class="form-control -border" ng-model="$ctrl.so.number"></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Date</label><input type="date" class="form-control -border" ng-model="$ctrl.so.date"></div></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Type</label><select class="form-control -border" ng-model="$ctrl.so.type"><option>Please Select</option><option value="DR_SI">DR/SI</option><option value="OS">OS</option><option value="PS">PS</option></select></div></div></div></div></div></div><div class="horizontal-align -start rmpm-content"><div class="form-group rmpm"><label class="label capitalize-text">Depot</label><select class="form-control select -border" ng-model="$ctrl.so.depot.id" ng-options="d.id as d.code for d in $ctrl.depots" name="depot"></select></div></div><div ng-if="$ctrl.so.depot"><div class="horizontal-align -start rmpm-content"><div class="horizontal-align -start rmpm-code"><div class="form-group rmpm action"><a href="#" class="button-link btn btn-action btn-md" data-target="#findClientModal" data-toggle="modal">Select Client</a></div><div class="form-group rmpm"><input type="hidden" ng-model="$ctrl.po.vendor.id"><label class="label capitalize-text">Code</label><input type="text" ng-model="$ctrl.so.client.code" class="form-control -border"></div></div><div class="side-two"><div class="form-group"><label class="label capitalize-text">Name</label><input type="text" ng-model="$ctrl.so.client.name" class="form-control -border"></div></div></div><div class="step-form"><div class="horizontal-align -between"><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Prepared By</label><input type="hidden" ng-model="$ctrl.so.requestedBy"> <input type="text" class="form-control -border" readonly="readonly" value="{{$ctrl.so.preparedBy.firstName}} {{$ctrl.so.preparedBy.lastName}}"></div></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Requested By</label><input type="hidden" ng-model="$ctrl.so.requestedBy"> <input type="text" class="form-control -border" readonly="readonly" value="{{$ctrl.so.requestedBy.firstName}} {{$ctrl.so.requestedBy.lastName}}"></div></div></div></div><div class="side-two"><div class="form-group"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Checked By</label><input type="hidden" ng-model="$ctrl.so.requestedBy"> <input type="text" class="form-control -border" readonly="readonly" value="{{$ctrl.so.checkedBy.firstName}} {{$ctrl.so.checkedBy.lastName}}"></div></div></div></div></div></div><table class="table table-list"><thead><tr><th>Code</th><th>FG</th><th>Stock on Hand</th><th>Quantity</th><th>Remaining</th><th>Unit Price</th><th>Amount</th></tr></thead><tbody><tr ng-repeat="i in $ctrl.so.products" ng-class="{highlightred: i.quantity < 0 }"><td>{{i.finishedGood.code}}</td><td>{{i.finishedGood.name}}</td><td>{{i.sum}}</td><td><input ng-change="$ctrl.computeTotalAmount(i.quantity * i.unitPrice, $index)" type="number" ng-model="i.quantity" required></td><td>{{i.sum - i.quantity}}</td><td><input ng-change="$ctrl.computeTotalAmount(i.quantity * i.unitPrice, $index)" type="number" ng-model="i.unitPrice" required></td><td>{{i.quantity * i.unitPrice}}</td></tr></tbody><tfoot><tr><th></th><th></th><th></th><th></th><th>Total Amount</th><th>{{$ctrl.so.totalAmount.toFixed(2)}}</th></tr></tfoot></table><div class="request-action"><a href="#" class="button-link btn btn-action btn-md" ng-click="$ctrl.findProduct()">Select Item</a></div><div class="step-form"><div class="horizontal-align -between"><div class="side-one"><div class="horizontal-align -between content"><div class="form-group field"><label class="label capitalize-text">Remarks</label><textarea type="text" class="form-control -border" ng-model="$ctrl.so.remarks"></textarea></div></div></div></div></div><div class="request-action"><button type="submit" class="btn btn-create btn-md">{{$ctrl.button}}</button></div></div></div></form><find-fg-inventory-modal fglist="$ctrl.so.products" fglistview="$ctrl.fglistview" message="{{ $ctrl.error }}"></find-fg-inventory-modal><find-client-modal client="$ctrl.so.client" message="{{ $ctrl.error }}" button="Select Client"></find-client-modal>');
$templateCache.put('./sales-order-new.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Sales Order Forms</h3></div></div><header class="header-form"><a href="/admin/sales/sales-order" class="btn btn-back back"><i class="ion-ios-arrow-thin-left"></i> <span>Back</span> </a><span class="divider"></span><h3 class="heading">New Sales Order Form</h3></header><sales-order-form so="$ctrl.so" message="{{ $ctrl.error }}" button="Create Sales Order" on-submit="$ctrl.createSalesOrder($event);"></sales-order-form>');
$templateCache.put('./sales-orders.html','<div class="main-header"><div class="horizontal-align -between content"><h3 class="title">Sales Order Forms</h3></div><a href="#" ng-click="$ctrl.createNewSalesOrder($event);" class="btn btn-create btn-md button-link">Create New SO</a></div><div class="client-pris"><div class="search-box horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="PRIS No" type="text" name="search" ng-model="$ctrl.searchNumber"> <input class="form-control -borderless search" placeholder="Date" type="text" name="search" ng-model="$ctrl.searchDate"></div></div><div class="search-box horizontal-align -between"><select class="form-control select" ng-model="$ctrl.userAssignedDepot.id" ng-change="$ctrl.selectDepot()" ng-options="d.id as d.name for d in $ctrl.userAssignedDepots" name="fromDepots"></select></div><table ng-if="$ctrl.salesOrders" class="table table-list"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'date\';$ctrl.sortReverse = !$ctrl.sortReverse;">SO Date <span ng-show="$ctrl.sortType == \'date\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'date\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'number\';$ctrl.sortReverse = !$ctrl.sortReverse;">SO No <span ng-show="$ctrl.sortType == \'number\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'number\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'preparedBy\';$ctrl.sortReverse = !$ctrl.sortReverse;">Prepared By <span ng-show="$ctrl.sortType == \'preparedBy\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'preparedBy\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th><a href="#" ng-click="$ctrl.sortType = \'status\';$ctrl.sortReverse = !$ctrl.sortReverse;">Status <span ng-show="$ctrl.sortType == \'status\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'status\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th></th></tr></thead><tbody><tr ng-repeat="salesOrder in $ctrl.salesOrders | filter: {date: $ctrl.searchDate, number: $ctrl.searchNumber} | orderBy:$ctrl.sortType:$ctrl.sortReverse"><td>{{salesOrder.date | date}}</td><td>{{salesOrder.number}}</td><td>{{salesOrder.preparedBy.firstName}} {{salesOrder.preparedBy.lastName}}</td><td>{{salesOrder.status}}</td><td ng-if="salesOrder.status != \'Cancelled\'" class="tablebutton-form"><div class="holder"><button class="btn btn-compose"><i class="ion-ios-compose-outline" ng-click="$ctrl.openModal(salesOrder)"></i></button></div></td><td ng-if="salesOrder.status == \'Cancelled\'" class="tablebutton-form"><div class="holder"><button class="btn btn-compose"><i class="ion-ios-compose-outline" ng-click="$ctrl.openModal(salesOrder)"></i></button></div></td></tr></tbody></table><view-so-modal so="$ctrl.so" cancelreqs="$ctrl.cancelreqs"></view-so-modal>');
$templateCache.put('./find-approved-item-modal.html','<div class="modal fade" id="findApprovedItemModal"><div class="modal-dialog -bg"><div class="modal-content"><div class="modal-header"><h4 class="modal-title">Find Control Number</h4><button class="close" data-dismiss="modal" type="button"></button></div><div class="modal-body"><div class="search-box horizontal-align -between"><div class="search-modal horizontal-align -between"><div class="input-group-addon" style="border: 0\t !important"><i class="fa fa-search"></i></div><input class="form-control -borderless search" placeholder="Control #" type="text" name="search" ng-model="$ctrl.searchControlNumber"></div></div><div class="wrapper scroll-section"><table class="table table-hover"><thead><tr><th><a href="#" ng-click="$ctrl.sortType = \'controlNumber\';$ctrl.sortReverse = !$ctrl.sortReverse;">Control Number <span ng-show="$ctrl.sortType == \'controlNumber\' && !$ctrl.sortReverse"><i class="fa fa-caret-down"></i> </span><span ng-show="$ctrl.sortType == \'controlNumber\' && $ctrl.sortReverse"><i class="fa fa-caret-up"></i></span></a></th><th>Name</th><th>Code</th><th>Type</th></tr></thead><tbody><tr ng-repeat="approvedItem in $ctrl.approvedItems | filter: {controlNumber: $ctrl.searchControlNumber} | orderBy:$ctrl.sortType:$ctrl.sortReverse" ng-click="$ctrl.getApprovedItem(approvedItem)" data-dismiss="modal"><td>{{approvedItem.controlNumber}}</td><td>{{approvedItem.item.name}}</td><td>{{approvedItem.item.code}}</td><td>{{approvedItem.item.type.name}}</td></tr></tbody></table></div></div></div></div></div>');}]);})(window.angular);