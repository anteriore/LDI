import _ from 'lodash';

export const formatProduct = (rawProducts) => {
  if (rawProducts !== null && rawProducts !== undefined) {
    const newFormat = {
      id: rawProducts.id,
      finishedGoodID: rawProducts.product.finishedGood.id,
      product: rawProducts.product.id,
      code: rawProducts.product.finishedGood,
      finishedGood: rawProducts.product.finishedGood,
      quantity: rawProducts.quantity,
      quantityRequested: 1,
      quantityRemaining: rawProducts.quantity,
      unitPrice: 0.0,
      amount: 0,
    };

    return newFormat;
  }

  return {};
};

export const formatProductCalc = (rawProducts) => {
  const existingProducts = [];
  rawProducts.forEach((product) => {
    existingProducts.push({
      id: product.product.id,
      finishedGoodID: product.finishedGood.id,
      code: product.finishedGood,
      product: product.product.id,
      finishedGood: product.finishedGood,
      quantity: product.quantity,
      quantityRequested: product.quantityRequested,
      quantityRemaining: product.quantityRemaining,
      unitPrice: product.unitPrice,
      amount: product.unitPrice * product.quantityRequested,
    });
  });

  return existingProducts;
};

export const formatPayload = (approvalId, company, value) => {
  let totalAmount = 0.0;
  let totalQuantity = 0;
  let formattedValue = {};

  formattedValue = {
    ...formattedValue,
    company: { id: company },
    date: value.date,
    preparedBy: { id: approvalId },
    checkedBy: { id: approvalId },
    depot: { id: value.depot },
    client: { id: value.client },
    remarks: value.remarks,
    type: value.type,
    status: 'Pending',
    products: [],
  };

  if(value.salesOrderProducts){
    value.salesOrderProducts.forEach((prod) => {
      let newProductValue = {};
      totalAmount += parseFloat(prod.amount);
      totalQuantity += prod.quantity;
      newProductValue = {
        ...newProductValue,
        finishedGood: { id: prod.finishedGood.id },
        product: { id: prod.product },
        quantity: prod.quantity,
        quantityRemaining: prod.quantityRemaining,
        quantityRequested: prod.quantityRequested,
        unitPrice: prod.unitPrice,
        depot: { id: value.depot },
      };
  
      formattedValue.products.push(newProductValue);
    });
  }

  formattedValue = { ...formattedValue, totalAmount, totalQuantity };

  return formattedValue;
};

export const formatDescItems = (items) => {
  let descItems = _.clone(items);
  const indexType = _.findIndex(descItems, {'label': 'Type'});
  let itemType = _.find(descItems, ['label', 'Type']);

  itemType = {...itemType, render: (object) => object };
  descItems.splice(indexType, 1, itemType);

  const addedItems = [
    {
      label: 'Approved By',
      name: 'approvedBy',
      type: 'selectSearch',
      render: (object) => `${object?.firstName ?? ""} ${object?.lastName ?? ""}`,
      readOnly: true,
    },
    {
      label: 'Status',
      name: 'status',
      placeholder: 'AUTOGENERATED UPON CREATION',
      readOnly: true,
    },
  ]

  addedItems.forEach((item) => {
    descItems.splice(-1,0,item)
  });
  
  return descItems;
}

export const calcRqstdQtyPerProduct = (prevData) => {
  const newData = [...prevData];
  let productQuantityList = [];
  _.forEach(newData, (item) => {
    if (!_.find(productQuantityList, ['product', item.product])){
      const { product, quantityRequested} = item;
      productQuantityList = [...productQuantityList, {product, quantityRequested}];
    }else{
      const existing = _.find(productQuantityList, (o) => o.product === item.product);
      productQuantityList.splice(
        _.findIndex(productQuantityList,{product: item.product}), 1,
        {...existing, quantityRequested: existing.quantityRequested 
          + item.quantityRequested}
      )
    }
  });

  _.forEach(newData, (item, index) => {
    const product = _.find(productQuantityList, (o) => o.product === item.product);
    newData[index] = {...item, quantityRemaining: item.quantity - product.quantityRequested};
  })

  return newData
} 