import _ from 'lodash';

export const formatOrderedProducts = (lotProducts, sales) => {
  const orderedProducts = _.filter(sales?.products ?? [], (o) =>
    _.some(lotProducts, { product: { finishedGood: { id: o.finishedGood.id } } })
  );
  const processedData = [];
  orderedProducts.forEach((orderedProduct) => {
    processedData.push({
      ...orderedProduct,
      product: orderedProduct.product.product,
    });
  });

  return processedData;
};

export const formatLotProducts = (sales, inventoryProducts) => {
  const pendingProducts = _.filter(
    sales?.products ?? [],
    (o) => _.toLower(o.status) === 'pending' || _.toLower(o.status) === 'incomplete'
  );

  const lotProducts = _.filter(
    inventoryProducts ?? [],
    (o) => o?.depot?.id !== undefined && sales?.depot?.id !== undefined
  )
    .filter((o) => o.depot.id === sales.depot.id)
    .filter((o) => _.some(pendingProducts, { finishedGood: { id: o.product.finishedGood.id } }))
    .filter((o) => o.quantity !== 0);

  return lotProducts;
};

export const formatSalesInfo = (sales) => {
  if (sales !== null && sales !== undefined) {
    const { product: info } = sales;
    const formatedList = [
      {
        key: 1,
        fgCode: info.finishedGood.code,
        quantity: info.quantity,
        quantityRemaining: info.quantityRemaining,
        unitPrice: info.unitPrice,
        amount: info.unitPrice * info.quantityRequested,
      },
    ];

    return formatedList;
  }

  return null;
};

export const formatPayload = (approvalId, company, value, salesOrder, orderedProducts) => {
  let formattedValue = {};
  formattedValue = {
    ...formattedValue,
    number: value.number,
    date: value.date,
    preparedBy: { id: approvalId },
    checkedBy: { id: approvalId },
    approvedBy: { id: approvalId },
    releasedBy: { id: approvalId },
    salesOrder: { id: value.salesOrder },
    client: { id: salesOrder.client.id },
    company: { id: company },
    depot: { id: salesOrder.depot.id },
    remarks: value.remarks,
    totalAmount: _.sumBy(orderedProducts, (o) => {
      return o.unitPrice * o.quantityRequested;
    }),
    type: 'OS',
    orderedProducts: [],
  };

  orderedProducts.forEach((orderedProduct) => {
    formattedValue.orderedProducts.push({
      product: { id: orderedProduct.product.id },
      quantity: orderedProduct.quantityRequested,
      salesOrderProductId: orderedProduct.id,
      unitPrice: orderedProduct.unitPrice,
      depot: { id: salesOrder.depot.id },
      amount: orderedProduct.quantityRequested * orderedProduct.unitPrice,
    });
  });

  return formattedValue;
};

export const formatDescItems = (items) => {
  const descItems = _.clone(items);

  const addedItems = [
    {
      label: 'Approved By',
      name: 'approvedBy',
      type: 'selectSearch',
      render: (object) =>
        `${object?.firstName ?? ''} ${object?.middleInitial ?? ''} ${object?.lastName ?? ''}`,
      readOnly: true,
    },
    {
      label: 'Total Amount',
      name: 'totalAmount',
      placeholder: '',
      readOnly: true,
    },
    {
      label: 'Remaining Balance',
      name: 'remainingBalance',
      placeholder: '',
      readOnly: true,
    },
    {
      label: 'Status',
      name: 'status',
      placeholder: 'AUTOGENERATED UPON CREATION',
      readOnly: true,
    },
  ];

  addedItems.forEach((item) => {
    descItems.splice(-1, 0, item);
  });

  return descItems;
};
