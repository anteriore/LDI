import React from 'react';
import { useSelector } from 'react-redux';
import { Table, Typography } from 'antd';

const { Text } = Typography;

export const columns = [
  {
    title: 'PO Number',
    dataIndex: 'number',
    key: 'number',
    datatype: 'string',
  },
  {
    title: 'Vendor',
    dataIndex: 'vendor',
    key: 'vendor',
    datatype: 'string',
    render: (object) => object.name,
    sorter: (a, b) => a.vendor.name.localeCompare(b.vendor.name),
  },
  {
    title: 'Department',
    dataIndex: 'department',
    key: 'department',
    datatype: 'string',
    render: (object) => object.name,
    sorter: (a, b) => a.department.name.localeCompare(b.department.name),
  },
  {
    title: 'Due Date',
    dataIndex: 'dueDate',
    key: 'dueDate',
    datatype: 'date',
  },
  {
    title: 'Total Amount',
    dataIndex: 'totalAmount',
    key: 'totalAmount',
    datatype: 'number',
  },
  {
    title: 'Status',
    dataIndex: 'status',
    key: 'status',
    datatype: 'string',
  },
];

const FormDetails = () => {
  const vendors = useSelector((state) => state.maintenance.vendors.list)
  const departments = useSelector((state) => state.maintenance.departmentArea.deptList)
  const areas = useSelector((state) => state.maintenance.departmentArea.areaList)
  const units = useSelector((state) => state.maintenance.units.unitList)

  const formDetail = {
    form_name: 'depot',
    form_items: [
      {
        label: 'PO Number',
        name: 'number',
        placeholder: 'AUTOGENERATED UPON CREATION',
        readOnly: true
      },
      {
        label: 'Date',
        name: 'date',
        type: 'date',
        rules: [{ required: true }]
      },
      {
        label: 'Vendor',
        name: 'vendor',
        type: 'select',
        choices: vendors,
        render: vendor => `[${vendor.code}] ${vendor.name}`,
        rules: [{ required: true }],
      },
      {
        label: 'Department',
        name: 'department',
        type: 'select',
        choices: departments,
        rules: [{ required: true }],
      },
      {
        label: 'Area',
        name: 'area',
        type: 'select',
        choices: areas,
        rules: [{ required: true }],
      },
      {
        label: 'Currency',
        name: 'currency',
        rules: [{ required: true, message: 'Please provide a valid currency' }],
        placeholder: 'Currency',
      },
      {
        label: 'Terms',
        name: 'terms',
        type: 'number',
        rules: [{ required: true, message: 'Please provide a valid term'}],
        min: 0,
        placeholder: 'Terms',
      },
      {
        label: 'Job Order Number',
        name: 'jobOrderNo',
        rules: [{ message: 'Please provide a valid Job Order Number' }],
        placeholder: 'Job Order Number',
      },
      {
        label: 'Due Date',
        name: 'dueDate',
        type: 'date',
        rules: [{ required: true }]
      },
      {
        label: 'Deliver To',
        name: 'deliverTo',
        rules: [{ required: true, message: 'Please provide a valid value for the delivery' }],
        placeholder: 'Deliver To',
      },
      {
        label: 'Ordered Items',
        name: 'orderedItems',
        key: 'id',
        type: 'table',
        rules: [{ required: true }],
        fields: [
          {
            label: 'PRF Number',
            name: 'prfNumber'
          },
          {
            label: 'Requested Item',
            name: 'requestedItemId',
            type: 'hiddenNumber'
          },
          {
            label: 'Item',
            name: 'item',
            render: (object) => object.item.name
          },
          {
            label: 'Quantity',
            name: 'quantity',
            type: 'number',
            rules: [{ required: true }],
          },
          {
            label: 'Unit',
            name: 'unit',
            type: 'select',
            choices: units,
            rules: [{ required: true }],
          },
          {
            label: 'Unit Price',
            name: 'unitPrice',
            type: 'number',
            rules: [{ required: true }],
          },
          {
            label: 'Amount',
            name: 'amount',
            render: (object) => object.quantity * object.unitPrice
          },
        ],
        summary: (data) => {
          let totalAmount = 0;
  
          data.forEach(({ amount }) => {
            totalAmount += amount;
          });
  
          return (
              <Table.Summary.Row>
                <Table.Summary.Cell>Total Amount</Table.Summary.Cell>
                <Table.Summary.Cell>
                  <Text>{totalAmount}</Text>
                </Table.Summary.Cell>
              </Table.Summary.Row>
          );
        }
        
      },
      {
        label: 'VAT (Percentage)',
        name: 'vat',
        type: 'number',
        rules: [{ required: true, message: 'Please provide a valid value for VAT'}],
        min: 0,
        max: 100,
        placeholder: 'VAT',
      },
      {
        label: 'Remarks',
        name: 'remarks',
        type: 'textArea',
        rules: [{ required: true, message: 'Please provide a valid remark' }],
        placeholder: 'Remarks',
      },
    ],
  };

  return formDetail

}

export default FormDetails