import { useState } from 'react';
import { useSelector } from 'react-redux';
import moment from 'moment';

export const columns = [
  {
    title: 'MRIS Number',
    dataIndex: 'number',
    key: 'number',
    datatype: 'string',
  },
  {
    title: 'Date',
    dataIndex: 'date',
    key: 'date',
    datatype: 'date',
  },
  {
    title: 'Type',
    dataIndex: 'type',
    key: 'type',
    datatype: 'string',
  },
  {
    title: 'Requested By',
    dataIndex: 'requestedBy',
    key: 'requestedBy',
    datatype: 'object',
    dataToString: (object) => {
      return `${object.firstName} ${object.lastName}`;
    },
  },
];

const FormDetails = () => {
  const inventories = useSelector((state) => state.dashboard.inventory.list);
  const [classifications, setClassifications] = useState([
    {
      id: 'RETURN',
      code: 'Return',
      name: 'Return',
    },
    {
      id: 'ADJUSTMENT',
      code: 'Adjustment',
      name: 'Adjustment',
    },
  ]); // hard coded assuming that editing inventory movements is not possible and the default value for type is always "IN"

  const formDetails = {
    form_name: 'inventory_movement',
    form_items: [
      {
        label: 'MRIS Number',
        name: 'number',
        placeholder: 'AUTOGENERATED UPON CREATION',
        readOnly: true,
      },
      {
        label: 'Date',
        name: 'date',
        type: 'date',
        rules: [{ required: true }],
      },
      {
        label: 'Type',
        name: 'type',
        type: 'radioGroup',
        selectName: 'name',
        initialValue: 'IN',
        choices: [
          {
            id: 'IN',
            name: 'IN',
          },
          {
            id: 'OUT',
            name: 'OUT',
          },
        ],
        onChange: (e) => {
          if (e.target.value === 'IN') {
            setClassifications([
              {
                id: 'RETURN',
                code: 'RETURN',
                name: 'Return',
              },
              {
                id: 'ADJUSTMENT',
                code: 'ADJUSTMENT',
                name: 'Adjustment',
              },
            ]);
          } else if (e.target.value === 'OUT') {
            setClassifications([
              {
                id: 'EXPIRED',
                code: 'EXPIRED',
                name: 'Expired',
              },
              {
                id: 'ADJUSTMENT',
                code: 'ADJUSTMENT',
                name: 'Adjustment',
              },
              {
                id: 'MO',
                code: 'MO',
                name: 'MO',
              },
            ]);
          }
        },
        rules: [{ required: true }],
      },
      {
        label: 'Classification',
        name: 'classification',
        type: 'select',
        selectName: 'name',
        choices: classifications,
        allowEmpty: true,
        rules: [{ required: true, message: 'Please select a valid classification' }],
      },
      {
        label: 'MO Number',
        name: 'moNumber',
        rules: [{ required: true, message: 'Please provide a valid MO number' }],
        placeholder: 'MO Number',
      },
      {
        label: 'Remarks',
        name: 'remarks',
        type: 'textArea',
        rules: [{ message: 'Please provide a valid remark' }],
        placeholder: 'Remarks',
      },
    ],
  };

  const tableDetails = {
    label: 'Inventory List',
    name: 'inventory',
    key: 'inventory',
    rules: [{ required: true }],
    isVisible: inventories.length > 0,
    fields: [
      {
        label: 'Control Number',
        name: 'controlNumber',
      },
      {
        label: 'Item',
        name: 'item',
        render: (object) => {
          return `[${object.item.code}] ${object.item.name}`;
        },
      },
      {
        label: 'Stock on Hand',
        name: 'stockOnHand',
        type: 'readOnly',
      },
      {
        label: 'Quantity',
        name: 'quantity',
        type: 'number',
        rules: [{ required: true }],
        min: 0,
      },
      {
        label: 'Quantity Remaining',
        name: 'quantityRemaining',
        render: (object) => {
          if (object.stockOnHand !== null && typeof object.stockOnHand !== 'undefined') {
            return object.stockOnHand - object.quantity || object.stockOnHand;
          }
        },
      },
    ],
    foreignKey: 'id',
    selectedKey: 'id',
    selectData: inventories, // to be provided in the InputForm
    selectFields: [
      {
        title: 'Control Number',
        dataIndex: 'controlNumber',
        key: 'controlNumber',
      },
      {
        title: 'Date Created',
        dataIndex: 'dateCreated',
        key: 'dateCreated',
        render: (object) => {
          return moment(new Date(object)).format('DD/MM/YYYY');
        },
      },
      {
        title: 'Item',
        dataIndex: 'item',
        key: 'item',
        render: (object) => {
          return `[${object.code}] ${object.name}`;
        },
      },
      {
        title: 'Expiration',
        dataIndex: 'expiration',
        key: 'expiration',
        render: (object) => {
          return moment(new Date(object)).format('DD/MM/YYYY');
        },
      },
      {
        title: 'Stock',
        dataIndex: 'quantity',
        key: 'quantity',
      },
    ],
    getValues: (values) => {
      const products = [];
      values.returnSlipProducts.forEach((product) => {
        products.push({
          ...product,
        });
      });
      return products;
    },
    processData: (data) => {
      const processedData = {
        ...data,
        stockOnHand: data.quantity,
      };
      delete processedData.quantity;
      return processedData;
    },
    checkSelected: (selectedData, rowData) => {
      if (
        typeof selectedData !== 'undefined' &&
        selectedData !== null &&
        selectedData.some((item) => item.key === rowData.id)
      ) {
        return true;
      }
    },
    renderTableColumns: (fields) => {
      const columns = [];
      fields.forEach((field) => {
        if (typeof field.render === 'undefined' || field.render === null) {
          field.render = (object) => object[field.name];
        }
        if (field.name !== 'stockOnHand' && field.name !== 'quantityRemaining') {
          columns.push({
            title: field.label,
            key: field.name,
            render: (object) => field.render(object),
          });
        }
      });

      return columns;
    },
  };

  return { formDetails, tableDetails };
};

export default FormDetails;
