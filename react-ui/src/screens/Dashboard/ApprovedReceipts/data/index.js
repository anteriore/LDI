import { useState } from 'react';
import { useSelector } from 'react-redux';

export const DisplayDetails = () => {
    const columns = [
        {
            title: 'A.R. No',
            dataIndex: 'number',
            key: 'rrNum',
            align: 'center',
            defaultSortOrder: 'ascend',
            sorter: (a, b) => a.number.length - b.number.length,
        },
        {
            title: 'R.R. No',
            dataIndex: 'receivingReceipt',
            key: 'receivingReceipt',
            align: 'center',
            defaultSortOrder: 'ascend',
            datatype: 'object',
            dataToString: (object) => {
                return object.number
            }
        },
        {
            title: 'Material Type',
            dataIndex: 'item',
            key: 'itemType',
            align: 'center',
            defaultSortOrder: 'ascend',
            datatype: 'object',
            dataToString: (object) => {
                return object.type.name
            }
        },
        {
            title: 'Total Items',
            dataIndex: 'totalQuantity',
            key: 'totalQuantity',
            align: 'center',
            defaultSortOrder: 'ascend',
            sorter: (a, b) => a.number.length - b.number.length,
        },
        {
            title: 'Control Number',
            dataIndex: 'controlNumber',
            key: 'controlNumber',
            align: 'center',
            defaultSortOrder: 'ascend',
            sorter: (a, b) => a.number.length - b.number.length,
        },
        {
            title: 'DR/SI',
            dataIndex: 'receivingReceipt',
            key: 'drSI',
            align: 'center',
            defaultSortOrder: 'ascend',
            datatype: 'object',
            dataToString: (object) => {
                return `${object.drNumber}/${object.siNumber}`
            }
        },
    ];

  return { columns };
};

export const FormDetails = () => {

    const [displayModal, setDisplayModal] = useState(false);
    const rrList = useSelector((state) => state.dashboard.receivingReceipts.list);
    const itemList = useSelector((state) => state.maintenance.items.list);

    const formDetails = {
        form_name: 'approvedReceipts',
        form_items: [
            {
                label: 'A.R. No.',
                name: 'number',
                placeholder: 'AUTOGENERATED UPON CREATION',
                readOnly: true,
            },
            {
                label: 'R.R. No',
                name: 'receivingReceipt',
                type: 'selectSearch',
                selectName: 'name',
                choices: rrList,
                render: (object) => object.number,
                rules: [{ required: true }],
            },
            {
                label: 'Date',
                name: 'date',
                type: 'date',
                rules: [{ required: true, message: 'Please select a date' }],
            },
            {
                label: 'Received By',
                name: 'receivedBy',
                rules: [{ required: true, message: 'Please login a valid user' }],
                placeholder: '',
                type: 'readOnly',
                writeOnly: true,
            },
            {
                label: 'Control Number',
                name: 'controlNumber',
                rules: [{ required: true, message: 'Please provide a valid Control Number' }],
                placeholder: 'Control Number',
            },
            {
                label: 'Max Containers',
                name: 'maxContainers',
                type: 'number',
                min: 0,
                rules: [{ required: true, message: 'Please provide a valid Max Containers' }],
                placeholder: 'Max Containers',
            },
            {
                label: 'Specified Gravity',
                name: 'specifiedGravity',
                type: 'number',
                min: 0,
                rules: [{ required: true, message: 'Please provide a valid Specified Gravity' }],
                placeholder: 'Specified Gravity',
            },
            {
                label: 'Date Created',
                name: 'dateCreated',
                type: 'date',
                rules: [{ required: true, message: 'Please select a date' }],
            },
            {
                label: 'Date Modified',
                name: 'modified',
                type: 'date',
                rules: [{ required: true, message: 'Please select a date' }],
            },
        ],

        /*rr_details: [
            {
                label: 'Receiving Receipt',
                name: 'receivingReceipt',
                type: 'selectTable',
                rules: [{ required: true }],
                allowEmpty: true,
                placeholder: 'Select Receiving Receipt',
                displayModal,
                setDisplayModal,
                dataSource: rrList,
                columns: [
                    {
                        label: 'RR ID',
                        name: 'id',
                        type: 'hidden',
                    },
                    {
                        label: 'R.R. Num',
                        dataIndex: 'number',
                        key: 'number',
                    },
                    {
                        label: 'Date',
                        dataIndex: 'date',
                        key: 'date',
                    },
                    {
                        title: 'Status',
                        dataIndex: 'status',
                        key: 'status',
                    },
                ],
                rowKey: 'id',
                getValueProps: (value) => {
                    if (typeof value !== 'undefined') {
                        return { value };
                    }
                },
            },
        ],*/

        rr_item: [
            {
                label: 'R.R. Item',
                name: 'item',
                type: 'selectTable',
                rules: [{ required: true }],
                allowEmpty: true,
                placeholder: 'Select R.R. Item',
                displayModal,
                setDisplayModal,
                dataSource: itemList,
                columns: [
                    {
                        label: 'RR Item ID',
                        name: 'id',
                        type: 'hidden',
                    },
                    {
                        title: 'Item',
                        dataIndex: 'item',
                        key: 'item',
                        render: (object) => `[${object.code}] ${object.name}`,
                    },
                    {
                        title: 'Material Type',
                        dataIndex: 'item',
                        key: 'type',
                        render: (object) => `[${object.type.code}] ${object.type.name}`,
                    },
                    /*{
                        title: 'Quantity',
                        dataIndex: 'quantity',
                        key: 'quantity',
                    },*/
                    {
                        title: 'Unit',
                        dataIndex: 'item',
                        key: 'unit',
                        render: (object) => object.unit.code,
                    },
                ],
                rowKey: 'id',
                getValueProps: (value) => {
                    if (typeof value !== 'undefined') {
                        return { value };
                    }
                },
                emptyText:
                  'No data retrieved for R.R. items in the selected Receiving Receipt. Please select another Receiving Receipt.',
            },
        ],

        item_details: [
            {
                label: 'Received Quantity',
                type: 'number',
                name: 'receivedQuantity',
                min: 0,
                rules: [{ required: true, message: 'Please input a valid quantity' }],
            },
            {
                label: 'Approved Quantity',
                type: 'number',
                name: 'approvedQuantity',
                min: 0,
                rules: [{ required: true, message: 'Please input a valid quantity' }],
            },
            {
                label: 'Rejected Quantity',
                type: 'number',
                name: 'rejectedQuantity',
                min: 0,
                rules: [{ required: true, message: 'Please input a valid quantity' }],
            },
            {
                label: 'QC Samples',
                type: 'number',
                name: 'qcSamples',
                min: 0,
                rules: [{ required: true, message: 'Please input a valid quantity' }],
            },
            {
                label: 'Total Quantity',
                type: 'number',
                name: 'totalQuantity',
                min: 0,
                rules: [{ required: true, message: 'Please input a valid quantity' }],
            },
            {
                label: 'Expiration',
                name: 'expiration',
                type: 'date',
                rules: [{ required: true, message: 'Please select an expiration date' }],
            },
            {
                label: 'Best Before',
                name: 'bestBefore',
                type: 'date',
                rules: [{ required: true, message: 'Please select an best before date' }],
            },
            {
                label: 'Re-eval',
                name: 'reevaluation',
                type: 'date',
                rules: [{ required: true, message: 'Please select a reevaluation date' }],
            },
            {
                label: 'Re-test',
                name: 'retest',
                type: 'date',
                rules: [{ required: true, message: 'Please select a retest date' }],
            },
            {
                label: 'Remarks',
                name: 'remarks',
                rules: [{}],
                placeholder: 'Remarks (optional)',
                type: 'textArea',
            },
        ],

        processData: (data) => {
        const processedData = [];
    
        data.receivedItems.forEach((rrItem) => {
            processedData.push({
            id: rrItem.id,
            item: rrItem.item.id,
            quantity: rrItem.quantity,
            unit: rrItem.unit.id,   
            });
        });
    
        return processedData;
        },
    };
  return { formDetails };
};
