import React, { useState, useEffect, useLayoutEffect } from 'react';
import { Row, Col, Typography, Form, Input, Button, DatePicker, message, Modal, Table, Empty, Skeleton } from 'antd';
import { useParams, useHistory } from "react-router-dom";
import { useDispatch, useSelector } from 'react-redux';
import moment from 'moment';

const { Title } = Typography;
const dateFormat = 'YYYY/MM/DD';

const InputForm = (props) => {
    const [displayModal, setDisplayModal] = useState(false);
    const [displayData, setDisplayData] = useState(null);
    const [isLoading, setLoading] = useState(true)

    const [columns, setColumns] = useState([
        {
            title: 'Type',
            dataIndex: 'type',
            key: 'type',   
        },
        {
            title: 'Code',
            dataIndex: 'code',
            key: 'code',   
        },
        {
            title: 'Name',
            dataIndex: 'name',
            key: 'name',   
        },
        {
            title: 'Unit',
            dataIndex: 'unit',
            key: 'unit',   
        },
        {
            title: 'Current Stocks',
            dataIndex: 'stocks',
            key: 'stocks',   
        },
        {
            title: 'Pending PR',
            dataIndex: 'purchase_request',
            key: 'purchase_request',   
        },
        {
            title: 'Pending PO',
            dataIndex: 'purchase_order',
            key: 'purchase_order',   
        },
        {
            title: 'Quarantined',
            dataIndex: 'quarantined',
            key: 'quarantined',   
        }
    ])

    const data = useSelector(state => state.dashboard.purchaseRequests.itemData)

    const { id } = useParams();
    const dispatch = useDispatch()
    const history = useHistory();

    useEffect(() => {
        if(typeof(id) !== 'undefined' && id != null){
            dispatch(props.get({id: id})).then((response) => {
                setLoading(false)
            })
        }
        else{
            setLoading(false)
        }
        return function cleanup() {
            dispatch(props.resetItemData())
        };
    }, []);
    
    const onFinish = (values) => {
        console.log('Success:', values);

        //save data to database

        message.success('Successfully saved')
        history.goBack()
    };
    
    const onFinishFailed = (errorInfo) => {
        console.log('Failed:', errorInfo);
    };

    const renderColumns = (field) => {
        var filteredColumn = columns.slice()
        const inputColumn = [
            {
                title: 'Requested',
                key: 'requested',
                render: row => {
                    return (
                        <Form.Item
                            {...field}
                            name={[field.name, 'requested']}
                            fieldKey={[field.fieldKey, 'requested']}
                            rules={[{ required: true }]}
                        >
                            <Input/>
                        </Form.Item>
                    );
                }
            }
        ]

        filteredColumn = filteredColumn.concat(inputColumn)

        return (filteredColumn)
    }

    const selectItems = () => {
        setDisplayModal(true)
    }

    const closeModal = () => {
        setDisplayModal(false)
        setDisplayData(null)
    }

    return (
        <>
            <Row><Title level={3}>{props.title}</Title></Row>
            <Row>
                <Col span={20}>
                    {
                        isLoading ? (
                            <Skeleton />
                        )
                        : (
                        <Form
                            {...styles.layout}
                            name="form"
                            onFinish={onFinish}
                            onFinishFailed={onFinishFailed}    
                        >
                            <Form.Item
                                label="PRF Number"
                                name="number"
                                initialValue={data === null ? ("AUTOGENERATED UPON CREATION.") : (data.number)}
                            >
                                <Input 
                                    disabled={true}
                                />
                            </Form.Item>

                            <Form.Item
                                label="PRF Date"
                                name="date"
                                rules={[{ required: true }]}
                                initialValue={ data === null ? (moment()) : (moment(new Date(data.date)))} 
                            >
                                <DatePicker 
                                    format={dateFormat} 
                                    style={styles.datePicker}
                                />
                            </Form.Item>

                            <Form.Item
                                label="Date Needed"
                                name="dateNeeded"
                                rules={[{ required: true }]}
                                initialValue={ data === null ? (moment()) : (moment(new Date(data.dateNeeded)))}
                            >
                                <DatePicker  
                                    format={dateFormat} 
                                    style={styles.datePicker}
                                />
                            </Form.Item>

                            <Form.Item
                                label="Department"
                                name="department"
                                rules={[{ required: true }]}
                                {...data && { initialValue: data.department }}
                            >
                                <Input/>
                            </Form.Item>
                            
                            <Form.List
                                label="Items"
                                name="items"
                                rules={[{ required: true }]}
                            >
                                {(fields, { add, remove }, { errors }) => (
                                    <Col span={20} offset={1}>
                                        <Table
                                            dataSource={data !== null ? (data.requestedItems) : ([])}
                                            columns={renderColumns(fields)}
                                            pagination={false}
                                            locale={{emptyText: <Empty description={"No Item Seleted."}/>}} 
                                        />
                                        <Form.ErrorList errors={errors} />
                                    </Col>
                                )}
                            </Form.List>
                            <Form.Item  style={styles.tailLayout}>
                                <Button
                                onClick={() => {
                                    console.log(selectItems())
                                }}
                                style={{ width: "40%", float: "right" }}
                                >
                                    Select item(s)
                                </Button>
                            </Form.Item>
                            
                            <Form.Item
                                label="Remarks"
                                name="remarks"
                                rules={[{ required: true }]}
                                {...data && { initialValue: data.remarks }}
                            >
                                <Input.TextArea/>
                            </Form.Item>
                            <div style={styles.tailLayout}>
                                <Button type="primary" htmlType="submit">
                                    Submit
                                </Button>
                                <Button style={{marginRight: "3%"}} onClick={() => {history.goBack()}}>
                                    Cancel
                                </Button>
                            </div>

                        </Form>
                    )}
                </Col>
            </Row>

            <Modal
                title={ "Select Items" }
                visible={displayModal}
                onOk={closeModal}
                onCancel={closeModal}
                width={1000}
                >
                <p>Some contents...</p>
                <p>Some contents...</p>
                <p>Some contents...</p>
            </Modal>

        </>
    )
}

export default InputForm

const styles = {
    layout: {
        labelCol: { 
            span: 6 
        },
        wrapperCol: { 
            span: 15 
        },
    },
    tailLayout: {
        display: "flex",
        flexDirection: "row-reverse",
        width: "87.5%"
        
    },
    datePicker: {
        float: "left"
    }
}