
import { useSelector } from 'react-redux';
import Helper from '../helpers'

export const DisplayDetails = () => {
    const departments = useSelector((state) => state.maintenance.departmentArea.deptList);

    const columns = [
        {
        title: 'PRF Number',
        dataIndex: 'number',
        key: 'number',
        sorter: (a, b) => a.id - b.id,
        },
        {
        title: 'PRF Date',
        dataIndex: 'date',
        key: 'date',
        datatype: 'date',
        },
        {
        title: 'Date Needed',
        dataIndex: 'dateNeeded',
        key: 'dateNeeded',
        datatype: 'date',
        },
        {
        title: 'Department',
        dataIndex: 'department',
        key: 'department',
        filters: departments,
        filterKey: 'name',
        },
        {
        title: 'Status',
        dataIndex: 'status',
        key: 'status',
        datatype: 'string',
        },
    ];

    const itemColumns = [
        {
        title: 'Type',
        dataIndex: 'type',
        key: 'type',
        render: (object) => object.name,
        },
        {
        title: 'Code',
        dataIndex: 'code',
        key: 'code',
        },
        {
        title: 'Name',
        dataIndex: 'name',
        key: 'name',
        },
        {
        title: 'Unit',
        dataIndex: 'unit',
        key: 'unit',
        render: (object) => object.name,
        },
        {
        title: 'Current Stocks',
        dataIndex: 'stocks',
        key: 'stocks',
        },
        {
        title: 'Quantity Requested',
        dataIndex: 'quantityRequested',
        key: 'quantityRequested',
        },
    ];

    return { columns, itemColumns };

}

export const FormDetails = () => {
    const items = useSelector((state) => state.maintenance.items.list); 
    const departments = useSelector((state) => state.maintenance.departmentArea.deptList);
    
    const helper = Helper()

    const itemData = helper.processItemSummaryData(items)
    
    const formDetails = {
      form_name: 'purchase_request',
      form_items: [
        {
          label: 'PRF Numbe',
          name: 'number',
          placeholder: 'AUTOGENERATED UPON CREATION',
          readOnly: true,
        },
        {
          label: 'PRF Date',
          name: 'date',
          type: 'date',
          rules: [{ required: true }],
        },
        {
          label: 'Date Needed',
          name: 'dateNeeded',
          type: 'date',
          rules: [{ required: true }],
        },
        {
          label: 'Department',
          name: 'department',
          type: 'selectSearch',
          selectName: 'name',
          choices: departments,
          render: (department) => `[${department.code}] ${department.name}`,
          rules: [{ required: true }],
        },
        {
          label: 'Remarks',
          name: 'remarks',
          type: 'textArea',
          rules: [{ message: 'Please provide a valid remark' }],
          placeholder: 'Remarks',
        },
      ],
    };
  
    const tableDetails = {
        label: 'Requested Items',
        name: 'requestedItems',
        key: 'id',
        rules: [{ required: true }],
        fields: [
            {
                label: 'Item Name',
                name: 'name',
            },
            {
                label: 'Code',
                name: 'code',
            },
            {
                label: 'Type',
                name: 'type',
                render: (object) => object.name,
            },
            {
                label: 'Unit of Measurement',
                name: 'unit',
                render: (object) => object.name,
            },
            /*
            {
                title: 'Current Stocks',
                dataIndex: 'stocks',
                key: 'stocks',   
            },
            {
                title: 'Pending PR',
                dataIndex: 'purchase_request',
                key: 'purchase_request',   
            },
            {
                title: 'Pending PO',
                dataIndex: 'purchase_order',
                key: 'purchase_order',   
            },
            {
                title: 'Quarantined',
                dataIndex: 'quarantined',
                key: 'quarantined',   
            }
            */
            {
                label: 'Quantity Requested',
                name: 'quantityRequested',
                type: 'number',
                rules: [{ required: true }],
                min: 0,
            },
        ],
        foreignKey: 'id',
        selectedKey: 'id',
        selectData: itemData,
        selectFields: [
            {
                title: 'Item Name',
                dataIndex: 'name',
                key: 'name',
            },
            {
                title: 'Code',
                dataIndex: 'code',
                key: 'code',
            },
            {
                title: 'Type',
                dataIndex: 'type',
                key: 'type',
                render: (object) => object.name,
            },
            {
                title: 'Unit of Measurement',
                dataIndex: 'unit',
                key: 'unit',
                render: (object) => object.name,
            },
            {
                title: 'PRF Quantity',
                dataIndex: 'requestedQuantity',
                key: 'requestedQuantity',
            },
            {
                title: 'PO Quantity',
                dataIndex: 'orderedQuantity',
                key: 'orderedQuantity',
            },
        ],
        getValues: (values) => {
            const payments = [];
            values.payments.forEach((payment) => {
                payments.push({
                ...payment.reference,
                appliedAmount: payment.appliedAmount,
                });
            });
            return payments;
        },
        processData: (data) => {
            return data
        },
        checkSelected: (selectedData, rowData) => {
            if (
                typeof selectedData !== 'undefined' &&
                selectedData !== null &&
                selectedData.some((item) => item.id === rowData.id)
            ) {
                return true;
            }
        },
    };
  
    return { formDetails, tableDetails };
  };