import { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import moment from 'moment';

import { listFGIssuanceByDepot, clearData as clearFGIS } from '../../FGIssuances/redux';

export const columns = [
  {
    title: 'FG-RS Number',
    dataIndex: 'prsNo',
    key: 'prsNo',
    datatype: 'string',
  },
  {
    title: 'Date',
    dataIndex: 'date',
    key: 'date',
    datatype: 'date',
  },
  {
    title: 'Received By',
    dataIndex: 'receivedBy',
    key: 'receivedBy',
    datatype: 'object',
    dataToString: (object) => {
      return `${object.firstName} ${object.lastName}`;
    },
  },
  {
    title: 'Shipped From',
    dataIndex: 'depot',
    key: 'depot',
    datatype: 'object',
    dataToString: (object) => {
      return `[${object.code}] ${object.name}`;
    },
  },
];

const FormDetails = () => {
  const dispatch = useDispatch();
  const depots = useSelector((state) => state.maintenance.depots.list);
  const company = useSelector((state) => state.company.selectedCompany);
  const FGISList = useSelector((state) => state.dashboard.FGIssuances.list);
  const [displayModal, setDisplayModal] = useState(false);

  const formDetails = {
    form_name: 'fg_receiving',
    form_items: [
      {
        label: 'FS-RS Number',
        name: 'prsNo',
        placeholder: 'AUTOGENERATED UPON CREATION',
        readOnly: true,
      },
      {
        label: 'Date',
        name: 'date',
        type: 'date',
        rules: [{ required: true }],
      },
      {
        label: 'Depot',
        name: 'depot',
        type: 'selectSearch',
        selectName: 'name',
        choices: depots,
        render: (depot) => `[${depot.code}] ${depot.name}`,
        rules: [{ required: true }],
        onChange: (e) => {
          dispatch(clearFGIS());
          dispatch(listFGIssuanceByDepot({ company, depot: e }));
        },
        tooltip: 'Receiving Depot'
      },
      {
        label: 'FG-IS Number',
        name: 'pis',
        type: 'selectTable',
        rules: [{ required: true }],
        allowEmpty: true,
        placeholder: 'Select FG-IS',
        displayModal,
        setDisplayModal,
        toString: (object) => object.pisNo,
        dataSource: FGISList,
        columns: [
          {
            title: 'FG-IS Number',
            dataIndex: 'pisNo',
            key: 'pisNo',
          },
          {
            title: 'Date',
            dataIndex: 'date',
            key: 'date',
            render: (date) => moment(new Date(date)).format('DD/MM/YYYY'),
          },
          {
            title: 'Ship From',
            dataIndex: 'fromDepot',
            key: 'fromDepot',
            render: (object) => {
              return `[${object.code}] ${object.name}`;
            },
          },
          {
            title: 'Ship To',
            dataIndex: 'toDepot',
            key: 'toDepot',
            render: (object) => {
              return `[${object.code}] ${object.name}`;
            },
          },
          {
            title: 'Requested By',
            dataIndex: 'requestedBy',
            key: 'requestedBy',
            render: (object) => {
              return `${object.firstName} ${object.lastName}`;
            },
          },
        ],
        rowKey: 'id',
        getValueProps: (value) => {
          if (typeof value !== 'undefined' && value !== null) {
            return { value: value.pisNo };
          }
        },
        emptyText:
          'No data retrieved for sales slips in the selected depot. Please select another depot.',
      },
      {
        label: 'Remarks',
        name: 'remarks',
        type: 'textArea',
        rules: [{ message: 'Please provide a valid remark' }],
        placeholder: 'Remarks',
      },
    ],
  };

  const tableDetails = {
    name: 'pis',
    key: 'pis',
    fields: [
      {
        label: 'Lot Number',
        name: 'product',
        render: (object) => {
          return object.product.lotNumber;
        },
      },
      {
        label: 'Finished Good',
        name: 'product',
        render: (object) => {
          return object.product.finishedGood.name;
        },
      },
      {
        label: 'Quantity',
        name: 'quantity',
      },
    ],
    renderTableColumns: (fields) => {
      const columns = [];
      fields.forEach((field) => {
        if (typeof field.render === 'undefined' || field.render === null) {
          field.render = (object) => object[field.name];
        }
        columns.push({
          title: field.label,
          key: field.name,
          render: (object) => field.render(object),
        });
      });

      return columns;
    },
  };

  return { formDetails, tableDetails };
};

export default FormDetails;
