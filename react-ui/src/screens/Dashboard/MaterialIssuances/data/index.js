import { useSelector } from 'react-redux';
import moment from 'moment';

export const columns = [
  {
    title: 'MIS Number',
    dataIndex: 'misNo',
    key: 'misNo',
    datatype: 'string',
  },
  {
    title: 'Date',
    dataIndex: 'date',
    key: 'date',
    datatype: 'date',
  },
  {
    title: 'Requested By',
    dataIndex: 'requestedBy',
    key: 'requestedBy',
    datatype: 'object',
    dataToString: (object) => {
      return `${object.firstName} ${object.lastName}`;
    },
  },
  {
    title: 'Status',
    dataIndex: 'status',
    key: 'status',
    datatype: 'string',
  },
];

const FormDetails = () => {
  const inventories = useSelector((state) => state.dashboard.inventory.list);

  const formDetails = {
    form_name: 'material_issuance',
    form_items: [
      {
        label: 'MIS Number',
        name: 'misNo',
        placeholder: 'AUTOGENERATED UPON CREATION',
        readOnly: true,
      },
      {
        label: 'Date',
        name: 'date',
        type: 'date',
        rules: [{ required: true }],
      },
      {
        label: 'Remarks',
        name: 'remarks',
        type: 'textArea',
        rules: [{ message: 'Please provide a valid remark' }],
        placeholder: 'Remarks',
      },
    ],
  };

  const tableDetails = {
    label: 'Inventory List',
    name: 'inventoryList',
    key: 'inventoryList',
    rules: [{ required: true }],
    preloadedData: true, 
    fields: [
      {
        label: 'Control Number',
        name: 'controlNumber',
      },
      {
        label: 'Item',
        name: 'item',
        render: (object) => {
          return `[${object.item.code}] ${object.item.name}`;
        },
      },
      {
        label: 'Type',
        name: 'item',
        render: (object) => {
          return `${object.item.type.name}`;
        },
      },
      {
        label: 'Stock on Hand',
        name: 'stockOnHand',
        type: 'readOnly',
      },
      {
        label: 'Quantity Issued',
        name: 'quantity',
        type: 'number',
        rules: [{ required: true }],
        min: 0,
      },
      {
        label: 'Quantity Remaining',
        name: 'quantityRemaining',
        render: (object) => {
          if (object.stockOnHand !== null && typeof object.stockOnHand !== 'undefined') {
            return object.stockOnHand - (object?.quantity ?? 0);
          }
        },
      },
    ],
    foreignKey: 'id',
    selectedKey: 'id',
    selectData: inventories,
    selectFields: [
      {
        title: 'Control Number',
        dataIndex: 'controlNumber',
        key: 'controlNumber',
      },
      {
        title: 'Date Created',
        dataIndex: 'dateCreated',
        key: 'dateCreated',
        render: (object) => {
          return moment(new Date(object)).format('DD/MM/YYYY');
        },
      },
      {
        title: 'Item',
        dataIndex: 'item',
        key: 'item',
        render: (object) => {
          return `[${object.code}] ${object.name}`;
        },
      },
      {
        title: 'Type',
        dataIndex: 'item',
        key: 'item',
        render: (object) => {
          return `${object.type.name}`;
        },
      },
      {
        title: 'Expiration',
        dataIndex: 'expiration',
        key: 'expiration',
        render: (object) => {
          return moment(new Date(object)).format('DD/MM/YYYY');
        },
      },
      {
        title: 'Stock',
        dataIndex: 'quantity',
        key: 'quantity',
      },
    ],
    getValues: (values) => {
      const products = [];
      values.returnSlipProducts.forEach((product) => {
        products.push({
          ...product,
        });
      });
      return products;
    },
    processData: (data) => {
      const processedData = {
        ...data,
        stockOnHand: data.quantity,
      };
      delete processedData.quantity;
      return processedData;
    },
    checkSelected: (selectedData, rowData) => {
      if (
        typeof selectedData !== 'undefined' &&
        selectedData !== null &&
        selectedData.some((item) => item.key === rowData.id)
      ) {
        return true;
      }
    },
    renderTableColumns: (fields) => {
      const columns = [];
      fields.forEach((field) => {
        if (typeof field.render === 'undefined' || field.render === null) {
          field.render = (object) => object[field.name];
        }
        if (field.name !== 'stockOnHand' && field.name !== 'quantityRemaining') {
          columns.push({
            title: field.label,
            key: field.name,
            render: (object) => field.render(object),
          });
        }
      });

      return columns;
    },
  };

  return { formDetails, tableDetails };
};

export default FormDetails;
