import { useState } from 'react';
import { useSelector } from 'react-redux';
import moment from 'moment';

export const columns = [
  {
    title: 'Number',
    dataIndex: 'number',
    key: 'number',
    datatype: 'string',
  },
  {
    title: 'Date',
    dataIndex: 'date',
    key: 'date',
    datatype: 'date',
  },
  {
    title: 'Payee',
    dataIndex: 'disbursement',
    key: 'disbursement',
    datatype: 'object',
    dataToString: (object) => object.payee.name,
  },
];

const FormDetails = () => {
  const pdcDisbursements = useSelector((state) => state.accounting.PDCDisbursements.list);
  const [displayModal, setDisplayModal] = useState(false);

  const formDetails = {
    form_name: 'pdc_vouchers',
    form_items: [
      {
        label: 'PDC Voucher Number',
        name: 'number',
        placeholder: 'AUTOGENERATED UPON CREATION',
        readOnly: true,
      },
      {
        label: 'Date',
        name: 'date',
        type: 'date',
        rules: [{ required: true }],
      },
      {
        label: 'PDC Disbursement',
        name: 'disbursement',
        type: 'selectTable',
        rules: [{ required: true }],
        allowEmpty: true,
        placeholder: 'Select Disbursement',
        displayModal,
        setDisplayModal,
        dataSource: pdcDisbursements,
        columns: [
          {
            title: 'PDC Number',
            dataIndex: 'number',
            key: 'number',
          },
          {
            title: 'Date',
            dataIndex: 'date',
            key: 'date',
            render: (date) => moment(new Date(date)).format('DD/MM/YYYY'),
          },
          {
            title: 'Payee',
            dataIndex: 'payee',
            key: 'payee',
            render: (data) => `[${data?.code}] ${data?.name}`,
          },
        ],
        rowKey: 'id',
        getValueProps: (value) => {
          if (typeof value !== 'undefined') {
            return { value: value?.number ?? '' };
          }
        },
        toString: (data) => data.number,
      },
      {
        label: 'Disbursement Date',
        name: 'disbursementDate',
        readOnly: true,
        render: (data) => moment(new Date(data)).format('DD/MM/YYYY'),
      },
      {
        label: 'Payee',
        name: 'payee',
        readOnly: true,
        render: (data) => `[${data.code}] ${data.name}`,
      },
    ],
    processDisplayData: (data) => {
      const processedData = {
        ...data,
        disbursementDate: data.disbursement.date,
        payee: data.disbursement.payee,
      };
      return processedData;
    },
  };

  const tableDetails = {
    label: 'Cheques',
    name: 'cheques',
    key: 'cheques',
    rules: [{ required: true }],
    fields: [
      {
        label: 'Cheque Number',
        name: 'number',
      },
      {
        label: 'Amount',
        name: 'amount',
      },
      {
        label: 'Remarks',
        name: 'remarks',
      },
    ],
    renderTableColumns: (fields) => {
      const columns = [];
      fields.forEach((field) => {
        if (typeof field.render === 'undefined' || field.render === null) {
          field.render = (object) => object[field.name];
        }
        columns.push({
          title: field.label,
          key: field.name,
          render: (object) => field.render(object),
        });
      });

      return columns;
    },
  };

  return { formDetails, tableDetails };
};

export default FormDetails;
